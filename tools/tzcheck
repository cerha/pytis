#!/usr/bin/env python

import argparse
import os
import re
import shutil
import sys
import tempfile

import psycopg2 as dbapi

import pytis.data.gensqlalchemy as sql
import pytis.util

db_connection = None


def connect():
    global db_connection
    if db_connection is None:
        kwargs = {}
        import config
        for option, value in (('user', config.dbuser),
                              ('password', config.dbpass),
                              ('database', config.dbname),
                              ('host', config.dbhost),
                              ('port', config.dbport),
                              ('sslmode', config.dbsslm),
                              ):
            if value is not None:
                kwargs[option] = value
        db_connection = dbapi.connect(**kwargs)


def query(query, args):
    connect()
    c = db_connection.cursor()
    c.execute(query, args)
    result = c.fetchall()
    c.close()
    return result


def load_table(schema_name, table_name):
    q = ("select attname, typname from pg_class "
         "join pg_namespace on relnamespace = pg_namespace.oid "
         "join pg_attribute on attrelid = pg_class.oid "
         "join pg_type on atttypid = pg_type.oid "
         "where nspname = %(schema)s and relname = %(table)s ")
    a = dict(schema=schema_name, table=table_name)
    columns = [(row[0], row[1].endswith('tz'),) for row in query(q, a)]
    return dict(columns)


def load_function(schema_name, function_name):
    q = ("select proargtypes from pg_proc "
         "join pg_namespace on pronamespace = pg_namespace.oid "
         "where nspname = %(schema)s and proname = %(function)s")
    a = dict(schema=schema_name, function=function_name)
    result = query(q, a)
    if len(result) == 0:
        return {}
    arguments = [type_mapping[int(arg)].endswith('tz') for arg in result[0][0].split()]
    return dict(enumerate(arguments))

type_mapping = None


def load_type_mapping():
    global type_mapping
    if type_mapping is None:
        q = "select oid, typname from pg_type"
        type_mapping = dict(query(q, {}))


def load_specifications(module):
    pytis.util.load_module(module)
    return [s for s in sql.specification_instances()
            if isinstance(s, (sql.SQLTable, sql.SQLFunctional,))]


def check_specifications(specifications):
    load_type_mapping()
    changes = check_table_specifications([s for s in specifications
                                          if isinstance(s, sql.SQLTable)])
    changes += check_function_specifications([s for s in specifications
                                              if isinstance(s, sql.SQLFunctional) and
                                              s.__class__.__name__ != 'T'])
    return changes


def check_table_specifications(specifications):
    changes = []
    for table in specifications:
        with_tz = []
        without_tz = []
        for f in table.fields:
            type_ = f.type()
            if ((isinstance(type_, (pytis.data.DateTime, pytis.data.Time,)) and
                 not isinstance(type_, pytis.data.Date))):
                (without_tz if type_._without_timezone else with_tz).append(f)
        if with_tz or without_tz:
            table_name = table.pytis_name(real=True)
            spec_class = table.__class__
            spec_name = spec_class_name = spec_class.__name__
            module_name = spec_class.__module__
            if module_name:
                spec_name = module_name + '.' + spec_name
            for schema_name in table.object_schemas():
                db_table = load_table(schema_name, table_name)
                for f in with_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, column_name
                    elif not is_with_tz:
                        changes.append((module_name, spec_class_name, column_name, True,))
                        print "FIX - WITHOUT TIMEZONE:", spec_name, column_name
                    else:
                        print 'OK:', spec_name, column_name
                for f in without_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, column_name
                    elif is_with_tz:
                        changes.append((module_name, spec_class_name, column_name, False,))
                        print "FIX - WITH TIMEZONE:", spec_name, column_name
                    else:
                        print 'OK:', spec_name, column_name
    return changes


def check_function_specifications(specifications):
    changes = []
    for function in specifications:
        with_tz = []
        without_tz = []
        arguments = function.arguments
        for i in range(len(arguments)):
            type_ = arguments[i].type()
            if ((isinstance(type_, (pytis.data.DateTime, pytis.data.Time,)) and
                 not isinstance(type_, pytis.data.Date))):
                (without_tz if type_._without_timezone else with_tz).append(i)
        if with_tz or without_tz:
            function_name = function.pytis_name(real=True)
            spec_class = function.__class__
            spec_name = spec_class.__name__
            module_name = spec_class.__module__
            if module_name:
                spec_name = module_name + '.' + spec_name
            for schema_name in function.object_schemas():
                db_function = load_function(schema_name, function_name)
                for a in with_tz:
                    is_with_tz = db_function.get(a)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, a
                    elif not is_with_tz:
                        print "FIX - WITHOUT TIMEZONE:", spec_name, a
                    else:
                        print 'OK:', spec_name, a
                for a in without_tz:
                    is_with_tz = db_function.get(a)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, a
                    elif is_with_tz:
                        print "FIX - WITH TIMEZONE:", spec_name, a
                    else:
                        print 'OK:', spec_name, a
    return changes


def update_specifications(changes):
    python_path = sys.path
    re_class = re.compile('^class +([a-zA-Z_0-9]+) *[(]')
    re_field = re.compile('^[ a-zA-Z_0-9.]*Column *'
                          '[(][\'"]([a-zA-Z_0-9]+)[\'"],.*Time(Range)? *[(]')
    re_without_timezone = re.compile('.*without_timezone=(True|False)')
    updates = {}  # file - class - field - without_timezone value
    for module, class_, column, value in changes:
        class_dict = updates[module] = updates.get(module, {})
        column_dict = class_dict[class_] = class_dict.get(class_, {})
        column_dict[column] = value
    for module, class_dict in updates.items():
        module_path = os.path.join(*module.split('.')) + '.py'
        for p in python_path:
            module_file = os.path.join(p, module_path)
            try:
                input_ = open(module_file)
                break
            except IOError:
                pass
        else:
            print "ERROR: Can't open module not found:", module
            continue
        fd, output_file = tempfile.mkstemp()
        try:
            output = os.fdopen(fd, 'w')
            current_class_dict = None
            for line in input_.readlines():
                new_line = line
                if current_class_dict:
                    match = re_field.match(line)
                    if match is not None:
                        field = match.group(1)
                        value = current_class_dict.get(field)
                        if value is not None:
                            del current_class_dict[field]
                        wtz_match = re_without_timezone.match(line)
                        if wtz_match is None:
                            end = match.end()
                            new_line = line[:end] + 'without_timezone=' + str(value)
                            if end >= len(line) or line[end] != ')':
                                new_line += ', '
                            new_line += line[end:]
                        else:
                            beg, end = match.span(1)
                            new_line = line[:beg] + str(value) + line[end:]
                match = re_class.match(line)
                if match is not None:
                    class_name = match.group(1)
                    current_class_dict = class_dict.get(class_name)
                output.write(new_line)
            output.close()
            input_.close()
        except Exception as e:
            print 'ERROR:', e
            try:
                os.remove(output_file)
            except:
                pass
        else:
            try:
                shutil.move(output_file, module_file)
            except Exception as e:
                print "ERROR: Can't install modified file:", module_file, e
    for module_name, class_dict in updates.items():
        for class_name, field_dict in class_dict.items():
            for field_name in field_dict:
                print 'NOT UPDATED:', module_name, class_name, field_name


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('config_file', metavar='CONFIG-FILE',
                        help="pytis configuration file")
    parser.add_argument('module', metavar='DBDEFS-MODULE',
                        help="pytis configuration file")
    parser.add_argument('--update', action='store_true',
                        help="update specifications as needed")
    args = parser.parse_args()
    pytis.util.set_configuration_file(args.config_file)
    specifications = load_specifications(args.module)
    changes = check_specifications(specifications)
    if args.update:
        update_specifications(changes)

if __name__ == '__main__':
    main()
