#!/usr/bin/env python

import sys

import psycopg2 as dbapi

import pytis.data.gensqlalchemy as sql
import pytis.util

db_connection = None
def connect():
    global db_connection
    if db_connection is None:
        kwargs = {}
        import config
        for option, value in (('user', config.dbuser),
                              ('password', config.dbpass),
                              ('database', config.dbname),
                              ('host', config.dbhost),
                              ('port', config.dbport),
                              ('sslmode', config.dbsslm),
                              ):
            if value is not None:
                kwargs[option] = value
        db_connection = dbapi.connect(**kwargs)

def load_table(schema_name, table_name):
    connect()
    c = db_connection.cursor()
    c.execute(("select attname, typname from pg_class "
               "join pg_namespace on relnamespace = pg_namespace.oid "
               "join pg_attribute on attrelid = pg_class.oid "
               "join pg_type on atttypid = pg_type.oid "
               "where nspname = '%s' and relname = '%s' ") % (schema_name, table_name,))
    columns = [(row[0], row[1].endswith('tz'),) for row in c.fetchall()]
    c.close()
    return dict(columns)

def load_specifications():
    import config
    for m in config.search_modules:
        if m.endswith('.defs'):
            pytis.util.load_module(m[:-4] + 'dbdefs')
    return [s for s in sql.specification_instances() if isinstance(s, sql.SQLTable)]

def check_specifications(specifications):
    for table in specifications:
        with_tz = set()
        without_tz = set()
        for f in table.fields:
            type_ = f.type()
            if ((isinstance(type_, (pytis.data.DateTime, pytis.data.Time,)) and
                 not isinstance(type_, pytis.data.Date))):
                (without_tz if type_._without_timezone else with_tz).add(f)
        if with_tz or without_tz:
            table_name = table.pytis_name(real=True)
            for schema_name in table.object_schemas():
                db_table = load_table(schema_name, table_name)
                for f in with_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", table_name, column_name
                    elif not is_with_tz:
                        print "FIX - WITHOUT TIMEZONE:", table_name, column_name
                    else:
                        print 'OK:', table_name, column_name
                for f in without_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", table_name, column_name
                    elif is_with_tz:
                        print "FIX - WITH TIMEZONE:", table_name, column_name
                    else:
                        print 'OK:', table_name, column_name

def main():
    if len(sys.argv) != 2:
        sys.stderr.write("usage: %s CONFIG-FILE\n" % (sys.argv[0],))
        sys.exit(1)
    config_file = sys.argv[1]
    pytis.util.set_configuration_file(config_file)
    specifications = load_specifications()
    check_specifications(specifications)

if __name__ == '__main__':
    main()
