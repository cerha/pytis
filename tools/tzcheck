#!/usr/bin/env python

import optparse
import os
import re
import sys
import tempfile

import psycopg2 as dbapi

import pytis.data.gensqlalchemy as sql
import pytis.util

db_connection = None
def connect():
    global db_connection
    if db_connection is None:
        kwargs = {}
        import config
        for option, value in (('user', config.dbuser),
                              ('password', config.dbpass),
                              ('database', config.dbname),
                              ('host', config.dbhost),
                              ('port', config.dbport),
                              ('sslmode', config.dbsslm),
                              ):
            if value is not None:
                kwargs[option] = value
        db_connection = dbapi.connect(**kwargs)

def load_table(schema_name, table_name):
    connect()
    c = db_connection.cursor()
    c.execute(("select attname, typname from pg_class "
               "join pg_namespace on relnamespace = pg_namespace.oid "
               "join pg_attribute on attrelid = pg_class.oid "
               "join pg_type on atttypid = pg_type.oid "
               "where nspname = '%s' and relname = '%s' ") % (schema_name, table_name,))
    columns = [(row[0], row[1].endswith('tz'),) for row in c.fetchall()]
    c.close()
    return dict(columns)

def load_specifications():
    import config
    for m in config.search_modules:
        if m.endswith('.defs'):
            pytis.util.load_module(m[:-4] + 'dbdefs')
    return [s for s in sql.specification_instances() if isinstance(s, sql.SQLTable)]

def check_specifications(specifications):
    changes = set()
    for table in specifications:
        with_tz = set()
        without_tz = set()
        for f in table.fields:
            type_ = f.type()
            if ((isinstance(type_, (pytis.data.DateTime, pytis.data.Time,)) and
                 not isinstance(type_, pytis.data.Date))):
                (without_tz if type_._without_timezone else with_tz).add(f)
        if with_tz or without_tz:
            table_name = table.pytis_name(real=True)
            spec_class = table.__class__
            spec_name = spec_class_name = spec_class.__name__
            module_name = spec_class.__module__
            if module_name:
                spec_name = module_name + '.' + spec_name
            for schema_name in table.object_schemas():
                db_table = load_table(schema_name, table_name)
                for f in with_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, column_name
                    elif not is_with_tz:
                        changes.add((module_name, spec_class_name, column_name, True,))
                        print "FIX - WITHOUT TIMEZONE:", spec_name, column_name
                    else:
                        print 'OK:', spec_name, column_name
                for f in without_tz:
                    column_name = f.id()
                    is_with_tz = db_table.get(column_name)
                    if is_with_tz is None:
                        print "MISSING:", spec_name, column_name
                    elif is_with_tz:
                        changes.add((module_name, spec_class_name, column_name, False,))
                        print "FIX - WITH TIMEZONE:", spec_name, column_name
                    else:
                        print 'OK:', spec_name, column_name
    return changes

def update_specifications(changes):
    python_path = sys.path
    re_class = re.compile('^class +([a-zA-Z_0-9]+) *[(]')
    re_field = re.compile('^[ a-zA-Z_0-9.]*Column *'
                          '[(][\'"]([a-zA-Z_0-9]+)[\'"],.*Time(Range)? *[(]')
    re_without_timezone = re.compile('.*without_timezone=(True|False)')
    updates = {} # file - class - field - without_timezone value
    for module, class_, column, value in changes:
        class_dict = updates[module] = updates.get(module, {})
        column_dict = class_dict[class_] = class_dict.get(class_, {})
        column_dict[column] = value
    for module, class_dict in updates.items():
        module_path = os.path.join(*module.split('.')) + '.py'
        for p in python_path:
            module_file = os.path.join(p, module_path)
            try:
                input_ = open(module_file)
                break
            except IOError:
                pass
        else:
            print "ERROR: Can't open module not found:", module
            continue
        fd, output_file = tempfile.mkstemp()
        try:
            output = os.fdopen(fd, 'w')
            current_class_dict = None
            for line in input_.readlines():
                new_line = line
                if current_class_dict:
                    match = re_field.match(line)
                    if match is not None:
                        field = match.group(1)
                        value = current_class_dict.get(field)
                        if value is not None:
                            del current_class_dict[field]
                        wtz_match = re_without_timezone.match(line)
                        if wtz_match is None:
                            end = match.end()
                            new_line = line[:end] + 'without_timezone=' + str(value)
                            if end >= len(line) or line[end] != ')':
                                new_line += ', '
                            new_line += line[end:]
                        else:
                            beg, end = match.span(1)
                            new_line = line[:beg] + str(value) + line[end:]
                match = re_class.match(line)
                if match is not None:
                    class_name = match.group(1)
                    current_class_dict = class_dict.get(class_name)
                output.write(new_line)
            output.close()
            input_.close()
        except Exception as e:
            print 'ERROR:', e
            try:
                os.remove(output_file)
            except:
                pass
        else:
            try:
                os.rename(output_file, module_file)
            except Exception as e:
                print "ERROR: Can't install modified file:", module_file, e
    for module_name, class_dict in updates.items():
        for class_name, field_dict in class_dict.items():
            for field_name in field_dict:
                print 'NOT UPDATED:', module_name, class_name, field_name
                
def main():
    parser = optparse.OptionParser()
    parser.add_option("--update", action="store_true",
                      help="update specifications as needed")
    options, args = parser.parse_args()
    if len(args) != 1:
        sys.stderr.write("usage: %s [ --update ] CONFIG-FILE\n" % (sys.argv[0],))
        sys.exit(1)
    config_file = args[0]
    pytis.util.set_configuration_file(config_file)
    specifications = load_specifications()
    changes = check_specifications(specifications)
    if options.update:
        update_specifications(changes)

if __name__ == '__main__':
    main()
