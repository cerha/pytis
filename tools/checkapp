#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2010-2018 OUI Technology Ltd.
# Copyright (C) 2019 Tomáš Cerha <t.cerha@gmail.com>
#
# COPYRIGHT NOTICE
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import copy
import getopt
import sys
import datetime
import os

pytislib = os.path.normpath(os.path.join(sys.path[0], '..', 'lib'))
if os.path.isdir(pytislib) and pytislib not in sys.path:
    sys.path.append(pytislib)

import pytis.extensions
import pytis.util


class CheckReporterExt(pytis.extensions.CheckReporter):

    def start(self, number_of_items):
        self._number_of_items = number_of_items
        self._number_of_errors = 0
        self._start_time = datetime.datetime.now()
        self._current = 0

    def end(self):
        end_time = datetime.datetime.now()
        diff = end_time - self._start_time
        print "=" * 80
        print "Checked %s specifications in %s seconds" % (self._number_of_items, diff.seconds)

    def info(self, message):
        self._current += 1
        procent = (float(self._current) / self._number_of_items) * 100
        elapsed = datetime.datetime.now() - self._start_time
        print "%s sec\t%s/%s\t%s%%\t%s" % (elapsed.seconds, self._current, self._number_of_items,
                                           int(procent), message)
        sys.stdout.flush()

    def error(self, message):
        print 'Error: {}'.format(message.encode('utf-8'))


class NullLogger(pytis.util.Logger):

    def log(self, *args, **kwargs):
        pass


def usage(optexception=None):
    sys.stderr.write("""usage: %s OPTIONS [ SPEC-NAME-PREFIX ]
  --config=CONFIG_FILE   ... use given configuration file
  --devel                ... development checking mode
  --verbose              ... print logging messages
  --help                 ... show this help
""")
    if optexception:
        sys.stderr.write(optexception.msg)
        sys.stderr.write('\n')
    sys.exit(1)


def checkopt(argv, option):
    try:
        i = argv.index(option)
        del argv[i]
    except Exception:
        return False
    return True


def run():
    argv = copy.copy(sys.argv)
    if checkopt(argv, '--help'):
        usage()
    if checkopt(argv, '--devel'):
        checker_class = pytis.extensions.DevelChecker
    else:
        checker_class = pytis.extensions.AppChecker
    verbose = checkopt(argv, '--verbose')
    import config
    try:
        config.add_command_line_options(argv)
    except getopt.GetoptError as e:
        usage(e)
    spec_name_prefix = None
    args = sys.argv[1:]
    if args:
        if len(args) > 1:
            usage()
        spec_name_prefix = args[0]
    if not verbose:
        config.log_logger = (NullLogger, (), {})
    reporter = CheckReporterExt()
    checker_class(spec_name_prefix=spec_name_prefix).batch_check(reporter)


if __name__ == '__main__':
    run()
