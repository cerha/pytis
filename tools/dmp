#!/usr/bin/env python

import codecs
import optparse
import string
import sys

import psycopg2 as dbapi

import pytis.extensions

import pytis.data.postgresql
pg_escape = pytis.data.postgresql.pg_escape

class Configuration(object):
    dbparameters = dict(host=None, database=None, user=None, password=None)

decoder = codecs.getdecoder('utf-8')
def decode(string):
    return decoder(string)[0]

def run_queries(queries, cursor, connection, dry_run, quiet=False):
    for q in queries:
        if dry_run:
            print q
        else:
            cursor.execute(q)
    if not dry_run:
        connection.commit()
    if not quiet:
        print "Changes applied, don't forget to update summary rights to get them fully applied."

def command_ls(parameters, dry_run, args):
    n_args = len(args)
    kwargs = {}
    if n_args <= 1:
        if n_args == 0:
            action = 'menu'
        else:
            action = args[0]
    else:
        action = args[0]
        if n_args != 2 or action == 'roles':
            print 'Error: extra arguments'
            return
        kwargs['specifications'] = [args[1]]
    if action not in ('menu', 'roles', 'rights',):
        print 'Error: invalid action: %s' % (action,)
        return
    return pytis.extensions.dmp_ls(parameters, dry_run, action, **kwargs)
    
def command_system_rights(parameters, dry_run, args, system=True):
    if not args:
        print "Error: missing shortname"
        return
    shortname = args.pop(0)
    requests = []
    for spec in args:
        if not spec:
            print "Error: invalid argument:", spec
            return
        if spec[0] == '+':
            granted = True
            spec = spec[1:]
        elif spec[0] == '-':
            granted = False
            spec = spec[1:]
        else:
            granted = True
        separator_pos = spec.find(':')
        if separator_pos < 0:
            print "Error: invalid argument:", spec
            return
        role = spec[:separator_pos]
        right_columns = spec[separator_pos+1:].split('/')
        right = right_columns[0]
        columns = right_columns[1:] or [None]
        if right not in ('*', 'view', 'insert', 'update', 'delete', 'print', 'export', 'call', 'show',):
            print "Error: invalid right:", right
            return
        if system and right == '*':
            rights_to_change = ('view', 'insert', 'update', 'delete', 'print', 'export', 'call',)
        else:
            rights_to_change = (right,)
        for r in rights_to_change:
            for c in columns:
                requests.append((shortname, role, r, granted, c, system,))
    return pytis.extensions.dmp_change_rights(parameters, dry_run, requests)

def command_rights(connection, dry_run, args):
    return command_system_rights(connection, dry_run, args, system=False)

def command_import(parameters, dry_run, args):
    if len(args) > 0:
        print 'Error: extra arguments'
        return
    return pytis.extensions.dmp_import(parameters, dry_run)

def command_add_member(parameters, dry_run, args):
    if len(args) < 2:
        print "Error: missing specification name"
        return
    if len(args) > 2:
        print 'Error: extra arguments'
        return
    member, role = args
    return pytis.extensions.dmp_add_member(parameters, dry_run, member, role)

def command_reset_rights(parameters, dry_run, args):
    if len(args) < 1:
        print "Error: missing specification name"
        return
    if len(args) > 1:
        print 'Error: extra arguments'
        return
    specification = args[0]
    return pytis.extensions.dmp_reset_rights(parameters, dry_run, specification)

def command_add_form(parameters, dry_run, args):
    if len(args) < 2:
        print "Error: missing argument"
        return
    if len(args) > 2:
        print 'Error: extra arguments'
        return
    fullname, position = args
    return pytis.extensions.dmp_add_form(parameters, dry_run, fullname, position)

def command_update_form(parameters, dry_run, args):
    if len(args) < 1:
        print "Error: missing defs directory or specification name"
        return
    if len(args) > 2:
        print 'Error: extra arguments'
        return
    if len(args) > 1:
        fullname = args[1]
    else:
        fullname = None
    specification = args[0]
    return pytis.extensions.dmp_update_form(parameters, dry_run, specification, new_fullname=fullname)

def command_delete(parameters, dry_run, args):
    if not args:
        print "Error: missing action identifier"
        return
    action = args.pop(0)
    if args:
        print "Error: extra arguments:", args
        return
    if not action:
        print "Error: empty action"
    if action[0] in string.digits:
        result = pytis.extensions.dmp_delete_menu(parameters, dry_run, action)
    elif len(action.split('/')) > 2:
        result = pytis.extensions.dmp_delete_fullname(parameters, dry_run, action)
    else:
        result = pytis.extensions.dmp_delete_shortname(parameters, dry_run, action)
    return result

def command_convert_system_rights(parameters, dry_run, args):
    if not args:
        print "Error: missing shortname"
        return
    shortname = args.pop(0)
    if args:
        print "Error: extra arguments:", args
        return
    return pytis.extensions.dmp_convert_system_rights(parameters, dry_run, shortname)
    
def command_commit(parameters, dry_run, args):
    if args:
        print "Error: commit takes no arguments"
        return
    return pytis.extensions.dmp_commit(parameters, dry_run)

def find_command(command_string):
    command = command_string.replace('-', '_')
    command_function = globals().get('command_' + command)
    if command_function is None:
        command_function = globals().get('cmd_' + command)
        new = False
    else:
        new = True
    return command_function, new

USAGE = """usage: %prog [ OPTIONS ] COMMAND [ COMMAND-OPTIONS ]

Commands:
  ls [ menu | roles | rights [ SPECIFICATION ] ]
  system-rights SHORTNAME [+|-]ROLE:{view|insert|update|delete|print|export|call|*}[/COLUMN] ...
  rights SHORTNAME [+|-]ROLE:{show|view|insert|update|delete|print|export|call|*}[/COLUMN] ...
  add-member MEMBER ROLE
  add-form FULLNAME [ MENU-POSITION | PRECEDING-ITEM-TITLE ]
  update-form SPECIFICATION-NAME [ NEW-FULLNAME ]
  delete { SHORTNAME | FULLNAME | MENU-POSITION }
  convert-system-rights SHORTNAME
  reset-rights SPECIFICATION-NAME
  import
  commit"""

def parse_options():
    parser = optparse.OptionParser(usage=USAGE)
    parser.add_option("--config", default=None, action="store", dest="config")
    parser.add_option("--host", default=None, action="store", dest="host")
    parser.add_option("--database", default=None, action="store", dest="database")
    parser.add_option("--user", default=None, action="store", dest="user")
    parser.add_option("--password", default=None, action="store", dest="password")
    parser.add_option("--dry-run", action="store_true", dest="dry_run")
    command_index = 1
    while command_index < len(sys.argv):
        arg = sys.argv[command_index]
        if not arg or arg[0] != '-':
            break
        command_index += 1
    args = sys.argv[command_index:]
    if not args or not find_command(args[0])[0]:
        parser.print_help()
        sys.exit(1)
    options, _args = parser.parse_args(args=sys.argv[1:command_index])
    dbparameters = Configuration.dbparameters
    dbparameters['host'] = options.host
    dbparameters['database'] = options.database
    dbparameters['user'] = options.user
    dbparameters['password'] = options.password
    return options, args

def run():
    options, args = parse_options()
    parameters = {}
    for k, v in Configuration.dbparameters.items():
        if v is not None:
            parameters[k] = v    
    command = args[0].replace('-', '_')
    command_args = args[1:]
    command_function, new = find_command(args[0])
    if new:
        parameters['configuration_file'] = options.config
        connection = parameters
    else:
        connection = dbapi.connect(**parameters)
    messages = command_function(connection, options.dry_run, command_args)
    if messages:
        for m in messages:
            sys.stdout.write(m)

if __name__ == '__main__':
    run()
