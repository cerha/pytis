#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2012 Brailcom, o.p.s.
#
# COPYRIGHT NOTICE
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import getpass
import optparse
import os
import string
import sys

import psycopg2 as dbapi

import pytis.data
import pytis.extensions
import pytis.util

admin_user = 'admin'

class Configuration(object):
    def __init__(self, configuration_file=None, schemas=None,
                 database=None, host=None, port=None, user=None, password=None, sslmode=None):
        self._raw_connection_data = raw_config = {}
        import config
        if configuration_file is not None:
            for o in config.options():
                o.reset()
            config.config_file = configuration_file
            config.read_configuration_file(configuration_file)
        parameters = ('schemas', 'database', 'host', 'port', 'user', 'password', 'sslmode',)
        dbconnection = config.dbconnection
        for p in parameters:
            value = getattr(dbconnection, p, lambda: None)()
            if value is not None:
                raw_config[p] = value
        self._connection_data = dbconnection
        
    def connection_data(self):
        return self._connection_data

    def raw_connection_data(self):
        return self._raw_connection_data

def key_table(connection_data):
    return pytis.data.dbtable('e_pytis_crypto_keys',
                              ('key_id', 'name', 'username', 'key', 'fresh',),
                              connection_data)

def check_area(connection_data, name):
    data = pytis.data.dbtable('c_pytis_crypto_names', ('name', 'description',), connection_data)
    return True if data.row(pytis.data.sval(name)) else False

def read_password(repeat=False, prompt="Password: "):
    password = getpass.getpass(prompt=prompt)
    if repeat:
        password2 = getpass.getpass(prompt="Repeat password: ")
        if password != password2:
            return None, None
    db_key = pytis.extensions.dbfunction('pytis_crypto_db_key',
                                         ('key_name_', pytis.data.sval('pytis'),))
    encrypted_password = pytis.util.rsa_encrypt(db_key, password)
    return password, encrypted_password

def check_password(key, password, connection_data):
    function = pytis.data.DBFunctionDefault('pytis_crypto_extract_key', connection_data)
    row = pytis.data.Row((('encrypted', key,), ('psw', pytis.data.sval(password),),))
    return True if function.call(row)[0][0].value() else False

def admin_key(area, connection_data):
    data = key_table(connection_data)
    condition = pytis.data.AND(pytis.data.EQ('username', pytis.data.sval(admin_user)),
                               pytis.data.EQ('name', pytis.data.sval(area)))
    if not data.select(condition):
        return None, None
    row = data.fetchone()
    return row['key_id'], row['key']
    
def command_new_key(configuration, args):
    if not args:
        print "Error: encryption area not specified"
        return
    area = args.pop(0)
    if args:
        bits_string = args.pop(0)
        try:
            bits = int(bits_string)
        except ValueError:
            print "Error: invalid bits number:", bits_string
    else:
        bits = 1024
    if args:
        print "Error: extra arguments:", args
        return
    connection_data = configuration.connection_data()
    if not check_area(connection_data, area):
        print "Error: no such encryption area:", area
        return
    data = key_table(connection_data)
    condition = pytis.data.AND(pytis.data.EQ('username', pytis.data.sval(admin_user)),
                               pytis.data.EQ('name', pytis.data.sval(area)))
    present = (data.select(condition=condition) > 0)
    data.close()
    if present:
        print "Error: key for the encryption area already present"
        return
    password, encrypted_password = read_password(True, prompt="Key password: ")
    if password is None:
        print "Error: passwords do not match"
        return
    bytes = (bits + 7) / 8
    key = string.join(['%02x' % (ord(b),) for b in os.urandom(bytes)], '')
    function = pytis.data.DBFunctionDefault('pytis_crypto_insert_key', connection_data)
    row = pytis.data.Row((('name_', pytis.data.sval(area),),
                          ('user_', pytis.data.sval(admin_user),),
                          ('key_', pytis.data.sval(key),),
                          ('password', pytis.data.sval(password),),
                          ))
    result = function.call(row)[0][0].value()
    if not result:
        print "Error: key not inserted (unknown error)"
        return
    print "New admin key for encryption area %s inserted" % (area,)

def command_password(configuration, args):
    if not args:
        print "Error: encryption area not specified"
        return
    area = args.pop(0)
    if args:
        print "Error: extra arguments:", args
        return        
    connection_data = configuration.connection_data()
    key_id, key = admin_key(area, connection_data)
    if key_id is None:
        print "Error: admin key not found for the area:", area
        return
    old_password, encrypted_old_password = read_password(prompt="Current password: ")
    if not check_password(key, old_password, connection_data):
        print "Error: invalid password"
        return
    new_password, encrypted_new_password = read_password(True, prompt="New password: ")
    if new_password is None:
        print "Error: passwords do not match"
        return
    function = pytis.data.DBFunctionDefault('pytis_crypto_change_password', connection_data)
    row = pytis.data.Row((('id_', key_id,),
                          ('old_psw', pytis.data.sval(encrypted_old_password),),
                          ('new_psw', pytis.data.sval(encrypted_new_password),),))
    if not function.call(row)[0][0].value():
        print "Error: password change failed"
        return
    print "Password for encryption area %s changed" % (area,)

def command_add_user(configuration, args):
    if len(args) < 3:
        print "Error: not enough arguments"
        return
    if len(args) > 3:
        print "Error: extra arguments:", args
        return
    area, user, sender = args
    connection_data = configuration.connection_data()
    key_id, key = admin_key(area, connection_data)
    if key_id is None:
        print "Error: admin key not found for the area:", area
        return
    transaction = pytis.data.DBTransactionDefault(connection_data)
    condition = pytis.data.AND(pytis.data.EQ('name', pytis.data.sval(area)),
                               pytis.data.EQ('username', pytis.data.sval(user)))
    data = pytis.data.dbtable('e_pytis_crypto_keys', ('name', 'username',), connection_data)
    if data.select(condition) > 0:
        print "Error: key already exists for the given user and area:", user, area
        return
    data.close()
    function = pytis.data.DBFunctionDefault('pytis_crypto_user_contact', connection_data)
    row = pytis.data.Row((('username', pytis.data.sval(user),),))
    result = function.call(row, transaction=transaction)[0]
    email, gpg_key = [v.value() for v in result]
    if gpg_key is None:
        print "Error: crypto contact not found for user:", user
        return
    characters = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789_-=$#%!'
    user_password = string.join([characters[ord(c) % 64] for c in os.urandom(32)], '')
    admin_password, encrypted_password = read_password(prompt="Key password: ")
    if not check_password(key, admin_password, connection_data):
        print "Error: invalid password"
        return
    function = pytis.data.DBFunctionDefault('pytis_crypto_copy_key', connection_data)
    row = pytis.data.Row ((('name_', pytis.data.sval(area),),
                           ('from_user', pytis.data.sval(admin_user),),
                           ('to_user', pytis.data.sval(user),),
                           ('from_psw', pytis.data.sval(admin_password),),
                           ('to_psw', pytis.data.sval(user_password),),))
    if not function.call(row, transaction=transaction)[0][0]:
        print "Error: user key installation failed"
        return
    subject = u"Vaše heslo pro šifrovanou oblast %s" % (area,)
    text = u"Vaše heslo pro šifrovanou aplikační oblast %s je:\n%s\n" % (area, user_password,)
    error = pytis.extensions.send_mail(email, sender,subject, text, key=gpg_key)
    if error:
        print "Error: failure when sending mail to the user:", error
        return
    transaction.commit()

def command_delete_user(configuration, args):
    if len(args) < 2:
        print "Error: not enough arguments"
        return
    area = args.pop(0)
    user = args.pop(0)
    if args:
        print "Error: extra arguments:", args
        return        
    connection_data = configuration.connection_data()
    data = key_table(connection_data)
    condition = pytis.data.AND(pytis.data.EQ('username', pytis.data.sval(user)),
                               pytis.data.EQ('name', pytis.data.sval(area)))
    if not data.select(condition):
        print "Error: no key for given area and user present"
        return
    result = data.delete_many(condition)
    if not result:
        print "Error: delete error"
        return
    print "Key of %s user for area %s deleted" % (user, area,)

def command_encrypt(configuration, args):
    if len(args) < 3:
        print "Error: not enough arguments"
        return
    if len(args) > 3:
        print "Error: extra arguments:", args
        return
    area, table, column = args
    connection_data = configuration.connection_data()
    connection = dbapi.connect(**configuration.raw_connection_data())
    cursor = connection.cursor()
    pos = table.find('.')
    if pos == -1:
        schema_name = 'public'
        table_name = table
    else:
        schema_name = table[:pos]
        table_name = table[pos+1:]
    cursor.execute(("select typname from pg_class join "
                    "pg_namespace on (relnamespace=pg_namespace.oid) join "
                    "pg_attribute on (attrelid=pg_class.oid) join "
                    "pg_type on (atttypid=pg_type.oid) "
                    "where nspname=%s and relname=%s and attname=%s"),
                   (schema_name, table_name, column,))
    row = cursor.fetchone()
    if row is None:
        print "Error: column not found: %s.%s.%s" % (schema_name, table_name, column,)
        return
    type_ = row[0]
    mapping = {'bpchar': 'text',
               'char': 'text',
               'smallint': 'int',
               'bigint': 'int',
               'int2': 'int',
               'int4': 'int',
               'int8': 'int',
               'numeric': 'float',
               'float4': 'float',
               'float8': 'float',
               'name': 'text',
               'text': 'text',
               'varchar': 'text',
               }
    column_type = mapping.get(type_)
    if column_type is None:
        print "Error: unsupported column type:", type_
        return
    key_id, key = admin_key(area, connection_data)
    if key_id is None:
        print "Error: admin key not found for the area:", area
        return
    password, encrypted_password = read_password()
    if not check_password(key, password, connection_data):
        print "Error: invalid admin password for area:", area
        return
    cursor.execute("select pytis_crypto_unlock_passwords (%s, %s)", (admin_user, encrypted_password,))
    if not cursor.fetchone():
        print "Error: password not accepted"
        return
    cursor.execute("alter table %s rename column %s to _tmp_%s" % (table, column, column,))
    cursor.execute("alter table %s add column %s bytea" % (table, column,))
    cursor.execute("update %s set %s=pytis_encrypt_%s(_tmp_%s, %%s)" %
                   (table, column, column_type, column,),
                   (area,))
    connection.commit()
    print ("Column %s.%s encrypted by area %s, its type set to bytea and constraints dropped." %
           (table, column, area,))
    print ("Original column data retained in column %s._tmp_%s, drop it after testing and backup." %
           (table, column,))

def command_new_communication_key(configuration, args):
    if len(args) < 1:
        print "Error: not enough arguments"
        return
    if len(args) > 1:
        print "Error: extra arguments:", args
        return
    bits = int(args[0])
    if bits < 1024:
        print "Error: BITS must be at least 1024"
        return
    n = bits
    while n > 1:
        if n % 2 != 0:
            print "Error: BITS must be power of 2"
            return
        n = n / 2
    connection_data = configuration.connection_data()
    connection = dbapi.connect(**configuration.raw_connection_data())
    cursor = connection.cursor()
    cursor.execute("select pytis_crypto_create_db_key('pytis', %s)", (bits,))
    connection.commit()
    
def find_command(command_string):
    command = command_string.replace('-', '_')
    command_function = globals().get('command_' + command)
    return command_function

USAGE = """usage: %prog [ OPTIONS ] COMMAND [ COMMAND-OPTIONS ]

Commands:
  new-key AREA [ BITS ]
    - generate new encryption key for encryption AREA
  password AREA
    - change administrator's password of AREA admin encryption key
  add-user AREA USER EMAIL-SENDER
    - make encryption AREA key accessible for USER
  delete-user AREA USER
    - remove USER's access to encryption AREA
  encrypt AREA TABLE COLUMN
    - encrypt given TABLE COLUMN with the encryption key of AREA
  new-communication-key BITS
    - generate new communication key and remove the old one"""

def parse_options():
    parser = optparse.OptionParser(usage=USAGE)
    parser.add_option("--config", default=None, action="store", dest="config")
    parser.add_option("--host", default=None, action="store", dest="host")
    parser.add_option("--database", default=None, action="store", dest="database")
    parser.add_option("--user", default=None, action="store", dest="user")
    parser.add_option("--password", default=None, action="store", dest="password")
    command_index = 1
    while command_index < len(sys.argv):
        arg = sys.argv[command_index]
        if not arg or arg[0] != '-':
            break
        command_index += 1
    args = sys.argv[command_index:]
    if not args or not find_command(args[0]):
        parser.print_help()
        sys.exit(1)
    options, _args = parser.parse_args(args=sys.argv[1:command_index])
    return options, args

def run():
    options, args = parse_options()
    command_args = args[1:]
    command_function = find_command(args[0])
    configuration = Configuration(configuration_file=options.config,
                                  host=options.host, database=options.database,
                                  user=options.user, password=options.password)
    messages = command_function(configuration, command_args)
    if messages:
        for m in messages:
            sys.stdout.write(m)

if __name__ == '__main__':
    run()
