#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2011-2018 OUI Technology Ltd.
# Copyright (C) 2018-2024 Tomáš Cerha <t.cerha@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# If you want to make comparisons against git repositories, you must install
# GitPython package (http://pythonhosted.org/GitPython/).  The package is
# installable e.g. via pip:
#   pip install GitPython


import collections
import optparse
import os
import re
import subprocess
import sys
import types

import pytis
import pytis.presentation
import pytis.util

output = sys.stdout


def error(message):
    sys.stderr.write(message + '\n')
    sys.exit(1)


def find_specification(spec_name):
    resolver = pytis.config.resolver
    try:
        spec = resolver.specification(spec_name)
    except pytis.util.ResolverError:
        error("Specification not found: %s\n" % (spec_name,))
    return spec


def specification_info(spec):
    info = {}
    info['fields'] = spec.view_spec().fields()
    info['actions'] = spec.view_spec().actions()
    info['layout'] = spec.view_spec().layout()
    return info

field_matcher = re.compile('^<Field: id="([^"]+)", (.*)>$')
address_matcher = re.compile(' at 0x[0-9a-f]+>')


def print_info(info):
    for f in info['fields']:
        formatted_field = unicode(f)
        m = field_matcher.match(formatted_field)
        if m is None:
            field_info = formatted_field
        else:
            field_info = ' Field %s: %s' % m.groups()
        field_info = address_matcher.sub('>', field_info)
        output.write(field_info + u'\n')

    def print_layout(layout, indent=0):
        indentation_string = ' ' * indent
        if isinstance(layout, pytis.presentation.GroupSpec):
            output.write('%s%s\n' % (indentation_string, layout.__class__.__name__,))
            for item in layout.items():
                print_layout(item, indent=indent + 1)
        elif isinstance(layout, basestring):
            output.write('%sLayout: %s\n' % (indentation_string, layout,))
        elif isinstance(layout, pytis.presentation.Text):
            output.write(u'%sText: %s\n' % (indentation_string, layout.text(),))
        elif isinstance(layout, pytis.presentation.Button):
            output.write(u'%sButton: %s\n' % (indentation_string, layout.label(),))
        else:
            output.write('%sUnknown layout object: %s\n' % (indentation_string, layout,))
    layout = info['layout']
    if isinstance(layout, pytis.presentation.LayoutSpec):
        layout = layout.group()
    print_layout(layout)

    def enabled_action(action):
        if isinstance(action, pytis.presentation.Action):
            enabled = action.enabled()
            if isinstance(enabled, collections.Callable):
                try:
                    enabled = enabled(None)
                except Exception:
                    enabled = True
        elif isinstance(action, pytis.presentation.ActionGroup):
            enabled = pytis.util.some(enabled_action, action.actions())
        elif isinstance(action, (list, tuple,)):
            enabled = pytis.util.some(enabled_action, action)
        else:
            enabled = True
        return enabled

    def print_action(action, indent=0):
        indentation_string = ' ' * indent
        if isinstance(action, pytis.presentation.Action):
            if enabled_action(action):
                output.write('%sAction: %s\n' % (indentation_string, action.id(),))
        elif isinstance(action, pytis.presentation.ActionGroup):
            if enabled_action(action):
                output.write('%sAction Group\n' % (indentation_string,))
                for a in action.actions():
                    print_action(a, indent=indent + 1)
        elif isinstance(action, (list, tuple,)):
            if enabled_action(action):
                output.write('%sAction Sequence\n' % (indentation_string,))
                for a in action:
                    print_action(a, indent=indent + 1)
        else:
            output.write('%sUnknown action object: %s\n' % (indentation_string, action,))
    actions = info['actions']
    if False:
        actions = list(actions)
        actions.sort(key=lambda a: a.id())
    for a in actions:
        print_action(a)


def info(spec_name):
    pos = spec_name.rfind('.')
    output.write('*** %s\n' % (spec_name[pos + 1:],))
    spec = find_specification(spec_name)
    info = specification_info(spec)
    print_info(info)


def module_info(module_name, regexp=None):
    try:
        module = pytis.util.load_module(module_name)
    except ImportError:
        error("Module not found: %s\n" % (module_name,))
    matcher = re.compile(regexp or '.')
    module_identifier = module_name.replace('/', '.')
    names = []
    for spec_attr in [o for o in dir(module)]:
        spec = getattr(module, spec_attr)
        if isinstance(spec, type) and issubclass(spec, pytis.form.Specification) and spec.public:
            spec_name = module_identifier + '.' + spec.__name__
            if matcher is not None and matcher.search(spec_name):
                names.append(spec_name)
        elif isinstance(spec, types.ModuleType):
            spec_name = spec.__name__
            if spec_name.startswith(module_name + '.'):
                module_info(spec_name, regexp)
    names.sort()
    for spec_name in names:
        info(spec_name)


def module_diff(directory, branch, module_name, regexp=None):
    global output
    import git
    if directory is None:
        for p in (os.getenv('PYTHONPATH') or '').split(':'):
            try:
                repo = git.Repo(p)
            except (git.InvalidGitRepositoryError, git.exc.NoSuchPathError):
                continue
            directory = repo.working_dir
            break
        else:
            error("No git directory found in PYTHONPATH, use --directory")
    else:
        repo = git.Repo(directory)
    temp_dir = pytis.util.TemporaryDirectory()
    work_tree = temp_dir.name()
    subprocess.call(['cp', '-a', repo.git_dir, work_tree])
    git_dir = os.path.join(work_tree, '.git')
    subprocess.call(['git', '--git-dir=%s' % (git_dir,), 'checkout', branch],
                    stdout=open('/dev/null', 'wb'))
    subprocess.call(['git', '--git-dir=%s' % (git_dir,), '--work-tree=%s' % (work_tree,),
                     'reset', '--hard'],
                    stdout=open('/dev/null', 'wb'))
    orig_dir = repo.working_dir
    if orig_dir[-1] != '/':
        orig_dir += '/'

    def info(file_):
        global output
        if os.fork():
            os.wait()
        else:
            output = open(file_.name, 'wb')
            module_info(module_name, regexp=regexp)
            output.close()
            sys.exit(0)
    file_1 = pytis.util.TemporaryFile()
    info(file_1)
    sys_path = sys.path

    def change_path(path):
        if path.startswith(orig_dir):
            path = work_tree + '/' + path[len(orig_dir):]
        return path
    file_2 = pytis.util.TemporaryFile()
    try:
        sys.path = [change_path(p) for p in sys_path]
        info(file_2)
    finally:
        sys.path = sys_path
    subprocess.call(['diff', '-u', file_1.name, file_2.name])

USAGE = """usage: %prog [ OPTIONS ] MODULE-NAME [ REGEXP ]"""


def parse_options():
    parser = optparse.OptionParser(usage=USAGE)
    parser.add_option("--config", dest="config_file",
                      help="pytis configuration file for database access (on upgrade)")
    parser.add_option("--diff", dest="diff",
                      help="show diff against given branch")
    parser.add_option("--directory", dest="directory",
                      help="application directory")
    options, args = parser.parse_args(args=sys.argv[1:])
    if len(args) < 1 or len(args) > 2:
        parser.print_help()
        sys.exit(1)
    return options, args


def run():
    options, args = parse_options()
    pytis.util.set_configuration_file(options.config_file)
    pytis.config.dblisten = False
    pytis.config.debug = False
    pytis.config.log_exclude = [pytis.util.OPERATIONAL, pytis.util.ACTION, pytis.util.EVENT,
                          pytis.util.DEBUG]
    # Set resolver search paths (they are not yet set in configuration when the
    # resolver is initially initialized.
    pytis.config.resolver = pytis.util.Resolver(search=pytis.config.search_modules)
    if options.diff:
        module_diff(options.directory, options.diff, *args)
    else:
        module_info(*args)

if __name__ == '__main__':
    run()
