(defun pytis-has-key ()
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "\\(\\<not +\\)?\\([.a-zA-Z0-9_]+\\)\\.has_key(" nil t)
    (let ((not (or (match-string 1) ""))
          (dict (match-string 2))
          (end (1- (match-end 0)))
          point)
      (goto-char end)
      (delete-region (match-beginning 0) end)
      (setq point (point))
      (forward-sexp)
      (delete-char -1)
      (insert " " not "in " dict)
      (goto-char point)
      (delete-char 1))))

(defun pytis-callable ()
  (interactive)
  (goto-char (point-min))
  (re-search-forward "^\\(import\\|from\\)")
  (forward-line 0)
  (insert "import collections\n")
  (let ((case-fold-search nil))
    (while (re-search-forward "\\<callable(" nil t)
      (forward-char -1)
      (delete-region (- (point) 8) (point))
      (insert "isinstance")
      (forward-sexp)
      (forward-char -1)
      (insert ", collections.Callable"))))

(defun pytis-reduce ()
  (interactive)
  (goto-char (point-min))
  (re-search-forward "^\\(import\\|from\\)")
  (forward-line 0)
  (insert "import functools\n")
  (let ((case-fold-search nil))
    (while (re-search-forward "\\<reduce(" nil t)
      (forward-word -1)
      (insert "functools.")
      (forward-word 2))))

;;;;

(defvar pytis-unstar-abbrevs
  '(("pytis.presentation" . "pp")
    ("pytis.form" . "pf")
    ("pytis.extensions" . "pe")
    ("pytis.data" . "pd")))

(defvar pytis-unstar-transforms
  '(("cfg_param" "pytis.extensions")
    ("dbfunction" "pytis.extensions")
    ("dbupdate" "pytis.extensions")
    ("row_update" "pytis.extensions" "dbupdate")
    ("dbupdate_many" "pytis.extensions")
    ("dbselect" "pytis.extensions")
    ("dbinsert" "pytis.extensions")
    ("data_object" "pytis.extensions")
    ("session_date" "pytis.extensions")
    ("session_date_value" "pytis.extensions")
    ("get_value" "pytis.extensions")
    ("rp_handler" "pytis.extensions")
    ("enum(" "pytis.extensions")
    ("DBConfig" "pytis.extensions")
    ("Color" "pytis.presentation")
    ("FieldStyle" "pytis.presentation" "Style")
    ("Specification" "pytis.presentation")
    ("LayoutSpec" "pytis.presentation")
    ("AccessRights" "pytis.data")
    ("Permission" "pytis.data")
    ("Time" "pytis.data")
    ("is_in_groups" "pytis.data")
    ("PostgreSQLUserGroups" "pytis.data")
    ("DBCounterDefault" "pytis.data")
    ("Field" "pytis.presentation")
    ("Fields" "pytis.presentation")
    ("CodebookSpec" "pytis.presentation")
    ("UPCASE" "pytis.extensions")
    ("ASC" "pytis.data" "ASCENDENT")
    ("DESC" "pytis.data" "DESCENDANT")
    ("Filter" "pytis.presentation")
    ("TextFilter" "pytis.presentation")
    ("Condition" "pytis.presentation" "Filter")
    ("computer" "pytis.presentation")
    ("Editable" "pytis.presentation")
    ("NEVER" "pytis.presentation" "Editable.NEVER")
    ("ONCE" "pytis.presentation" "Editable.ONCE")
    ("ALWAYS" "pytis.presentation" "Editable.ALWAYS")
    ("ALPHA" "pytis.extensions")
    ("ALPHANUMERIC" "pytis.extensions")
    ("NUMERIC" "pytis.extensions")
    ("FLOAT" "pytis.extensions")
    ("ASCII" "pytis.extensions")
    ("BROWSE_FORM" "pytis.extensions")
    ("INSERT_FORM" "pytis.extensions")
    ("nextval" "pytis.extensions")
    ("printdirect" "pytis.extensions")
    ("format_value" "pytis.extensions")
    ("send_mail" "pytis.extensions")
    ("smssend" "pytis.extensions")
    ("cache_spec" "pytis.extensions")
    ("pytis_config_reader" "pytis.extensions")
    ("pytis_config_writer" "pytis.extensions")
    ("constraints_email" "pytis.extensions")
    ("constraints_email_many" "pytis.extensions")
    ("Price" "pytis.extensions")
    ("CbComputer" "pytis.presentation")
    ("DefaultSkin" "defs.util")
    ("DefaultSpec" "defs.util")
    ("DefaultSpecPc" "defs.util")
    ("DefaultSpecTSheet" "defs.util")
    ("DefaultSpecUcto" "defs.util")
    ("DefaultSpecUkoly" "defs.util")
    ("vykaz_stredisko" "defs.util")
    ("vykazove_stredisko_value" "defs.util")
    ("get_kurz" "defs.util")
    ("pracovnik(" "defs.util")
    ("pracovnik_value" "defs.util")
    ("pracovnik_jmeno" "defs.util")
    ("constraint_isdigit" "defs.util")
    ("constraint_telefon" "defs.util")
    ("constraint_text_strip" "defs.util")
    ("constraints_cesta_samba" "defs.util")
    ("constraints_tel_cislo" "defs.util")
    ("set_row_field" "defs.util")
    ("DefaultCbSpec" "defs.util")
    ("html_table" "defs.util")
    ("strip_accents" "defs.util")
    ("cfg_system" "defs.util")
    ("cfg_user" "defs.util")
    ("read_pin" "defs.util")
    ("money_zero" "defs.util")
    ("set_prow" "defs.util")
    ("NULL_VAL" "defs.util")
    ("NULL_DATE" "defs.util")
    ("NULL_VAL_DATE" "defs.util")
    ("TRUE_VAL" "defs.util")
    ("FALSE_VAL" "defs.util")
    ("MB" "defs.util")
    ("DF_VALIDITI_CONDITION" "defs.util")
    ("DF_VC_PRACOVNIK" "defs.util")
    ("DMP_SPRAVCE" "defs.util")
    ("PROTOKOL_SMB" "defs.util")
    ("KOD_PRITOMEN" "defs.util")
    ("TYP_CINNOST_PRACOVNI" "defs.util")
    ("SOL_SCHEMA" "defs.util")
    ("RM_VAL" "defs.util")
    ("ZAOKROUHLENI_KORKCE_DPH" "defs.util")
    ("Binding" "pytis.presentation")
    ("BindingSpec" "pytis.presentation")
    ("PostProcess" "pytis.presentation")
    ("SelectionType" "pytis.presentation")
    ("Orientation" "pytis.presentation")
    ("Computer" "pytis.presentation")
    ("Action" "pytis.presentation")
    ("ActionContext" "pytis.presentation")
    ("Text" "pytis.presentation")
    ("has_access" "pytis.form")
    ("new_record" "pytis.form")
    ("run_cb" "pytis.extensions")
    ("run_dialog" "pytis.form")
    ("run_procedure" "pytis.form")
    ("delete_record_question" "pytis.form")
    ("InputDate" "pytis.form")
    ("InputNumeric" "pytis.form")
    ("InputDialog" "pytis.form")
    ("FileDialog" "pytis.form")
    ("ProgressDialog" "pytis.form")
    ("Message" "pytis.form")
    ("Question" "pytis.form")
    ("MultiQuestion" "pytis.form")
    ("Error" "pytis.form")
    ("InfoWindow" "pytis.form")
    ("PopupEditForm" "pytis.form")
    ("BrowseDualForm" "pytis.form")
    ("MultiBrowseDualForm" "pytis.form")
    ("DescriptiveDualForm" "pytis.form")
    ("CodebookForm" "pytis.form")
    ("BrowseForm" "pytis.form")
    ("BrowsableShowForm" "pytis.form")
    ("ShowForm" "pytis.form")
    ("run_form" "pytis.form")
    ("current_form" "pytis.form")
    ("db_operation" "pytis.form")
    ("message(" "pytis.form")
    ("refresh" "pytis.form")
    ("set_status" "pytis.form")
    ("pracovnik(" "defs.util")
    ("Link" "pytis.presentation")
    ("HGroup" "pytis.presentation")
    ("LHGroup" "pytis.presentation")
    ("VGroup" "pytis.presentation")
    ("LVGroup" "pytis.presentation")
    ("TabGroup" "pytis.presentation")
    ("ActionGroup" "pytis.presentation")
    ("Button" "pytis.presentation")
    ("TextFormat" "pytis.presentation")
    ("zfill" "string")
    ("LOWER" "pytis.presentation" "PostProcess.LOWER")
    ("UPPER" "pytis.presentation" "PostProcess.UPPER")
    ))

(defun pytis-unstar ()
  (interactive)
  (let ((regexp (concat "[^._]\\<\\("
                        (mapconcat #'(lambda (x) (regexp-quote (car x)))
                                   pytis-unstar-transforms
                                   "\\|")
                        "\\)\\>[^= ]"))
        (modules '())
        (uses '())
        (case-fold-search nil))
    (goto-char (point-min))
    (while (re-search-forward regexp nil t)
      (let ((answer nil))
        ;; (while (not (member (setq answer (read-char "Replace? ")) '(?y ?n ?\ )))
        ;;   nil)
        (unless (eql answer ?n)
          (let* ((string (match-string 1))
                 (module-info (cdr (assoc string pytis-unstar-transforms)))
                 (module (car module-info))
                 (replacement (cadr module-info))
                 (module-specifier (or (cdr (assoc module pytis-unstar-abbrevs)) module)))
            (add-to-list 'modules module)
            (save-excursion
              (when replacement
                (replace-match replacement t t nil 1))
              (goto-char (match-beginning 1))
              (insert module-specifier "."))))
        (goto-char (match-end 1))))
    (goto-char (point-min))
    (search-forward "import" nil t)
    (beginning-of-line 3)
    (setq modules (sort modules 'string<))
    (while modules
      (let* ((module (car modules))
             (abbrev (cdr (assoc module pytis-unstar-abbrevs))))
        (insert "import " module)
        (when abbrev
          (insert " as " abbrev))
        (insert "\n"))
      (setq modules (cdr modules)))
    (insert "\n")))

(defun pytis-class-types ()
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "type=\\(p[de]\\|wiking\\)\\.[A-Za-z]+(" nil t)
    (backward-char)
    (let ((beg (point)))
      (forward-sexp)
      (delete-backward-char 1)
      (goto-char beg)
      (delete-char 1)
      (unless (member (char-after) '(?, ?\)))
        (insert ", ")))))

(defun pytis-pyflakes ()
  (interactive)
  (compile (concat "pyflakes " (buffer-file-name))))
