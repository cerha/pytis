2007-04-05  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/access.py (DBAccessRights): New class.
	(AccessRights.permitted_groups): Consider implicit rights.

2007-04-04  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py (BrowseForm): New constructor argument `columns'.

2007-04-03  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py (EditForm): Announce the meaning of the
	asterisk sign.
	(BrowseForm._export_cell): Transformed into `_export_value'.  Use
	`display' for codebook fields.

2007-04-02  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py: Added hack to support localization of
	validation message arguments.  Display the asterisk for not-null
	fields by the label, not by the field.

2007-03-28  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/list.py: Handle the argument `enabled' of `Link'
	specification.

	* pytis/presentation/spec.py: New argument `enabled' for `Link'
	specification.

	* pytis/form/application.py: New argument `enabled' for command
	`Application.COMMAND_NOTHING'.

2007-03-17  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/types_.py (RegexString): New class.
	(Identifier): Class removed.
	(Color): Derive from `RegexString'.

	* pytis/web/form.py: Validation messages updated.  Added support
	for non-table layout, labeled fieldsets, showing not-null sign and
	showing field help.  Fixed table cell export.

2007-03-16  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: If none of the view subobjects can be
	used for locking, don't lock the view.

	* pytis/data/_test.py (DBDataDefault.test_lock_view): See above.

2007-03-15  Pavel Hanak  <hanak@asellus.cz>

	* pytis/form/form.py: 
	(RecordForm): Do not pass argument `transaction' to the methods of
	self._data, if `self._transaction' is None. Thus we can avoid
	passing this argument to the methods of classes other than
	DBDataPostgreSQL (e.g. RestrictedMemData).

2007-03-15  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py: Added new validation messages.  Added support
	for password validation and hiding.

2007-03-14  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/form.py (LookupForm._unpack_condition): Make
	additional assertions to verify condition validity.

2007-03-13  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: Be more cautious about views when
	retrieving INSERT results.

	* pytis/data/dbdata.py (DBInsertException): See above.
	
	* pytis/data/_test.py (DBDataDefault): See above.

2007-03-13  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: Build SQL locking commands only on
	demand.

2007-03-08  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/evaction.py (_evparse): Don't handle all identifiers
	starting with `f' or `t' as booleans.

2007-03-08  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py: Use LCG's generator instead of the `_html'
	module.

	* pytis/web/dialog.py: Use LCG's generator instead of the `_html'
	module.

2007-03-06  Milan Zamazal  <pdm@brailcom.org>

	* pytis/form/form.py (PopupForm.run): Ignore errors on the commit
	call.

2007-03-05  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/spec.py Refuse stored conditions, which are
	not displayable in the search/filtering dialog.

2007-03-01  Milan Zamazal  <pdm@brailcom.org>

	* pytis/form/form.py (RecordForm._lock_record.dbop): Don't run
	locking quietly.

2007-03-01  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py: Added support for displaying image thumbnails.

	* pytis/presentation/_test.py New tests.

	* pytis/presentation/field.py (PresentedRow.get): New method.

	* pytis/presentation/spec.py (FieldSpec.__init__): New argument
	`thumbnail'.

	* pytis/data/types_.py (Binary.Buffer.path): New method.

2007-03-01  Pavel Hanak  <hanak@asellus.cz>

	* pytis/data/postgresql.py (DBPostgreSQLFunction.call):
	Nový argument `transaction' a jeho zohlednìní.

2007-02-28  Milan Zamazal  <pdm@brailcom.org>

	* pytis/form/form.py (PopupForm.run): New argument `transaction'.

2007-02-23  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/_test.py: Ensure user transaction is finished (if
	possible) before test_partial_transaction is exited.
	
2007-02-23  Tomas Cerha  <cerha@brailcom.org>

	* pytis/web/form.py: Added basic support for Binary data types.

	* pytis/form/inputfield.py: Respect the change in `Binary.Buffer'
	constructor.

	* pytis/data/types_.py: Added support for passing an open file to
	`Binary.Buffer' constructor, as well as passing the original file
	name and MIME type.

2007-02-22  Milan Zamazal  <pdm@brailcom.org>

	* lib/pytis/form/form.py: Updated for new locking mechanism.
	
	* lib/pytis/form/_grid.py: See above.
	
	* lib/pytis/form/list.py: See above.

2007-02-21  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: Support for partial transaction
	rollbacks.
	
	* pytis/data/_test.py: See above.

2007-02-21  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/data.py: pytis.data.Data.*lock*_row removed.
	
	* pytis/data/dbdata.py: See above.
	
	* pytis/data/_test.py: See above.

2007-02-20  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: Support for user transaction and
	PostgreSQL locking.
	
	* pytis/data/dbdata.py: See above.

	* pytis/data/dbapi.py: See above.  Don't close connections on
	exceptions.
	
	* pytis/data/pgsql.py: See above.

	* pytis/data/_test.py: Locking test enabled and updated.  User
	transaction tests added.

	* pytis/data/access.py: **kwargs added to several methods.
	
2007-02-21  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/screen.py: Use `Shift' in shortcut key definitions
	even for letters.  Don't wait with keymap initialization until the
	commands are initialized.

	* pytis/form/dualform.py: Fixed `DescriptiveDualForm' side
	selection to work also with side form fields not present in main
	form row (such as big binary fields).

	* pytis/form/search.py: Improved button label.

2007-02-20  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/list.py: Fixed column selection popup menu outside
	the table.

	* pytis/form/application.py: Set application window icons at startup.

	* pytis/form/commands_.py: New icon assignments.

2007-02-19  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/access.py: Avoid the missleading usage of `accessible'
	in the context of permissions.

	* pytis/form/list.py, pytis/form/form.py: Respect the above
	changes.

	* pytis/util/configuration.py: Disabled background color default
	value made a little lighter.  The option
	`field_inaccessible_color' renamed to `field_denied_color'

	* pytis/form/inputfield.py: Fixed nasty background setting which
	caused invisible selection in some GTK themes.  Avoid the
	missleading usage of `accessible' in the context of permissions.

	* pytis/form/search.py: Wording unified.

	* pytis/form/form.py: Save conditions in a custom format
	consisting just of basic python types.  

2007-02-17  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py: PostgreSQL command template mechanism
	improved.  Support of multicolumn keys destroyed.

	* pytis/data/_test.py: See above.

2007-02-16  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/dualform.py: Deny filter menu in
	DescriptiveDualForm's sideform.

	* pytis/form/application.py: Log errors while closing application.

	* pytis/data/types_.py: Only import Pyro in remote mode.

	* pytis/form/search.py: Minor fix.

	* pytis/form/screen.py: Find out the command icom by command and
	arguments.

	* pytis/form/command.py: Added support to find an icon according
	to a command and its arguments.

	* pytis/form/commands_.py: Aded new command icons.  New shortcut
	for invoking last filter.

	* pytis/form/form.py: Added support for finding out the list of
	filtered columns.  Show filter menu in the titlebar.

	* pytis/form/list.py: Indicate filtered columns by a small funnel
	sign at column heading.

2007-02-15  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/application.py: Only pickle saved/loaded params when
	needed.

	* pytis/form/inputfield.py: Make the image button enabled even if
	the field is disabled.  Allow load a nd reset only for an enabled
	field.
	
	* pytis/data/data.py: Fixed 'NW' operator creation.

	* pytis/data/postgresql.py
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql): Added
	explicit support for 'NW' operator.

	* pytis/presentation/spec.py: New class for specification of named
	conditions and a new option to pass them to ViewSpec.

	* pytis/form/form.py: Added support for loading and saving user
	defined named conditions as well as named conditions defined in
	the specification.
	Added support for persistent state params, which don't get
	reloaded by RESET_FORM_STATE/RELOAD_FORM_STATE commands.  Saved
	conditions marked as persistent.

	* pytis/form/search.py: Added support for manipulation of named
	conditions.  Added type compatibility check for column comparisons.

2007-02-14  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/field.py: Fixed prefill bug.

	* pytis/data/postgresql.py: Fixed "IS NOT NULL" operator conversion.

	* pytis/form/list.py: Added support for SFS dialog default column
	selection.
	
	* pytis/form/form.py: Added support for SFS dialog default column
	selection.  Transform sorting spec for passing it to and from the
	sorting dialog.

	* pytis/form/search.py: Heavilly refactored.  Added default column
	selection.  Use data sorting constants instead of form sorting
	constants on input and output.  Focus the value entry field.
	Enlarge choice widgets.

2007-02-13  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/data.py (MemData._condition2pyfunc): Added support
	for `LT'.  Added support for `ignote_case'.  Added support for
	comparing two columns.  Use operator's translation if it is not
	supported directly.
	(NE, NW, LE, GT, GE): Always create the `Operator' instance.  Pass
	the transformation to primitive operators as `translation' to
	the operator constructor.
	(OR, AND): Cosmetic changes.

	* pytis/data/_test.py (MemData.setUp, MemData._check_condition):
	New metohds.
	(MemData.test_conditions, MemData.test_fetch): New tests.
	(DBDataDefault.test_select_condition): Test also comparing column
	to column.

	* pytis/form/search.py (SFSColumn.label): Neq argument `default'
	(SFDialog._NO_COLUMN): Label set to None.
	(SFDialog._create_content): Added support for selecting the type
	of the second operator -- value or column.
	(SFDialog._selected_condition, SFDialog._on_selection_change)
	(SFDialog._on_clear, SFDialog._on_suck): Expect the new control
	for second arg selection in `self._controls'.
	(SFDialog._selected_condition): Support second argument selection.
	(SFDialog._on_selection_change): Disable value controls when the
	second argument is a column.
	(SFDialog._RELATIONAL_OPERATORS_MAP)
	(SFDialog._LOGICAL_OPERATORS_MAP): New constants.
	(SFDialog._create_content.decompose_condition): Removed functions
	for operator analysis.  Rely on all operators to be expressed by
	their own `Operator' instance.  Use `self._RELATIONAL_OPERATORS_MAP'
	and `self._LOGICAL_OPERATORS_MAP' to recognize them.
	(SFDialog.__init__): New argument `col'.
	(SFDialog._create_content.create_controls): Consider also
	`WMValue' instances as the second operator.
	(SFDialog._create_content): Recover gracefuly if the condition can
	not be decomposed.

	* pytis/data/dbdata.py (DBBinding.__init__)
	(DBColumnBinding.__init__): Assert against `str', not
	`types.StringType'.

	* pytis/data/postgresql.py
	(PostgreSQLStandardBindingHandler._pdbb_btabcol): Don't consider
	multicolumn bindings and return always just a string, not a
	sequence.
	(PostgreSQLStandardBindingHandler._pdbb_get_table_type):
	Cosmetical change.
	(PostgreSQLStandardBindingHandler._pdbb_sql_column_list)
	(PostgreSQLStandardBindingHandler._pdbb_create_sql_commands)
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql.relop)
	(PostgreSQLStandardBindingHandler._pdbb_sort2sql.item2sql): Expect
	just one columns from `self._pdbb_get_table_type()'
	(PostgreSQLStandardBindingHandler._pdbb_table_row_lists): Don't
	consider multicolumn bindings.
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql.relop):
	Allow the second operand to be another column identifier, not only
	a Value instance.
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql): Removed
	the commented-out region dealing with
	`pytis.data.xtypes.Codebook'.
	(DBDataPostgreSQL._pg_value): Don't unpack sequences
	automatically, work just with atomic values.
	(DBDataPostgreSQL.row): Call `_pg_value()' on each item of `key'.
	(DBPostgreSQLFunction.call): Call `_pg_value()' on each item of
	`row'.
	(PostgreSQLStandardBindingHandler._pg_insert): Cosmetic change.
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql): Added
	support for all known operators without translation to primitive
	operators.

2007-02-12  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/_test.py (PresentedRow_.setUp): Added new
	virtual column with default value.
	(PresentedRow_._check_values): New method.
	(PresentedRow_.test_init, PresentedRow_.test_prefill)
	(PresentedRow_.test_computer)
	(PresentedRow_.test_callback): Use it.
	(PresentedRow_.test_prefill_computer): New method.

	* pytis/presentation/field.py (PresentedRow.__init__): Updated
	docstring.  Compute default values of all virtual columns.
	Normalize 'prefill' here.
	(PresentedRow._init_row): Don't normalize 'prefill' here.
	(PresentedRow._init_row.genval): Function removed.
	(PresentedRow._default): New method.
	(PresentedRow._init_row): Use it instead of 'genval()'.
	(PresentedRow.__getitem__): Expect `self._virtual' to contain all
	virtual columns.
	(PresentedRow.__init__): Init virtual columns before the row.
	(PresentedRow._init_row): Don't mark all computed fields dirty
	when the row is None.

	* pytis/presentation/spec.py (FieldSpec.__init__): Allow the
	'default' to be directly the internal value, not just a callable
	object.

2007-02-09  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/search.py: Completely rewritten...

	* pytis/form/list.py (ListForm.current_field): Method removed.
	(ListForm._filter): -> `_filter_refresh'.

	* pytis/form/form.py (RecordForm.current_field): Method removed.
	(LookupForm._init_attributes): Load `self._lf_search_condition'
	and `self._lf_last_filter' from saved cofig.  Attributes
	`self._lf_search_dialog' and `self._lf_filter_dialog' removed.
	(LookupForm._cleanup): Method removed.
	(LookupForm._lf_sf_dialog): Method removed.
	(LookupForm._cmd_search): Use the new `SearchDialog' interface.
	(LookupForm._is_searching, LookupForm._can_search_next)
	(LookupForm._can_search_previous): Methods removed.
	(LookupForm._filter): New argument `condition'.  Just setup the
	attributes here and call `self._filter_refresh' to perform the
	filter.
	(LookupForm._filter_refresh): New method.
	(LookupForm._cmd_filter): Removed argument `show_dialog'.  New
	argument `condition'.  Use the new `FilterDialog' interface.
	(LookupForm._cmd_unfilter): Just call `self._filter(None)'.
	(LookupForm._cmd_filter_by_value): Don't operate on the dialog
	here, just update the current filter condition.
	(LookupForm._cmd_sort): Pass just the class and constructur
	argument to `run_dialog()'.
	(EditForm._validate_fields): Don't log the value.

	* pytis/form/commands_.py (DEFAULT_KEYMAP): Filtering remapped to
	`Ctrl-f' (`Ctrl-F4' kept for backwards compatibility).

	* pytis/form/dialog.py (GenericDialog._finish_dialog): Method
	removed.
	(GenericDialog._end_modal): Don't call it.

	* pytis/presentation/field.py (_display_func.getval): Compare the
	value to `None', not just its value in the boolean context.

	* pytis/form/inputfield.py (FileField._enable,
	FileField._disable): Methods removed.
	(FileField.set_value): New method.
	

2007-02-08  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/list.py (ListForm._displayed_columns_menu): Take
	`self._select_columns()' into account.
	(ListForm._lf_sfs_columns): Use `self._fields' instead of
	`self._view.fields()'.

	* pytis/form/inputfield.py (InputField.set_value): Don't log.
	(InputField.reset): Don't log.

	* pytis/data/postgresql.py
	(PostgreSQLStandardBindingHandler._pdbb_condition2sql.relop):
	Check `rel', not `relop' for binary operator restrictions.

	* pytis/data/data.py (MemData._restrict_row_columns): New method.
	(MemData.row, MemData.select): New argument `columns'.

	* pytis/form/configui.py (_ConfigData.select): New keyword
	argument `columns'

	* pytis/data/types_.py (_Value.__setstate__): Don't call
	`self._init()' here.
	(Value.__setstate__): New method.  Call `self._init()' here.
	(Type.validate): Docstring rewritten.
	(Limited.VM_MAXLEN_EXCEEDED): -> `VM_MAXLEN'.
	(Limited._VM_MAXLEN_EXCEEDED_MSG): -> `_VM_MAXLEN_MSG'.
	(Limited._check_maxlen): `VM_MAXLEN_EXCEEDED' -> `VM_MAXLEN'.
	(String._VM_MAXLEN_EXCEEDED_MSG): -> `_VM_MAXLEN_MSG'.
	(Binary._VM_MAXLEN_EXCEEDED_MSG): -> `_VM_MAXLEN_MSG'.
	(Image): Docstring updated.
	(Image.VM_MAXSIZE, Image._VM_MAXSIZE_MSG, Image._VM_MINSIZE_MSG)
	(Image.VM_FORMAT, Image._VM_FORMAT_MSG, Image.VM_MINSIZE): New
	constants.
	(Buffer.FORMATS): Constant removed.
	(Image.Buffer._validate): Don't validate against `self.FORMATS'.
	(Image.__init__): New method.
	(Image.__cmp__, Image.formats, Image.minsize, Image.maxsize)
	(Image._check_constraints): New methods.

2007-02-07  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/form.py (LookupForm._search): Report the warning in
	the statusline instead of popping up a dialog.

	* pytis/data/_test.py (DBDataDefault.test_binary): Fixed for the
	new Binary interface.

2007-02-04  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/form.py (PopupForm._on_frame_close): Syntax error fixed.

	* pytis/util/util.py (format_byte_size): New function.
	
	* pytis/data/types_.py (format_byte_size): Method removed.
	(Binary._format_maxlen): `Binary.format_byte_size()' ->
	`format_byte_size()'.

	* pytis/form/inputfield.py (FileField._on_set_value):
	`Binary.format_byte_size()' -> `format_byte_size()'

2007-02-02  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/inputfield.py (FileField._INVOKE_TITLE): Text fixed.
	(FileField.get_value): Convert the `Buffer' instance to its
	`buffer'.
	(FileField._set_value): Convert a `buffer' to a `Buffer' instance.
	(_formatted_size): Method removed.
	(_save_file): Method removed.
	(FileField._cmd_load): Use `Buffer' methods to load the file.  Let
	the validation to the `Buffer' class and just catch the exceptions
	here.
	(FileField._cmd_save): Use `Buffer.save()' instead of
	`self._save_file'.
	(ImageField._bitmap): Create the thumbnail here using the
	`PIL.Image' method instead of using `Image.thumbnail()'.
	(ImageField._cmd_view): Use `PIL.Image' methods instead of using
	`Image.format()'.
	(ImageField._cmd_view): Use `Buffer.save()' instead of
	`self._save_file'.  Don't invoke forgotten `ls -l' here.

	* pytis/form/form.py (RecordForm._find_row_by_key): Don't expect
	`key' to be `None'.  Don't convert it to a tuple.
	(RecordForm.select_row): Convert the key to a tuple before calling
	`_find_row_by_key'.  Pass `columns' to `data.row()'.
	(PopupForm._on_frame_close): Test whether `self' is alive.

	* pytis/data/types_.py (Binary): Docstring updated.
	(Binary.Buffer): New class.
	(Binary._validate): Wrap the `buffer' into a `Buffer' instance.
	(Binary._export): Turn a `Buffer' instance into a `buffer'.
	(Binary.format_byte_size): New method.
	(Binary._format_maxlen): Use it.
	(Image): Docstring updated.
	(Image._image, Image.thumbnail, Image.format): Methods removed.
	(Image._SUPPORTED_FORMATS): Costant removed.
	(Image.Buffer): New class.

2007-01-31  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/types_.py (Limited._format_maxlen): New method.
	(Limited._check_maxlen): Use it.
	(Binary._format_maxlen): New method.
	(Binary._VM_MAXLEN_EXCEEDED_MSG): Don't presume units here.

2007-01-31  Pavel Hanak  <hanak@asellus.cz>

	* pytis/form/list.py (ListForm._can_edit): Added forgotten `return'. 

2007-01-31  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/types_.py (Limited): New class.
	(String): Derive from `Limited'.
	(String.VM_STRING_TOO_LONG, String._VM_STRING_TOO_LONG_MSG):
	Constants removed. 
	(String.__init__, String.__cmp__, String.maxlen)
	(String._check_constraints, String._check_maxlen): Methods removed.
	(String._VM_MAXLEN_EXCEEDED_MSG): New constant.
	(Binary): Derive from `Limited'.
	(Binary._VM_MAXLEN_EXCEEDED_MSG): New constant.
	(Image): Derive also from `Big'.

	* pytis/form/form.py (RecordForm._find_row_by_values.find_row):
	Pass `columns' to `data.select()'.
	(LookupForm._select_columns): New method.
	(LookupForm._init_select): Pass `columns' to `data.select()'.

	* pytis/form/list.py (ListForm._select_columns): New method.

	* pytis/form/application.py (Application.OnInit): Use
	`has_access', not `self._can_run_form' to test spec validity.
	(Application._can_run_form): Don't care about dual forms here.
	Ignore resolver errors here.
	(Application._can_new_record): Ignore resolver errors here.
	(has_access): If the name is a dual spec name containing `::',
	split it and check the perms of both parts.  Don't ignore resover
	errors here.
	(has_access): Docstring updated.

	* pytis/util/util.py (Pipe.read): Pass `size' to `lfunction' as a
	keyword argument.

2007-01-26  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/types_.py (Big, Large): New types.
	(_Value.__unicode__): Don't insert big values.

2007-01-26  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/screen.py (Module): Added assert to require a
	fallback label for non-system icons.

	* pytis/form/form.py (TitledForm._create_title_bar): Pass also
	label to "Show description" button.

2007-01-25  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/search.py (SFSDialog._create_button): Use
	`wx_button()'.
	(SFSDialog._FIELD_HEIGHT): Set to 26.

	* pytis/form/inputfield.py (Invocable._create_button)
	(ImageField._create_ctrl): Use `wx_button()'.

	* pytis/form/screen.py (get_icon): New arguments `type' and `size'.
	(wx_button): New method.

	* pytis/util/resolver.py (Resolver._call_spec): Method removed.
	(Resolver._get_spec): Don't use `_call_spec'.
	
	* pytis/form/list.py (BrowseForm._PrintResolver._Spec.__init__):
	New constructor.
	(BrowseForm._PrintResolver._Spec.body)
	(BrowseForm._PrintResolver._Spec.doc_header)
	(BrowseForm._PrintResolver._Spec.doc_footer)
	(BrowseForm._PrintResolver._Spec.coding): Make the `resolver'
	argument optional.
	(BrowseForm._PrintResolver._Spec.body): Use `self._resolver'
	instead the one given by the argument.
	(BrowseForm._PrintResolver._get_module): Pass `self' to
	`BrowseForm._PrintResolver._Spec' constructor.
	(BrowseForm._PrintResolver._get_instance): New method.
	(BrowseForm._cmd_print): Consider also None as valid `print_spec'
	value since this is returned by the new `Specification' class.

	* pytis/form/form.py (EditForm._on_field_edit): Don't operate on
	`self._row' if it is None.
	(TitledForm._on_show_description): Add a heading to the
	description text.
	(TitledForm._create_title_bar): Use `wx_button()'.  Don't use the
	description as button tooltip string.  Always create the
	description button, but disable it when no description is
	available...

2007-01-24  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/dualform.py (_create_view_spec): Don't consider the
	`DualSpec' case.
	(DualForm.title): Return the `BindingSpec' title.
	(help_name): Method removed.
	(SideBrowseDualForm.title): Method removed.
	(SideBrowseDualForm._create_side_form): Don't pass `title' and
	`side_columns'.  Use `self._main_name' and `self._side_name'.
	(BrowseDualForm): Docstring updated.
	(BrowseDualForm._create_main_form): Use `self._main_name'.
	(BrowseDualForm._set_main_form_callbacks): Don't set
	`BrowseForm.CALL_NEW_RECORD'.
	(BrowseDualForm._new_record_hook): Method removed.
	(ShowDualForm._create_main_form)
	(BrowseShowDualForm._create_side_form): Use `self._main_name' and
	`self._side_name'.
	(DescriptiveDualForm.title): New method.

	* pytis/form/application.py (Application._can_run_form): Don't
	consider the `DualSpec' case.

	* pytis/form/form.py (Form._cmd_help): Don't use `help_name()'.
	(Form.help_name): Method removed.
	(RecordForm.CALL_NEW_RECORD): Constant removed.

	* pytis/form/list.py (SideBrowseForm._init_attributes): Removed
	argument `title'.
	(title): Method removed.

	* pytis/presentation/spec.py (BindingSpec.__init__): Docstring updated.
	(DualSpec): Class removed.

2007-01-23  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/types_.py (Image): New class.

	* pytis/form/commands_.py (Module): New command
	`ImageField.COMMAND_VIEW'.

	* pytis/form/inputfield.py (InputField.create): Use `ImageField'
	for the `Image' type.
	(InputField._px_size): Argument `ctrl' removed.
	(TextField._create_ctrl): Pass size to the `wx.TextCtrl'
	constructor instead of calling `SetSize()' and `SetMinSize()'.
	(Invocable._create_widget): Don't pass height to
	`_create_button()'.
	(Invocable._button_size): New method.
	(Invocable._create_button, ColorSelectionField._create_button):
	Use it.
	(CodebookField._create_widget): Pass size to the `wx.TextCtrl'
	constructor instead of calling `SetSize()'.
	(CodebookField._create_widget): Don't pass `height' to
	`_create_button()'.
	(FileField._create_ctrl): Pass size to the `wx.TextCtrl'
	constructor instead of calling `SetSize()' and `SetMinSize()'.
	(FileField._button_size): New method.
	(FileField._set_value): Don't set the displayed text, jus call
	`_on_set_value()' here.
	(FileField._on_set_value): New method.
	(FileField._formatted_size): New method.
	(FileField._save_file): New method.
	(FileField._cmd_save): Use it.
	(ImageField): New class.
	(FileField._cmd_load): Validate the file immediately and ignore it
	if not valid.

	* pytis/form/screen.py (get_icon): Use `wx.BitmapFromImage()'
	instead of `wx.Image.ConvertToBitmap()'.

	* pytis/util/configuration.py
	(Configuration._Option_image_viewer): New option.

2007-01-22  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/spec.py (ViewSpec.__init__): Allow a sequence
	of functions as `check'.  Convert a single function to a one-item
	tuple.
	(ViewSpec.check): Docstring updated.

	* pytis/form/form.py (RecordForm._check_record): Process `check'
	as a sequence of functions.

2007-01-19  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/list.py (ListForm._can_edit): New method.

	* pytis/data/access.py (RestrictedMemData): Added docstring.
	Inheritance order swapped.
	(RestrictedMemData.__init__): Use super.  Pass all arguments as
	keywords to parent constructor.

	* pytis/form/inputfield.py (Invocable._create_button):
	Generalized.  New arguments `label', `icon', `width'.  Don't set
	the tooltip here.
	(Invocable._create_widget): Pass the new arguments to
	`_create_button'.
	(ColorSelectionField._create_button): Accept the new arguemnts.
	(CodebookField._create_widget): Use `_create_button' also for
	creating the codebook insert button.
	(FileField._last_save_dir, FileField._last_load_dir): New
	constants.
	(FileField._set_value): Improved file size formatting.
	(FileField._cmd_load, FileField._cmd_save): Set and save the
	default directory.

2007-01-18  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/data.py (MemData.__init__): Accept and propagate
	kwargs.

2007-01-18  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/inputfield.py
	(GenericCodebookField._run_codebook_form): Expect `False' as a
	possible `run_form()' return value.

	* pytis/web/form.py (LayoutForm._export_field): Unset `name' for
	disabled fields.

	* pytis/form/configui.py (_ConfigData.__init__): Use `super()' to
	call the parent constructor.

2007-01-17  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py (PostgreSQLConnector._pg_query):
	Logging locking simplified.

2007-01-17  Milan Zamazal  <pdm@brailcom.org>
	
	* pytis/data: Use new locking functions.
	
	* pytis/output/formatter.py (LoutFormatter._lout): Use new locking
	functions.

	* pytis/util/util.py (with_lock, with_locks): New functions.

2007-01-16  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/postgresql.py (PostgreSQLConnector._pg_query): When
	calling the logging command, avoid duplicate locking resulting in
	deadlock.

2007-01-16  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/inputfield.py (InputField._on_set_focus): Only
	validate the previous field if it is from the same form.
	(Invocable._INVOKE_TITLE, Invocable._INVOKE_HELP)
	(Invocable._INVOKE_ICON): New constants.
	(Invocable._INVOKE_SELECTION_MENU_HELP)
	(Invocable._INVOKE_SELECTION_MENU_TITLE): Constants removed.
	(_call_next_method): Method removed.
	(Invocable._create_widget): Use `super()' instead of
	`_call_next_method()'.
	(Invocable._create_widget): `_INVOKE_SELECTION_MENU_TITLE' ->
	`_INVOKE_TITLE'.
	(Invocable._create_button): Use `wx.BitmapButton' when
	`self._INVOKE_ICON' is defined.
	(Invocable._disable, Invocable._enable): Use `super()' instead of
	`_call_next_method()'.
	(Invocable._menu): `_INVOKE_SELECTION_MENU_TITLE' ->
	`_INVOKE_TITLE'.  Use `super()' to get the parent class menu, not
	hardcoded `TextField' as the parent.
	(DateField._INVOKE_SELECTION_MENU_TITLE): -> `_INVOKE_TITLE'
	(DateField._INVOKE_SELECTION_MENU_HELP): -> `_INVOKE_HELP'
	(CodebookField._on_codebook_insert): Don't return anything.
	(ColorSelectionField._INVOKE_SELECTION_MENU_TITLE): ->
	`_INVOKE_TITLE'
	(ColorSelectionField._INVOKE_SELECTION_MENU_HELP): ->
	`_INVOKE_HELP'
	(CodebookField._INVOKE_SELECTION_MENU_TITLE): -> `_INVOKE_TITLE'
	(CodebookField._INVOKE_SELECTION_MENU_HELP): -> `_INVOKE_HELP'
	(CodebookField._create_widget): Use `super()' to create the base
	widget.  Use a 'new-record' icon instead of the plus sign on the
	codebook insertion button.
	(CodebookField._menu): Use `super()' to get the base menu.
	(FileField): Derive also from `Invocable'.
	(FileField._INVOKE_TITLE, FileField._INVOKE_HELP) 
	(FileField._INVOKE_ICON): New constants.
	(FileField._on_invoke_selection): New method.
	(FileField._menu): Use `Invocable's super class menu as base menu.

	* pytis/form/screen.py
	(get_icon): New function.
	(MItem.create): Use it.
	(MItem.__init__): Docstring updated.

	* pytis/form/commands_.py (DEFAULT_KEYMAP): Added keys for
	`FileField.COMMAND_CLEAR'.

	* pytis/web/__init__.py: Import `dialog'.

	* pytis/web/form.py (Form._valid_prefill): Don't omit key columns.
	(EditForm.export): Just print the identifier if the corresponding
	field does not exist.

	* pytis/web/dialog.py: New module.

	* pytis/data/types_.py (DateTime._check_format): Added regexps for
	`%p' format.

2007-01-15  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data: New database API merged in.

2007-01-15  Milan Zamazal  <pdm@brailcom.org>

	* pytis/data/dbdata.py (DBConnectionPool.put_back): Use the right
	exception name when accessing the pool.

2007-01-15  Milan Zamazal  <pdm@brailcom.org>

	* pytis/form/application.py (has_access): Use
	default_access_groups instead of class_access_groups.

2007-01-15  Milan Zamazal  <pdm@brailcom.org>
	
	* pytis/util/caching.py (LimitedCache.__setitem__): Don't cache
	data in LimitedCache if the limit is 0.

2007-01-12  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/spec.py (Action.__init__): Docstring typo fix.

	* pytis/presentation/field.py (PresentedRow._init_row): Fixed bug
	in prefill initialization.

2007-01-11  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/dualform.py (DualForm.select_row): Pass the return
	value of the main form's method.

	* pytis/form/list.py (ListForm._select_row): Return `True' on
	success, `False' otherwise.
	(ListForm.select_row): Pass the return value of the
	parent class's method. 

	* pytis/form/form.py (RecordForm._on_new_record): Don't run
	callback `CALL_NEW_RECORD'.
	(RecordForm.select_row): Return `True' on success, `False' otherwise.
	(EditForm._select_row): Return `True'.
	(BrowsableShowForm._select_row): Pass the return value of the
	parent class's method.

2007-01-09  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/form.py (RecordForm._init_attributes): Docstring
	updated.

	* pytis/presentation/field.py (PresentedRow._init_row): Create a
	copy of the `prefill' dict with all values as new
	`pytis.data.Value' instances.  Use the same values regardless if
	`row' was None or not.
	(PresentedRow.__init__): Docstring updated.

2007-01-05  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/field.py (PresentedRow.display): Try to use
	columns own display prior to using CbComputer's display.

	* pytis/form/inputfield.py (InputField._on_set_focus): Validate
	last focused field only if it has the same parent -- is from the
	same form.
	(CodebookField._on_codebook_insert): Use `new_record' instead of
	`run_form'.

2007-01-04  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/application.py (Application._cmd_run_form): Removed
	hack for backwards compatibility of arguments.

2007-01-03  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/spec.py (FieldSpec.__init__): New argument
	`nocopy'.
	(FieldSpec.nocopy): New method.

	* pytis/form/form.py (RecordForm._row_copy_prefill): Also exclude
	computed fields which depend on key columns and fields with the
	`nocopy' flag.

2006-12-29  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/form.py (LookupForm._init_attributes): Removed
	argument `indicate_filter'.  Don't initialize
	`_lf_initial_condition'.
	(LookupForm._current_condition): New method.
	(LookupForm._init_select): Use it.
	(LookupForm._filter): Argument `condition' removed.
	(LookupForm._cmd_filter): Use `_lf_condition' instead of
	`_lf_initial_condition'.  Don't pass any arguments to `_filter'.
	(LookupForm._cmd_unfilter): Don't pass any arguments to `_filter'.
	(LookupForm.condition): Use `_current_condition' instead of
	`_lf_condition'.

	* pytis/form/list.py (CodebookForm._init_attributes): Don't
	process the `condition' argument here, leave it for parent class.
	(ListForm._update_label_colors): Don't use the `_indicate_filter'
	flag.  Indicate filter when `_lf_filter' is not None.
	(ListForm._filter): Removed
	(ListForm._find_row_by_values): Use `_current_condition' instead
	of `_lf_condition'.
	(ListForm._refresh): Recognize key `filter' for the `reset'
	argument.  Don't recognize `condition' and `filter_flag'.  Modify
	`_lf_filter', not `_lf_condition'.
	(ListForm._cmd_sort): Don't reset `condition'.
	(ListForm._cmd_autofilter): Use `_current_condition' instead of
	`_lf_condition'.
	(BrowseForm._formatter_parameters): Use `_current_condition'
	instead of `_lf_condition'.
	(FilteredBrowseForm.filter): Reset `filter', not `condition'.
	Reinitialize `_lf_condition', not `_lf_initial_condition'.

2006-12-28  Tomas Cerha  <cerha@brailcom.org>

	* pytis/presentation/spec.py (Specification._create_data_spec):
	Added assertion to disable setting `access_rights' for a `MemData'
	data object.

	* ChangeLog.3: New file.

	* ChangeLog: Records prior to 2006-12-13 saved to `ChangeLog.3'.

	* pytis/form/dualform.py (DualForm.help_name): Condition for
	adding the `-dual' suffix fixed.

	* pytis/form/inputfield.py (EnumerationField._choices): Set only
	the relevant `FieldSpec' attributes for the fake `PresentedRow'.

	* pytis/util/configuration.py
	(Configuration._Option_auto_reload_defs.default): Option removed.

	* pytis/util/resolver.py (Resolver.__init__): Ignore configuration
	option `auto_reload_defs'.  Always cache modules.
	(Resolver): Docstring updated.

2006-12-27  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/_grid.py (IncrementalSearch._exit): Call
	`self._set_row' when `self._listform' is alive.

2006-12-23  Tomas Cerha  <cerha@brailcom.org>

	* pytis/data/types_.py (String._export, Value._init): Make unicode
	conversion only when the object is not a unicode object yet.

	* pytis/presentation/spec.py (ViewSpec.__init__): Docstring updated.

	* pytis/web/form.py (BrowseForm._export_field):
	`lcg.TranslatableText' -> `lcg.Localizable'.

2006-12-20  Tomas Cerha  <cerha@brailcom.org>

	* pytis/form/application.py (Application._cmd_run_procedure): New
	argument `enabled'.
	(Application._can_run_procedure): New method.

Traceback (most recent call last):
  File "/home/cerha/bin/denik.py", line 98, in ?
    period, n = process(projects, changelog)
  File "/home/cerha/bin/denik.py", line 72, in process
    for date, text in split(DAY_SPLITTER, changelog.strip(), 2):
  File "/home/cerha/bin/denik.py", line 30, in split
    raise Exception("Invalid syntax:", seq[0].splitlines()[0] + '...')
Exception: ('Invalid syntax:', u'2007-02-19  Tomas Cerha  <cerha@brailcom.org>...')
