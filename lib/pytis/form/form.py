# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001, 2002, 2003, 2004, 2005 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Interaktivní formuláøe pro práci s daty.

Základem v¹ech formuláøù je tøída 'Form'.  Dále tento modul obsahuje její
potomky pro konkrétní pou¾ití -- jednoduché editaèní formuláøe (pro zobrazení a
editaci jednoho záznamu).  Jednoduché seznamové formuláøe a duální formuláøe
jsou v oddìlených modulech 'list' a 'dualform'.  Blí¾e viz dokumentace
jednotlivých tøíd.

"""

import time
import pytis.data
import pytis.output
from pytis.presentation import PresentedRow
from pytis.form import *
import wx

class Form(Window, KeyHandler, CallbackHandler, CommandHandler):
    """Spoleèná nadtøída formuláøù.

    Formuláø si podle jména specifikace pøedaného konstruktoru vy¾ádá od
    resolveru pøíslu¹nou datovou a prezentaèní specifikaci.  Z datové
    specifikace vytvoøí datový objekt (instance tøídy odvozené z
    'pytis.data.Data').  Datový objekt a prezentaèní specifikace jsou potom
    ulo¾eny ve formì atributù instance formuláøe ('self._view' a 'self._data')

    Instance tøíd odvozených z této tøídy jsou potom vytváøeny na základì
    interpretace prezentaèní specifikace a pracují s daty s pomocí datového
    objektu a jeho API (které je nezávislé na konkrétním zdroji dat).

    Form je potomkem 'Window', díky èemu¾ je mo¾né jej ukládat na zásobník oken
    aplikace a provádìt dal¹í operace, jako zaostøování, skrývání, zobrazování
    apod.

    Pou¾ívané specifikaèní funkce:

      print_spec -- sekvence dvojic (POPIS, SOUBOR), kde POPIS je string se
        struèným slovním popisem specifikace (vyu¾ívaným napøíklad jako titulek
        polo¾ky menu) a SOUBOR je string udávající jméno souboru se
        specifikací, relativní k adresáøi s definièními soubory, bez pøípony

    """
    ACT_FORM = 'ACT_FORM'
    """Aktivaèní konstanta formuláøe."""
    
    ACTIVATIONS = Window.ACTIVATIONS + [ACT_FORM]
    """Seznam aktivaèních kategorií pro tuto tøídu."""

    _STATUS_FIELDS = ()
    _DESCR = None

    def get_command_handler_instance(cls, application):
        return application.current_form()
    get_command_handler_instance = classmethod(get_command_handler_instance)

    def __init__(self, parent, resolver, name, guardian=None, **kwargs):
        """Inicializuj instanci.

        Argumenty:
        
          parent -- instance 'wxFrame', do kterého formuláø patøí
          resolver -- resolver jmenných odkazù, instance 'pytis.util.Resolver' 
          name -- jméno specifikaèního souboru pro resolver; string
          guardian -- formuláø (instance libovolné tøídy), ve kterém je
            formuláø vlo¾en z hlediska struktury aplikace; není-li zadán, je
            pou¾it 'parent'.  Tento parametr je vyu¾íván napøíklad pøi zasílání
            klávesových událostí \"nahoru\".  Typicky je to formuláø, který
            tuto instanci vytváøí.
          kwargs -- viz ní¾e.

        Resolver je pou¾it k získání datové a prezentaèní specifikace a
        následnému vytvoøení datového objektu. Ten je potom spoleènì s
        prezentaèní specifikací ulo¾en v podobì atributù vytváøené instance.

        Odkaz na resolver samotný je také zapamatován pro pozdìj¹í pou¾ití
        (vytváøení dal¹ích formuláøù).

          
        Inicializace je rozdìlena do nìkolika krokù.  Nejprve jsou zpracováný
        v¹echny argumenty spoleèné v¹em formuáøovým tøídám.  Ty zpracovává
        konstruktor bázové tøídy 'Form'.  Jejich zpracování by nemìlo být
        pøedefinováváno v odvozených tøídách a ani ¾ádné dal¹í argumenty by
        nemìly být pøidávány.  Konstruktor je mo¾no pøedefinovat a provádìt
        nìjaké doplòující akce, ale argumenty by nemìly být mìnìny.

        Po zpracování spoleèných argumwentù jsou naèteny specifikace a vytvoøen
        datový objekt.

        Poté jsou zpracovávány klíèové argumenty.  Ka¾dá odvozená tøída mù¾e
        definovat své vlastní klíèové argumenty.  Ty potom zpracuje
        pøedefinováním metody '_init_attributes()'.  Ta ji¾ mù¾e vyu¾ívat
        inicializovaného datového objetu a specifikací a pøípadnì initializovat
        dal¹í atributy tøídy.  Metoda '_init_attributes()' by mìla v¾dy
        zpracovávat pouze klíèové argumenty, které jsou specifické pro danou
        tøídu.  Zbylé pøedá metodì rodièovské tøídy konstrukcí **kwargs.  Takto
        by mìlo být zaruèeno, ¾e dojde postupnì ke zpracování v¹ech argumentù.
        Pokud nìjaké zbydou, vyvolá bázová tøída výjimku 'AssertionError'.

        Teprve po zpravování argumentù konstruktoru a inicializaci atributù je
        vytváøen vlastní obsah formuláøe (viz. '_create_form()').  Toto by mìlo
        být dodr¾ováno i v odvozených tøídách.
        
        """
        self._parent = parent
        self._resolver = resolver
        self._name = name
        self._guardian = guardian or parent
        Window.__init__(self, parent)
        KeyHandler.__init__(self)
        CallbackHandler.__init__(self)
        start_time = time.time()
        spec_args = kwargs.get('spec_args', {})
        try:
            self._view = self._create_view_spec(**spec_args)
            self._data = self._create_data_object(**spec_args)
        except ResolverError:
            log(OPERATIONAL, 'Chyba z resolveru', format_traceback())
            throw('form-init-error')
        log(EVENT, 'Specifikace naèteny za %.3fs' % (time.time() - start_time)) 
        self._init_attributes(**kwargs)
        self._result = None
        add_menu(Menu(_("Tisk"), (Form._print_menu,),
                      activation=Form.ACT_FORM), form=self)
        start_time = time.time()
        self._create_form()
        log(EVENT, 'Formuláø sestaven za %.3fs' % (time.time() - start_time))
        wx_callback(wx.EVT_CLOSE, self._parent, self._on_parent_close)

    def _init_attributes(self, spec_args={}):
        """Zpracuj klíèové argumenty konstruktoru a inicializuj atributy.
        
        Argumenty:
        
          kwargs -- klíèové argumenty konstruktoru (viz dokumentace metody
            '__init__()').

        
        Tato metoda je volána po základní inicializaci instance (pøedev¹ím
        naètení specifikace a inicializaci datového objektu.  Metody
        vytváøející konkrétní prvky u¾ivatelského rozhraní formuláøe (napøíklad
        '_create_form()'), jsou v¹ak volány a¾ poté.  Zde by mìly být pøedev¹ím
        zpracovány v¹echny klíèové argumenty konstruktoru (viz dokumentace
        metody '__init__()' a inicializovány atributy instance.

        """
        pass

    def _create_view_spec(self, **kwargs):
        spec = self._resolver.get(self._name, 'view_spec', **kwargs)
        assert isinstance(spec, ViewSpec)
        return spec        

    def _create_data_object(self, **kwargs):
        name = self._name
        data_spec = self._resolver.get(name, 'data_spec', **kwargs)
        import config
        if __debug__ and config.server:
            import pytis.remote
        else:    
            import pytis.data    
        assert isinstance(data_spec, pytis.data.DataFactory)
        assert isinstance(data_spec, pytis.data.DataFactory) or \
               isinstance(data_spec, pytis.remote.RemoteDataFactory)
        op = lambda : data_spec.create(dbconnection_spec=config.dbconnection)
        success, data_object = db_operation(op)
        if not success:
            throw('form-init-error')
        return data_object
    
    def _create_form(self):
        # Build the form from parts
        sizer = wx.BoxSizer(wx.VERTICAL)
        self._create_form_parts(sizer)
        self.SetAutoLayout(True)
        self.SetSizer(sizer)
        self.Layout()
        sizer.Fit(self) # Set the size of window `self' to size of the sizer.

    def _create_form_parts(self, sizer):
        pass
    
    def _on_parent_close(self, event):
        """Handler události uzavøení rodièovského okna formuláøe.

        Tato metoda by mìla být pøedefinována, pokud chce daný typ formuláøe
        reagovat na uzavøení rodièovského okna. Typické vyu¾ití je pro popup
        formuláøe.

        Pokud odvozená tøída pøedefinuje tuto metodu a ta za urèitých okolností
        nezavolá 'event.Skip()', nebude zpracování události dokonèeno a
        rodièovské okno tedy nebude uzavøeno.
        """
        if __debug__: log(DEBUG, "Voláno Form._on_parent_close()")
        event.Skip()
        return False

    def _print_menu(self):
        # Vra» tuple polo¾ek tiskového menu.
        name = self._name
        try:
            print_spec = self._resolver.get(name, 'print_spec')
        except ResolverSpecError:
            print_spec = None
        if not print_spec:
            print_spec = ((_("Implicitní"), os.path.join('output', name)),)
        return [MItem(title, command=Form.COMMAND_PRINT,
                      args={'print_spec_path': path})
                for title, path in print_spec]

    def __str__(self):
        return '<%s for "%s">' % (self.__class__.__name__, self._name)

    def __repr__(self):
        return str(self)
    
    # Veøejné metody
    
    def name(self):
        """Vra» název specifikace formuláøe."""
        return self._name

    def on_command(self, command, **kwargs):
        """Zpracuj 'command'.

        Argumenty:

          command -- instance tøídy 'Command'

        Metoda musí pøíkaz buï sama o¹etøit, nebo jek vypropagovat do vnitøního
        prvku formuláøe, pokud takový je a má metodu stejného názvu jako tato.

        Vrací: Pravdu, právì kdy¾ metoda nebo jí volaná metoda pøíkaz
        zpracovala.
        
        V této tøídì metoda nedìlá nic a vrací False.
        
        """
        return False

    def descr(self):
        """Vra» textový popis typu formuláøe jako øetìzec."""
        if self._DESCR is not None:
            return self._DESCR
        else:
            return self.__class__.__name__
        
    def title(self):
        """Vra» titulek ze specifikace formuláøe jako øetìzec."""
        return self._view.title()

    def guardian(self):
        """Vra» guardian zadané v konstruktoru (nebo parent)."""
        return self._guardian

    def check_permission(self, perm, quiet=True):
        """Vra» pravdu, pokud má u¾ivatel daná práva k datovému objektu.

        Argumentem je konstanta  tøídy 'pytis.data.Permission::'.

        """
        VIEW   = pytis.data.Permission.VIEW
        INSERT = pytis.data.Permission.INSERT
        UPDATE = pytis.data.Permission.UPDATE
        DELETE = pytis.data.Permission.DELETE
        EXPORT = pytis.data.Permission.EXPORT
        if perm == DELETE:
            result = self._data.accessible(None, perm)
        else:
            for col in self._data.columns():
                if self._data.accessible(col.id(), perm):
                    result = True
                    break
            else:
                result = False
        if not result and not quiet:
            msg = {
                VIEW:   "Nemáte právo k zobrazení formuláøe.",
                INSERT: "Nemáte právo vlo¾it nový záznam.",
                UPDATE: "Nemáte právo zmìnit existující záznam.",
                DELETE: "Nemáte právo smazat existující záznam.",
                EXPORT: "Nemáte právo k exportu do CSV.",
                }[perm]
            message(msg, beep_=True)
        return result
    
    def set_status(self, field, message):
        """Zobraz zprávu `message' v poli `id' stavové øádky formuláøe.

        Má-li formuláø stavovou øádku a v ní pole `id' zobraz v nìm danou
        zprávu a vra» pravdu.  V opaèném pøípadì vra» nepravdu.

        """
        return False

    def show_popup_menu(self):
        """Zobraz kontextové menu právì aktivního prvku, pokud to umo¾òuje. """
        pass
        
    def close(self):
        for id in self._STATUS_FIELDS:
            set_status(id, '')
        return super_(Form).close(self)
    
    def save(self):
        self._saved_state = map(lambda id: (id, get_status(id)),
                                self._STATUS_FIELDS)

    def restore(self):
        for id, message in self._saved_state:
            set_status(id, message, log_=False)


class Refreshable:
    """Tøída zaji¹»ující existenci metody 'refresh()' s daným významem.

    Tuto tøídu by mìly dìdit v¹echny formuláøe, které mají být obnoveny pøi
    zmìnì dat (typicky zpùsobené jiným formuláøem vý¹e na zásobníku rámcù).
    
    """

    DOIT_IMMEDIATELY = 'DOIT_IMMEDIATELY'
    """Konstanta pro 'refresh()' pro okam¾itý update.

    Není-li seznam právì editován, je update proveden okam¾itì.  Jinak je
    u¾ivatel dotázán, zda má být update proveden ihned; odpoví-li u¾ivatel
    negativnì, je update proveden a¾ po ukonèení editace.

    """
    DOIT_AFTEREDIT = 'DOIT_AFTEREDIT'
    """Konstanta pro 'refresh()' pro update po skonèení editace.

    Není-li seznam právì editován, je update proveden okam¾itì.  Jinak je
    proveden a¾ po ukonèení editace.
    
    """
    DOIT_IFNEEDED = 'DOIT_IFNEEDED'
    """Konstanta pro 'refresh()' pro podmínìný update.

    Update je proveden pouze tehdy, je-li známo, ¾e do¹lo ke zmìnì dat.
    V takovém pøípadì je proveden okam¾itì pouze tehdy, jestli¾e seznam není
    práve editován a v poslední dobì nebyl proveden ¾ádný jiný update;
    v opaèném pøípadì je update odlo¾en \"a¾ na vhodnìj¹í chvíli\" (nicménì
    proveden bude).

    """
    
    def refresh(self, when=None):
        """Aktualizuj data formuláøe z datového zdroje.

        Pøekresli data ve formuláøi v okam¾iku daném argumentem 'when'.

        Argumenty:

          when -- urèuje, zda a kdy má být aktualizace provedena, musí to být
            jedna z 'DOIT_*' konstant tøídy.  Implicitní hodnota je
            'DOIT_AFTEREDIT', je-li 'reset' 'None', 'DOIT_IMMEDIATELY' jinak.

        Vrací: Pravdu, právì kdy¾ byla aktualizace provedena.

        V této tøídì metoda nedìlá nic, musí být v potomkovi pøedefinována.
        
        """
        pass


class PopupForm:
    """Formuláø nacházející se v samostatném framu.

    Tato tøída je urèena k vlo¾ení mezi pøedky tøídy, její¾ instance mají být
    vytváøeny v samostatných framech.  Pro získání framu slou¾í metoda
    '_popup_frame'.

    """
    def _popup_frame(self, parent):
        """Vra» frame instance.

        Pokud frame je¹tì neexistuje, vytvoø jej.

        Argumenty:
        
          parent -- rodièovské okno, instance 'wx.Window'

        """
        try:
            frame = self._popup_frame_
        except AttributeError:
            style = wx.DIALOG_MODAL|wx.DEFAULT_DIALOG_STYLE
            frame = wx.Dialog(parent, style=style)
            self._popup_frame_ = frame
        return frame    

    def _leave_form(self):
        self._popup_frame_.Close() # tím se autom. zavolá _on_parent_close()

    def _on_parent_close(self, event):
        if hasattr(self, 'exit_check') and not self.exit_check():
            event.Veto()
            return True
        event.Skip()
        self._parent.EndModal(0)
        return False

    def run(self):
        """Zobraz formuláø jako modální dialog."""
        unlock_callbacks()
        self._parent.SetTitle(self.title())
        self._parent.SetClientSize(self.GetSize())
        self._parent.ShowModal()
        return self._result


class TitledForm:
    """Pøimíchávací tøída pro formuláøe s titulkem.
    
    Lze vyu¾ít buïto pouze metodu '_create_caption()', která vytváøí samotný
    text titulku, nebo metodu '_create_title_bar()', která pøidává 3d panel.

    """    
    _TITLE_BORDER_WIDTH = 3
    
    def _create_caption(self, parent, text, size=None):
        # Create the title text as 'wxStaticText' instance.
        caption = wx.StaticText(parent, -1, text,
                                style=wx.ALIGN_CENTER)
        if size is None: 
            size = caption.GetFont().GetPointSize()
        font = wx.Font(size, wx.DEFAULT, wx.NORMAL, wx.BOLD,
                       encoding=wx.FONTENCODING_DEFAULT)
        caption.SetFont(font)
        width, height, d, e = self.GetFullTextExtent(text, font)
        caption.SetSize(wx.Size(width, height))
        return caption

    def _create_title_bar(self, text, size=None, description=None):
        """Vytvoø 3d panel s nadpisem formuláøe."""
        panel = wx.Panel(self, -1, style=wx.RAISED_BORDER)
        caption = self._create_caption(panel, text, size=size)
        box = wx.BoxSizer()
        box.Add(caption, 1, wx.EXPAND|wx.ALL, self._TITLE_BORDER_WIDTH)
        panel.SetSizer(box)
        panel.SetAutoLayout(True)        
        box.Fit(panel)
        if description:
            panel.SetToolTipString(description)
        return panel


class RecordForm(Form):
    """Formuláø schopný nìjakým zpùsobem zobrazit aktuální záznam."""

    CALL_SELECTION = 'CALL_SELECTION'
    """Konstanta callbacku zmìny záznamu."""
    CALL_EDIT_RECORD = 'CALL_EDIT_RECORD'
    """Voláno pøi po¾adavku na editaci akt. záznamu."""
    CALL_NEW_RECORD = 'CALL_NEW_RECORD'
    """Voláno pøi po¾adavku na vytvoøení nového záznamu.

    Mù¾e mít jeden nepovinný argument.  Pokud je pravdivý, bude nový záznam
    pøedvyplnìn zkopírováním dat aktuálního øádku.

    """

    def __init__(self, *args, **kwargs):
        super_(RecordForm).__init__(self, *args, **kwargs)
        self.set_callback(self.CALL_NEW_RECORD,  self._on_new_record)
        self.set_callback(self.CALL_EDIT_RECORD,
                          lambda k: self._on_edit_record(k)),

    def _init_attributes(self, prefill=None, **kwargs):
        """Zpracuj klíèové argumenty konstruktoru a inicializuj atributy.

        Argumenty:

          prefill -- slovník øetìzcových (u¾ivatelských) hodnot, které mají být
            pøedvyplnìny pøi inicializaci formuláøe.
            
          kwargs -- argumenty pøedané pøedkovi

        """
        super_(RecordForm)._init_attributes(self, **kwargs)
        assert prefill is None or is_dictionary(prefill)
        self._prefill = prefill
        self._row = None

    def _on_field_change(self, field_id, value=None):
        # Signalizace zmìny hodnoty políèka z _row
        pass

    def _on_editability_change(self, field_id, editable):
        # Callback zmìny editovatelnosti políèka
        pass

    def _signal_update(self):
        pass

    def _find_row_by_number(self, row_number):
        # row_number zaèíná od 0
        def get_it():
            data = self._data
            data.rewind()
            data.skip(row_number)
            return data.fetchone()
        success, row = db_operation(get_it)
        if not success or not row:
            return None
        else:
            return row
    
    def _find_row_by_values(self, cols, values):
        """Vra» datový øádek odpovídající daným hodnotám.

        Arguemnty:

          cols -- sekvence názvù sloupcù, které mají být prohledávány.
          values -- sekvence hodnot sloupcù jako instancí 'pytis.data.Value' v
            poøadí odpovídajícím 'cols'.

        Pro obì sekvence platí, ¾e pokud jsou jednoprvkové, mohou být hodnoty
        pøedány i pøímo, bez obalení do sekvenèního typu.

        """
        cols = xtuple(cols)
        values = xtuple(values)
        assert len(cols) == len(values)
        condition = apply(pytis.data.AND, map(pytis.data.EQ, cols, values))
        data = self._data
        def find_row(condition):
            n = data.select(condition)
            return data.fetchone()
        success, result = db_operation((find_row, (condition,)))
        return result

    def _find_row_by_key(self, key):
        """Vra» datový øádek odpovídající danému datovému klíèi."""
        if key is None:
            return None
        success, row = db_operation(lambda : self._data.row(key))
        if success and row:
            return row
        else:
            run_dialog(Error, _("Záznam nenalezen"))
            return None

    
    def _get_row_number(self, row):
        """Vra» èíslo øádku odpovídající dané instanci 'pytis.data.Row'."""
        eqs = [pytis.data.EQ(c.id(), row[c.id()]) for c in self._data.key()]
        condition = pytis.data.AND(*eqs)
        data = self._data
        data.rewind()
        success, result = db_operation(lambda: data.search(condition))
        if not success:
            return None
        elif result == 0:
            return 0
        else:
            return result - 1
        
    def _select_row(self, row):
        # Naplò formuláø daty z daného *datového* øádku
        raise ProgrammError("This method must be overridden.")

    def _current_key(self):
        the_row = self.current_row()
        if the_row is not None:
            kc = [c.id() for c in self._data.key()]
            try:
                return the_row.row().columns(kc)
            except KeyError:
                log(OPERATIONAL, 'Chybí nìkterý z klíèových sloupcù:', kc)
                run_dialog(Error, _("Chyba v definici dat"))
        return None

    def _redirected_name(self, key):
        redirect = self._view.redirect()
        if redirect is not None:
            success, row = db_operation(lambda : self._data.row(key))
            if not success:
                raise ProgramError('Row read failure')
            name = redirect(row)
            if name is not None:
                assert isinstance(name, types.StringType)
                return name
        return None
    
    def _run_form(self, form, key):
        name = self._redirected_name(key) or self._name
        kwargs = self._new_form_kwargs()
        run_form(form, name, select_row=key, **kwargs)

    def _new_form_kwargs(self):
        return {}

    def _lock_record(self, key):
        success, locked = db_operation(lambda : self._data.lock_row(key),
                                       quiet=True)
        if success and locked != None:
            log(EVENT, 'Záznam je zamèen', locked)
            run_dialog(Message, _("Záznam je zamèen: %s") % locked)
            return False
        else:
            return True

    def _unlock_record(self):
        if self._data.locked_row():
            db_operation(lambda : self._data.unlock_row(), quiet=True)

    def _check_record(self, row):
        # Proveï kontrolu integrity dané instance PresentedRow.
        error = None
        check = self._view.check()
        if check is not None:
            error = check(row)
        if error is None:
            error = row.check()
        if error is not None:
            if is_sequence(error):
                failed_id, msg = error
                message(msg)
            else:
                failed_id = error
                # TODO: Tím bychom pøepsali zprávu nastavenou uvnitø 'check()'.
                # Pokud ale ¾ádná zpráva nebyla nastavena, u¾ivatel netu¹í...
                #message(_("Kontrola integrity selhala!"))
            log(EVENT, 'Kontrola integrity selhala:', failed_id)
            return failed_id
        else:
            return None

    def _record_data(self, row):
        rdata = [(f.id(), row[f.id()]) for f in row.fields()
                 if self._data.find_column(f.id()) is not None]
        return pytis.data.Row(rdata)

    def _on_new_record(self, copy=False):
        if not self.check_permission(pytis.data.Permission.INSERT, quiet=False):
            return False
        if copy:
            key = self._current_key()
        else:
            key = None
        result = new_record(self._name, key=key, prefill=self.prefill())
        if result is not None:
            self.select_row(result.row())
    
    def _on_edit_record(self, key):
        if not self.check_permission(pytis.data.Permission.UPDATE, quiet=False):
            return False
        on_edit_record = self._view.on_edit_record()
        if on_edit_record is not None:
            on_edit_record(row=self.current_row())
            # TODO: _signal_update vyvolá refresh.  To je tu jen pro pøípad, ¾e
            # byla u¾ivatelská procedura o¹etøena jinak ne¾ vyvoláním
            # formuláøe.  Proto¾e to samo u¾ je hack, tak a» si radìji také
            # tvùrce provádí refresh sám, proto¾e tady je volán ve v¹ech
            # ostatních pøípadech zbyteènì a zdr¾uje.
            self._signal_update()
        else:
            self._run_form(PopupEditForm, key)

    def _on_delete_record(self, key):
        log(EVENT, 'Pokus o smazání záznamu:', key)
        if not self.check_permission(pytis.data.Permission.DELETE, quiet=False):
            return False
        # Implicitní akce pro mazání 
        op = lambda : self._data.delete(key)
        # O¹etøení u¾ivatelské funkce pro mazání
        on_delete_record = self._view.on_delete_record()
        if on_delete_record is not None:
            condition = on_delete_record(row=self.current_row())
            if condition is None:
                return True
            assert isinstance(condition, pytis.data.Operator)
            op = lambda : self._data.delete_many(condition)
        else:
            msg = _("Opravdu chcete záznam zcela vymazat?")        
            if not run_dialog(Question, msg):
                log(EVENT, 'Mazání øádku u¾ivatelem zamítnuto.')
                return False
            log(EVENT, 'Mazání øádku u¾ivatelem potvrzeno.')
        success, result = db_operation(op)
        if success:
            self._signal_update()
            log(ACTION, 'Øádek smazán')
            return True
        else:
            return False

    # Veøejné metody
    
    def select_row(self, position):
        """Vyber øádek dle 'position'.

        Argument 'position' mù¾e mít nìkterou z následujících hodnot:
        
          None -- nebude vybrán ¾ádný øádek.
          Nezáporný integer -- bude vybrán øádek pøíslu¹ného poøadí, pøièem¾
            øádky jsou èíslovány od 0.
          Datový klíè -- bude vybrán øádek s tímto klíèem, kterým je tuple
            instancí tøídy 'pytis.data.Value'.
          Slovník hodnot -- bude vybrán první nalezený øádek obsahující
            hodnoty slovníku (instance 'pytis.data.Value') v sloupcích urèených
            klíèi slovníku.
          Instance tøídy 'pytis.data.Row' -- bude pøeveden na datový klíè a
            zobrazen odpovídající øádek.  Instance musí být kompatibilní
            s datovým objektem formuláøe.
        
        Pokud takový záznam neexistuje, zobraz chybový dialog a jinak nic.

        Výbìrem je my¹lena akce relevantní pro daný typ formuláøe (odvozené
        tøídy).  Tedy napøíklad vysvícení øádku v tabulce, zobrazení záznamu v
        náhledovém formuláøi apod.
        
        """
        if isinstance(position, pytis.data.Row):
            row = position
        elif isinstance(position, types.IntType):
            row = self._find_row_by_number(position)
        elif isinstance(position, types.TupleType):
            row = self._find_row_by_key(position)
        elif isinstance(position, types.DictType):
            row = self._find_row_by_values(position.keys(), position.values())
        else:
            ProgramError("Invalid 'position':", position)
        self._select_row(row)

    def set_row(self, row):
        """Nastav aktuální záznam formuláøe daty z instance 'PresentedRow'."""
        self._row = row
        self._run_callback(self.CALL_SELECTION, (row,))
        
    def current_row(self):
        """Vra» instanci PresentedRow právì aktivního øádku.

        Není-li vybrán ¾ádný øádek, vra» 'None'.

        """
        return self._row

    def current_key(self):
        """Vra» klíè aktuálnì vybraného øádku.

        Vrací: Sekvenci instancí tøídy 'pytis.data.Value' nebo 'None', pokud
        není vybrán ¾ádný øádek.

        """
        return self._current_key()

    def prefill(self):
        """Vra» data pro pøedvyplnìní nového záznamu."""
        return self._prefill
    
    def set_prefill(self, data):
        """Nastav data pro pøedvyplnìní nového záznamu.

        List si mù¾e zapamatovat hodnoty, které mají být automaticky pou¾ity
        pro pøedvyplnìní nového záznamu pøi operacích vlo¾ení øádku nad tímto
        listem.  Pro argument 'data' zde platí stejné podmínky, jako pro
        argument 'prefill' konstruktoru tøídy 'PresentedRow'.

        """
        self._prefill = data

    def can_delete_record(self):
        return self.check_permission(pytis.data.Permission.DELETE)
        
    def on_command(self, command, **kwargs):
        if command == RecordForm.COMMAND_DELETE_RECORD:
            key = self._current_key()
            self._on_delete_record(key)
        elif command == RecordForm.COMMAND_NEW_RECORD:
            self._run_callback(self.CALL_NEW_RECORD)
        elif command == RecordForm.COMMAND_NEW_RECORD_COPY:
            self._run_callback(self.CALL_NEW_RECORD, (True,))
        elif command == RecordForm.COMMAND_EDIT_RECORD:
            key = self.current_key()
            if key is not None:
                self._run_callback(self.CALL_EDIT_RECORD, (key,))
        else:
            return super(RecordForm, self).on_command(command, **kwargs)
        return True

        
class LookupForm(RecordForm):
    """Formuláø s vyhledáváním a tøídìním."""
    
    SORTING_CYCLE_DIRECTION = 'SORTING_CYCLE_DIRECTION'
    """Konstanta pro argument direction metody '_on_sort_column()'."""
    SORTING_NONE = 'SORTING_NONE'
    """Konstanta pro argument direction metody '_on_sort_column()'."""
    SORTING_ASCENDENT = 'SORTING_ASCENDENT'
    """Konstanta pro argument direction metody '_on_sort_column()'."""
    SORTING_DESCENDANT = 'SORTING_DESCENDANT'
    """Konstanta pro argument direction metody '_on_sort_column()'."""

    
    def _init_attributes(self, sorting=None, grouping=None, condition=None,
                         indicate_filter=False, **kwargs):
        """Zpracuj klíèové argumenty konstruktoru a inicializuj atributy.

        Argumenty:

          sorting -- specifikace poèáteèního tøídìní formuláøe, viz argument
            'sort' metody 'pytis.data.Data.select()'
          grouping -- ???
          condition -- podmínka výbìru dat, viz argument 'condition' metody
            'pytis.data.Data.select()'
          indicate_filter -- ???
          kwargs -- argumenty pøedané konstruktoru pøedka
        
        """
        super_(LookupForm)._init_attributes(self, **kwargs)
        self._lf_sorting = sorting or self._default_sorting()
        self._lf_grouping = grouping or self._default_grouping()
        self._lf_condition = condition
        self._lf_indicate_filter = indicate_filter
        self._lf_initial_sorting = self._lf_sorting
        self._lf_initial_grouping = self._lf_grouping
        self._lf_initial_condition = self._lf_condition
        self._lf_search_dialog = None
        self._lf_filter_dialog = None
        self._lf_select_count = None
        self._lf_filter = None

    def _new_form_kwargs(self):
        return dict(condition=self._lf_condition, sorting=self._lf_sorting)
    
    def _default_sorting(self):
        return ()

    def _default_grouping(self):
        return None

    def _init_select(self):
        data = self._data
        if self._lf_condition and self._lf_filter:
            condition = pytis.data.AND(self._lf_condition, self._lf_filter)
        else:
            condition = self._lf_condition or self._lf_filter
        if self._lf_initial_condition:
            condition = pytis.data.AND(condition, self._lf_initial_condition)
        sorting = self._lf_translated_sorting()
        op = lambda : data.select(condition=condition, sort=sorting,
                                  reuse=False)
        success, self._lf_select_count = db_operation(op)
        if not success:
            log(EVENT, 'Selhání databázové operace')
            throw('form-init-error')
        return self._lf_select_count

    def _lf_translated_sorting(self):
        def trans(x):
            if x[1] == self.SORTING_ASCENDENT:
                t = pytis.data.ASCENDENT
            elif x[1] == self.SORTING_DESCENDANT:
                t = pytis.data.DESCENDANT
            else:
                raise ProgramError('Invalid sorting spec', x[1])
            return x[0], t
        return tuple(map(trans, self._lf_sorting))

    def _lf_sfs_columns(self):
        columns = map(lambda id: self._view.field(id), self._view.columns())
        return sfs_columns(columns, self._data,
                           labelfunc=FieldSpec.column_label,
                           widthfunc=FieldSpec.column_width)
    
    def _lf_sf_dialog(self, attr, class_):
        dialog = getattr(self, attr)
        if not dialog:
            columns = self._lf_sfs_columns()
            args = (self._parent, columns)
            if issubclass(class_, FilterDialog):
                args = args + (self._data, self._lf_initial_condition)
            dialog = class_(*args)
            setattr(self, attr, dialog)
        return dialog
        
    def _search(self, condition, direction, row_number=None,
                report_failure=True):
        self._search_adjust_data_position(row_number)
        data = self._data
        skip = data.search(condition, direction=direction)
        if skip == 0:
            log(EVENT, 'Záznam nenalezen')
            if report_failure:
                run_dialog(Warning, _("Záznam nenalezen"))
            result = None
        else:
            result = skip
            log(EVENT, 'Záznam nalezen:', skip)
            self._search_skip(result, direction)
        return result

    def _search_adjust_data_position(self, row_number):
        pass

    def _search_skip(self, skip, direction):
        data = self._data
        data.skip(skip-1, direction=direction)
        row = data.fetchone(direction=direction)
        self._select_row(row)

    def _on_jump(self):
        if self._lf_select_count > 0:
            prompt = _("Záznam èíslo (1-%s):") % (self._lf_select_count)
            number = run_dialog(InputNumeric, message=_("Skok na záznam"),
                                prompt=prompt, min_value=1,
                                max_value=self._lf_select_count)
            if number:
                self.select_row(number.value()-1)
            #else:
            #    message(_("Neplatné èíslo záznamu"), beep_=True)
        
    def _on_search(self, show_dialog=True, direction=pytis.data.FORWARD):
        sf_dialog = self._lf_sf_dialog('_lf_search_dialog', SearchDialog)
        if show_dialog:
            self._block_refresh = True  # TODO: quick&dirty, see ListForm
            try:
                condition, direction = run_dialog(sf_dialog, self._row)
            finally:
                self._block_refresh = False
        else:
            condition = sf_dialog.condition()
        if condition is not None:
            self._search(condition, direction)

    def _is_searching(self):
        sd = self._lf_search_dialog
        return bool(sd and sd._condition)
            
    def can_search_next(self, **kwargs):
        return self._is_searching()

    def can_search_previous(self, **kwargs):
        return self._is_searching()
            
    def _filter(self, condition):
        self._init_select()
        self.select_row(self._row.row())

    def _on_filter(self, row=None, col=None, show_dialog=True):
        sf_dialog = self._lf_sf_dialog('_lf_filter_dialog', FilterDialog)
        if show_dialog:
            if row is None:
                row = self._row
            perform, filter = run_dialog(sf_dialog, row, col=col)
        else:
            perform, filter = (True, sf_dialog.condition())
        if perform and filter != self._lf_filter:
            self._lf_filter = filter
            self._filter(filter)

    def _on_sort_column(self, col=None, direction=None, primary=False):
        """Zmìò tøídìní.

        Argumenty:

          col -- id sloupce, podle kterého má být seznam setøídìn, nebo
            'None' pro globální zmìny (napøíklad vypnutí ve¹kerého tøídìní)
          direction -- smìr tøídìní (sestupnì/vzestupnì/vùbec/cyklicky).  Pokud
            je hodnotou konstanta 'LookupForm.SORTING_CYCLE_DIRECTION', bude
            tøídìní cyklicky pøepnuto na dal¹í z variant
            (sestupnì/vzestupnì/vùbec).  Hodnota daná konstantou
            'LookupForm.SORTING_NONE' znaèí explicitní po¾adavek na zru¹ení
            tøídìní.  Jinak je oèekávána jedna z konstant
            'LookupForm.SORTING_ASCENDENT' (pro sestupné tøídìní), nebo
            'LookupForm.SORTING_DESCENDANT' (pro vzestupné tøídìní).
          primary -- právì kdy¾ je pravdivé, bude daný sloupec zvolen jako
            primární a *jediný* tøídící sloupec.  V opaèném pøípadì bude pouze
            pøidán na konec stávajícího seznamu tøídících sloupcù.
        
        Pøi nejednoznaèné kombinaci argumentù 'col' a 'direction' je
        automaticky vyvolán dialog pro výbìr tøídících kritérií.
        
        """
        # TODO: Toto celé je bastl, nutno èasem proèistit.
        sorting = xlist(self._lf_sorting)
        if direction is None or \
               col is None and direction != self.SORTING_NONE:
            columns = self._lf_sfs_columns()
            if col is None and self._lf_sorting:
                col, __dir = self._lf_sorting[0]                
            d = SortingDialog(self._parent, columns, self._lf_sorting,
                              col=col, direction=direction)
            sorting = run_dialog(d)
            if sorting is None:
                return None
            elif sorting is ():
                sorting = self._lf_initial_sorting
        else:
            if col is not None:
                if not self._data.find_column(col):
                    message(_("Podle tohoto sloupce nelze tøídit"),
                            beep_=True)
                    return
            pos = position(col, sorting, key=lambda x: x[0])
            if direction == self.SORTING_CYCLE_DIRECTION:
                if pos is not None:
                    current_direction = sorting[pos][1]
                    if current_direction == self.SORTING_ASCENDENT:
                        direction = self.SORTING_DESCENDANT
                    elif current_direction == self.SORTING_DESCENDANT:
                        direction = self.SORTING_NONE
                    else:    
                        direction = self.SORTING_ASCENDENT
                else:    
                    direction = self.SORTING_ASCENDENT
            if direction == self.SORTING_NONE:
                if pos is not None:
                    del sorting[pos]
                elif col is None:
                    sorting = ()
            else:
                assert direction in (self.SORTING_ASCENDENT,
                                     self.SORTING_DESCENDANT)
                new_col_spec = (col, direction)
                if primary:
                    sorting = (new_col_spec,)
                elif pos is None:
                    sorting.append(new_col_spec)
                else:
                    sorting[pos] = new_col_spec
            sorting = tuple(sorting)
        if sorting is not None and sorting != self._lf_sorting:
            self._lf_sorting = sorting
            self.select_row(self._row.row())
        return sorting
    
    def can_sort_column(self, col=None, direction=None, primary=False):
        sorting = xtuple(self._lf_sorting)
        if direction == self.SORTING_NONE:
            return sorting and (col is None or col in [c for c,d in sorting])
        elif direction is not None and col is not None and sorting:
            if primary:
                return (col, direction) != sorting[0]
            else:
                return (col, direction) not in sorting and col != sorting[0][0]
        else:
            return True
        
    # wx metody

    def Close(self):
        super_(LookupForm).Close(self)
        if self._lf_search_dialog:
            self._lf_search_dialog = None
        if self._lf_filter_dialog:
            self._lf_filter_dialog = None
    
    # Veøejné metody

    def condition(self):
        """Vra» specifikaci aktuální podmínky výbìru dat.

        Podmínka je vrácena v podobì po¾adované argumentem 'condition'
        metody 'pytis.data.Data.select()'.

        """
        return self._lf_condition
    
    def sorting(self):
        """Vra» specifikaci aktuálního tøídìní seznamu.

        Podmínka je vrácena v podobì po¾adované argumentem 'sort'
        metody 'pytis.data.Data.select()'.

        """
        return self._lf_sorting

    def on_command(self, command, **kwargs):
        if command == LookupForm.COMMAND_JUMP:
            self._on_jump()
            return True
        if command == LookupForm.COMMAND_SEARCH:
            self._on_search()
            return True
        elif command == LookupForm.COMMAND_SEARCH_NEXT:
            self._on_search(show_dialog=False, direction = pytis.data.FORWARD)
            return True
        elif command == LookupForm.COMMAND_SEARCH_PREVIOUS:
            self._on_search(show_dialog=False, direction = pytis.data.BACKWARD)
            return True
        elif command == LookupForm.COMMAND_FILTER:
            self._on_filter()
            return True
        elif command == LookupForm.COMMAND_SORT_COLUMN:
            self._on_sort_column()
            return True            
        else:
            return super_(LookupForm).on_command(self, command, **kwargs)

        

### Editaèní formuláø


class EditForm(LookupForm, TitledForm):
    """Formuláø pro editaci v¹ech vlastností jednoho záznamu.

    Formuláø je vytvoøen poskládáním jednotlivých vstupních políèek daných
    specifikací do møí¾ky.  Pole mohou být rùznì seskupována a jejich rozlo¾ení
    je urèeno specifikaèní tøídou 'LayoutSpec' resp. 'GroupSpec'.

    Ka¾dé vstupní pole je reprezentováno objektem tøídy 'InputField'.  To se
    stará o interakci s u¾ivatelem, validaci vstupních dat apod.

    Formuláø mù¾e slou¾it jak k prohlí¾ení èi editaci stávajících dat, tak
    i k vytváøení nových záznamù (viz argument konstruktoru 'mode').
 
    """

    MODE_INSERT = 'MODE_INSERT'
    """Mód formuláøe pro vkládání nových záznamù."""
    MODE_EDIT = 'MODE_EDIT'
    """Mód formuláøe pro editaci stávajících záznamù."""
    MODE_VIEW = 'MODE_VIEW'
    """Mód formuláøe pro zobrazení záznamù bez mo¾nosti editace."""
    
    def __init__(self, *args, **kwargs):
        super_(EditForm).__init__(self, *args, **kwargs)
        self._size = self.GetSize() # Remember the original size.
        if self._mode == self.MODE_INSERT:
            self._select_row(None)
        if isinstance(self._parent, wx.Dialog):
            wx_callback(wx.EVT_INIT_DIALOG, self._parent, self._init_fields)
        else:
            self._init_fields()
            

    def _init_attributes(self, mode=MODE_EDIT, focus_field=None, **kwargs):
        """Zpracuj klíèové argumenty konstruktoru a inicializuj atributy.

        Argumenty:

          mode -- jedna z 'MODE_*' konstant tøídy.  Urèuje, zda formuláø slou¾í
            k prohlí¾ení, editaci èi vytváøení záznamù.

          focus_field -- id políèka, které má být vybráno jako aktivní pro
            u¾ivatelský vstup, pøípadnì funkce jednoho argumentu, kterým je
            aktuální PresentedRow, která vrací id políèka pro u¾ivatelský
            vstup.

          
          kwargs -- argumenty pøedané konstruktoru prvního pøedka

        """
        super_(EditForm)._init_attributes(self, **kwargs)
        assert mode in (self.MODE_EDIT, self.MODE_INSERT, self.MODE_VIEW)
        #assert focus_field in [f.id() for f in self._view.fields()]
        self._mode = mode
        self._focus_field = focus_field or self._view.focus_field()
        # Other attributes
        self._fields = []

    def _init_fields(self, event=None):
        """Inicalizuj dialog nastavením hodnot políèek."""
        for f in self._fields:
            if self._mode == self.MODE_VIEW:
                f.disable(change_appearance=False)
            else:
                f.enable()
        if self._focus_field:
            if callable(self._focus_field):
                focused = self._focus_field(self._row)
            else:
                focused = self._focus_field
            if find(focused, self._fields, key=lambda f: f.id()):                
                f = self._field(focused)
        else:
            f = find(True, self._fields, key=lambda f: f.enabled())
            if f is None:
                f = self._fields[0]
        f.set_focus()

    def _create_form(self):
        if self._mode == self.MODE_INSERT:
            permission = pytis.data.Permission.INSERT
        elif self._mode == self.MODE_EDIT:
            permission = pytis.data.Permission.UPDATE
        else:
            permission = pytis.data.Permission.VIEW
        data_columns = [c.id() for c in self._data.columns()]
        for id in self._view.layout().order():
            spec = self._view.field(id)
            if id in data_columns:
                acc = self._data.accessible(id, permission)
            else:
                acc = True
            f = InputField.create(self, spec, self._data, guardian=self,
                                  accessible=acc)
            f.set_callback(InputField.CALL_SKIP_NAVIGATION, self._navigate)
            f.set_callback(InputField.CALL_FIELD_CHANGE, self._on_field_edit)
            f.set_callback(InputField.CALL_COMMIT_FIELD, self._navigate)
            self._fields.append(f)
        super_(EditForm)._create_form(self)

    def _field(self, id):
        f = find(id, self._fields, key=lambda f: f.id())
        assert f is not None, (_("Unknown field:"), id)
        return f
        
    def _create_form_parts(self, sizer):
        # Create all parts and add them to top-level sizer.
        layout = self._view.layout()
        # Create the parts
        caption = self._create_caption(self, self.title(), size=18)
        group = self._create_group(layout.group())
        # Add parts to the sizer.
        sizer.Add(caption, 0, wx.ALIGN_CENTER|wx.ALL, 8)
        sizer.Add(group,   0, wx.ALIGN_CENTER|wx.ALL, 8)

    def _create_button(self, item):
        b = wx.Button(self, -1, item.label())
        b.Enable(item.active_in_popup_form() \
                 or not isinstance(self, PopupForm))
        if item.width() is not None:
            width = dlg2px(b, 4*item.width())
            height = b.GetSize().GetHeight()
            b.SetMinSize((width, height))
        if item.tooltip() is not None:
            b.SetToolTipString(item.tooltip())
        def create_handler(handler):
            def _handler(event):
                refresh = handler(self._row)
                busy_cursor(False)
                self.set_row(self._row)
            return _handler
        wx_callback(wx.EVT_BUTTON, self, b.GetId(),
                    create_handler(item.handler()))
        return b
        
    def _create_group(self, group):
        """Vytvoø skupinu vstupních políèek podle specifikace.

        Argumenty:

          group -- instance 'GroupSpec', která má být zpracována.

        Ka¾dou posloupnost za sebou následujících políèek seskupí pod sebe
        a pro ka¾dou vnoøenou skupinu políèek zavolá sebe sama rekurzivnì.
        Výsledek potom poskládá do instance 'wx.BoxSizer', kterou vytvoøí.

        Specifikace skupiny ovlivòuje zpùsob seskupení:
        horizontální/vertikální, mezery mezi políèky, skupinami
        atd. Viz. dokuewntace tøídy 'GroupSpec'

        Vrací: 'wx.BoxSizer' naplnìný políèky a vnoøenými skupinami.

        """
        orientation = orientation2wx(group.orientation())
        if group.label() is not None:
            box = wx.StaticBox(self, -1, group.label())
            sizer = wx.StaticBoxSizer(box, orientation)
        else:
            sizer = wx.BoxSizer(orientation)
        # ka¾dý souvislý sled políèek ukládám do pole a teprve nakonec je
        # poskládám metodou self._pack_fields() a vlo¾ím do sizeru této
        # skupiny
        pack = []
        space = dlg2px(self, group.space())
        gap = dlg2px(self, group.gap())
        border = dlg2px(self, group.border())
        border_style = border_style2wx(group.border_style())
        for item in group.items():
            if (is_anystring(item) and
                not self._view.field(item).compact() or
                isinstance(item, Button)):
                # Field of this id will become a part of current pack
                pack.append(item)
                continue
            if len(pack) != 0:
                # pøidej poslední sled políèek (pokud nìjaký byl)
                sizer.Add(self._pack_fields(pack, space, gap),
                          0, wx.ALIGN_TOP|border_style, border)
                pack = []
            if isinstance(item, GroupSpec):
                g = self._create_group(item)
                sizer.Add(g, 0, wx.ALIGN_TOP|border_style, border)
            else:
                # This is a compact field (not a part of the pack)
                field = self._field(item)
                w = field.widget()
                if w is not None:
                    s = wx.BoxSizer(wx.VERTICAL)
                    label = field.label()
                    s.Add(label, 0, wx.ALIGN_LEFT)
                    s.Add(w)
                    sizer.Add(s, 0, wx.ALIGN_TOP|border_style, border)
        if len(pack) != 0:
            # pøidej zbylý sled políèek (pokud nìjaký byl)
            sizer.Add(self._pack_fields(pack, space, gap),
                      0, wx.ALIGN_TOP|border_style, border)
        # pokud má skupina orámování, pøidáme ji je¹tì do sizeru s horním
        # odsazením, jinak je horní odsazení pøíli¹ malé.
        if group.label() is not None:
            s = wx.BoxSizer(orientation)
            s.Add(sizer, 0, wx.TOP, 3)
            sizer = s
        return sizer

    def _pack_fields(self, items, space, gap):
        """Sestav skupinu pod sebou umístìných políèek/tlaèítek do gridu.

        Argumenty:

          items -- sekvence identifikátorù políèek nebo instancí Button.
          space -- mezera mezi ovládacím prvkem a labelem políèka v dlg units;
            integer
          gap -- mezera mezi jednotlivými políèky v dlg units; integer

        Pro ka¾dý prvek skupiny vytvoøí tlaèítko nebo políèko 'inputfield.InputField'
        a pøidá jeho label a widget do vytvoøené instance
        'wx.FlexGridSizer'.

        Vrací: instanci 'wx.FlexGridSizer' naplnìnou políèky a tlaèítky.

        """
        grid = wx.FlexGridSizer(len(items), 2,
                                  dlg2px(self,gap), dlg2px(self,space))
        for item in items:
            if isinstance(item, Button):
                button = self._create_button(item)
                style = wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL
                label = wx.StaticText(self, -1, "",
                                      style=wx.ALIGN_RIGHT)
                grid.Add(label, 0, style, 2)
                grid.Add(button)                
            else:    
                field = self._field(item)
                if field.height() > 1:
                    style = wx.ALIGN_RIGHT|wx.ALIGN_TOP|wx.TOP
                else:
                    style = wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL
                if not isinstance(field, HiddenField):
                    grid.Add(field.label(), 0, style, 2)
                    grid.Add(field.widget())
        return grid

    def _signal_update(self):
        f = current_form()
        if isinstance(f, Refreshable):
            f.refresh()

    def _validate_fields(self):
        # Postupná validace v¹ech políèek.
        for f in self._fields:
            if self._mode == self.MODE_INSERT or f.is_modified():
                value, error = f.validate()
                if error:
                    log(EVENT, 'Validace selhala:', (f.id(), f.get_value()))
                    f.set_focus()
                    return False
        return True
            
    def _commit_form(self, close=True):
        # Validace v¹ech políèek.
        if not self._validate_fields():
            return False
        # Ovìøení integrity záznamu (funkce check).
        failed_id = self._check_record(self._row)
        if failed_id:
            self._field(failed_id).set_focus()
            return False
        # Vytvoøení datového øádku.
        rdata = self._record_data(self._row)
        if self._mode == self.MODE_INSERT:
            log(ACTION, 'Vlo¾ení øádku')
            op = (self._data.insert, (rdata,))
        elif self._mode == self.MODE_EDIT:
            log(ACTION, 'Update øádku')
            op = (self._data.update, (self._current_key(), rdata))
        else:
            raise ProgramError("Can't commit in this mode.")
        # Provedení operace
        success, result = db_operation(op)
        if success and result[1]:
            new_row = result[0]
            if new_row is not None:
                self._row.set_row(new_row, reset=True)
                self.set_row(self._row)
            else:
                # TODO: Lze provést nìco chytøej¹ího?
                pass
            self._signal_update()
            if self._mode == self.MODE_INSERT:
                log(ACTION, 'Záznam vlo¾en')
            else:
                log(ACTION, 'Záznam updatován')
                # Políèka se tímto trikem budou tváøit nezmnìnìná.
                for field in self._fields:
                    field.init(field.get_value())
            cleanup = self._view.cleanup()
            if cleanup is not None:
                cleanup(self._row)
            if close:    
                self._result = self._row
                # tím je automaticky zavoláno _on_parent_close()
                # TODO: to asi nebude fungovat v embeded verzi!!!!!!!!!!
                self._parent.Close()
            return True
        else:
            msg = _("Ulo¾ení záznamu se nezdaøilo")
            if type(result) == type(()) and \
               isinstance(result[0], types.StringTypes):
                msg = "%s\n\n%s" % (result[0], msg)
            run_dialog(Error, msg)
            return False

    def _select_row(self, row):
        # TODO: Tato implementace patøí spí¹e do odvozené tøídy (EditForm)...
        prow = PresentedRow(self._view.fields(), self._data, row,
                            prefill=self._prefill,
                            new=self._mode == self.MODE_INSERT,
                            change_callback=self._on_field_change,
                        editability_change_callback=self._on_editability_change)
        self.set_row(prow)

    def set_row(self, row):
        """Naplò formuláø daty z daného øádku (instance 'PresentedRow')."""
        for f in self._fields:
            f.init(row[f.id()].export())
        super_(EditForm).set_row(self, row)
        
    def title(self):
        """Vra» název formuláøe jako øetìzec."""        
        return self._view.layout().caption()

    def size(self):
        """Vra» skuteènou velikost formuláøe (bez ohledu na aktuální velikost).

        Vrácená hodnota reprezentuje minimální velikost formuláøe, tak aby byly
        v¹echny jeho prvky viditelné.  Skuteèná velikost mù¾e být men¹í, nebo
        vìt¹í v závoslosti na velikost okna, ve kterém je formuláø zobrazen.
        
        """
        return self._size

    def set_scrollbars(self):
        step = 20
        size = self.GetSize()
        self.SetScrollbars(step, step, size.width/step, size.height/step)
    
    def changed(self):
        """Vra» pravdu, pokud byla data zmìnìna od posledního ulo¾ení."""
        field = find(True, self._fields, key=lambda f: f.is_modified())
        return field is not None

    def show_popup_menu(self):
        field = InputField.focused()
        if field is not None:
            field.show_popup_menu()

    def _on_field_edit(self, id, value):
        # Signalizace zmìny políèka z InputField
        self._row[id] = value

    def _on_field_change(self, id):
        # Signalizace zmìny políèka z PresentedRow
        field = find(id, self._fields, key=lambda f: f.id())
        if field is not None and self._row is not None:
            value = self._row.format(id)
            if field.initialized() and field.get_value() != value:
                field.set_value(value)
            
    def _on_editability_change(self, id, editable):
        if id in self._view.layout().order():
            if editable:
                self._field(id).enable()
            else:                
                self._field(id).disable()
                
    def _navigate(self, object=None, forward=True):
        # Vygeneruj událost navigace mezi políèky.
        if self._mode != self.MODE_VIEW:
            nav = wx.NavigationKeyEvent()
            nav.SetDirection(forward)
            if object:
                nav.SetEventObject(object)
                nav.SetCurrentFocus(object)
            else:
                nav.SetCurrentFocus(self)
            self.GetEventHandler().ProcessEvent(nav)
        return True

   
    
    def exit_check(self):
        """Proveï kontrolu formuláøe pøed uzavøením.

        Vrací: Pravdu právì tehdy kdy¾ je mo¾no formuláø uzavøít.

        """
        if self.changed():
            q = _("Data byla zmìnìna a nebyla ulo¾ena!") + "\n" + \
                _("Opravdu chcete uzavøít formuláø?")
            if not run_dialog(Question, q):
                return False
        return True

    def on_command(self, command, **kwargs):
        if kwargs.has_key('originator') \
               and kwargs['originator'] in self._fields:
            field = kwargs['originator']
        else:
            field = InputField.focused()
        if field is not None and field.on_command(command, **kwargs):
            # Pokud se volal výbìr polo¾ky seznamu z ListField,
            # musíme zajistit nastavení _refvalues v PresentedRow.
            if command == ListField.COMMAND_CHOOSE_KEY:
                if kwargs.has_key('id'):
                    id = kwargs['id']
                    val = field.get_item()
                    self._row.listfield_choose(id, val)
            return True
        if self._mode != self.MODE_VIEW:
            if command == EditForm.COMMAND_COMMIT_RECORD:
                self._commit_form()
                return True
            
        # Common commands
        if command == EditForm.COMMAND_NAVIGATE:
            return self._navigate()
        elif command == EditForm.COMMAND_NAVIGATE_BACK:
            return self._navigate(forward=False)
        else:
            return super_(EditForm).on_command(self, command, **kwargs)
        return False

    
class PopupEditForm(PopupForm, EditForm):
    """Stejné jako 'EditForm', av¹ak v popup podobì."""
    
    def __init__(self, parent, *args, **kwargs):
        parent = self._popup_frame(parent)
        EditForm.__init__(self, parent, *args, **kwargs)
        p = parent
        while not p.GetTitle() and p.GetParent():
            p = p.GetParent()
        parent.SetTitle('%s: %s' % (p.GetTitle(), self.title()))

    def _init_attributes(self, disable_new_button=False, **kwargs):
        EditForm._init_attributes(self, **kwargs)
        self._disable_new_button = disable_new_button
        
    def _create_form_parts(self, sizer):
        # Create all parts and add them to top-level sizer.
        layout = self._view.layout()
        # Create the parts.
        caption = self._create_caption(self, self.title(), size=18)
        group = self._create_group(layout.group())
        buttons = self._create_buttons()
        status_bar = self._create_status_bar()
        # Add parts to the sizer.
        sizer.Add(caption, 0, wx.ALIGN_CENTER|wx.ALL, 8)
        sizer.Add(group, 0, wx.ALIGN_CENTER|wx.ALL, 6)
        sizer.Add(buttons, 0, wx.ALIGN_CENTER)
        sizer.Add(status_bar, 0, wx.EXPAND)            

    def _create_status_bar(self):
        # Our own statusbar implementation
        status_bar = wx.Panel(self, -1, style=wx.SUNKEN_BORDER)
        box = wx.BoxSizer()
        status_bar.SetSizer(box)
        status_bar.SetAutoLayout(True)
        self._status = wx.StaticText(status_bar, -1, '',
                                     style=wx.ALIGN_LEFT)
        box.Add(self._status, 1, wx.EXPAND|wx.ALL, 2)
        box.Fit(status_bar)
        return status_bar

    def _on_submit(self, event):
        self._commit_form()
        return True

    def _on_next(self, event):
        result = self._commit_form(close=False)
        if result:
            message(_("Záznam ulo¾en"))
            refresh()
            self._select_row(None)
            self._init_fields()
        return False

    def _on_cancel(self, event):
        self._leave_form()
        return True
    
    def _create_buttons(self):
        ok, cancel = buttons = (wx.Button(self, wx.ID_OK, _("Ok")),
                                wx.Button(self, wx.ID_CANCEL, _("Zavøít")))
        wx_callback(wx.EVT_BUTTON, self, wx.ID_OK, self._on_submit)
        wx_callback(wx.EVT_BUTTON, self, wx.ID_CANCEL, self._on_cancel)
        ok.SetToolTipString(_("Ulo¾it záznam a uzavøít formuláø"))
        cancel.SetToolTipString(_("Uzavøít formuláø bez ulo¾ení dat"))
        if self._mode == self.MODE_INSERT and not self._disable_new_button:
            next = wx.Button(self, wx.ID_FORWARD, _("Dal¹í"))
            wx_callback(wx.EVT_BUTTON, self, wx.ID_FORWARD, self._on_next)
            next.SetToolTipString(_("Ulo¾it záznam a reinicializovat formuláø"
                                    " pro vlo¾ení dal¹ího záznamu"))
            buttons = (ok, cancel, next)
        ok.SetDefault()
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        for b in buttons:
            sizer.Add(b, 0, wx.ALL, 20)
        return sizer
    
    def run(self):
        key = self._current_key()
        if self._mode == self.MODE_EDIT and key and not self._lock_record(key):
            return None
        try:
            return PopupForm.run(self)
        finally:
            self._unlock_record()

    def set_status(self, field, message):
        if field == 'message':
            if message is None:
                message = ''
            self._status.SetLabel(unicode(message))
            return True
        else:
            return False
       

class ShowForm(EditForm):
    """Formuláø pro zobrazení náhledu.

    Layout je stejný jako u editaèního formuláøe (resp. 'EditForm'),
    pouze titulek má stejný vzhled, jako titulek formuláøù typu 'ListForm'.
    Urèen pro zobrazení v duálním formuláøi.

    """

    _DESCR = _("náhled")

    def _init_attributes(self, mode=EditForm.MODE_VIEW, **kwargs):
        super_(ShowForm)._init_attributes(self, mode=mode, **kwargs)
        wx_callback(wx.EVT_SIZE, self, self._on_size)
        
    def _create_form_parts(self, sizer):
        # Create all parts and add them to top-level sizer.
        title = self._create_title_bar(self.title())
        group = self._create_group(self._view.layout().group())
        # Add parts to the sizer.
        sizer.Add(title, 0, wx.EXPAND)
        sizer.Add(group, 1, wx.ALIGN_CENTER|wx.BOTTOM, 8)
        
    def _on_size(self, event):
        self.set_scrollbars()
        event.Skip()

class BrowsableShowForm(ShowForm):
    """Listovací formuláø pro zobrazení náhledu.

    Formuláø je needitovatelný, ale umo¾òuje pohyb po záznamech tabulky, nad
    kterou je vytvoøen, vyhledávání atd.  Z u¾ivatelského hlediska jde v
    podstatì o redukci prohlí¾ecích mo¾ností formuláøe typu 'BrowseForm' na
    jeden záznam zobrazený v Layoutu editaèního formuláøe.
    
    """
    
    def __init__(self, *args, **kwargs):
        super_(BrowsableShowForm).__init__(self, *args, **kwargs)
        self._init_select()
        self._set_status()

    def _on_next_record(self, direction=pytis.data.FORWARD):
        op = lambda : self._data.fetchone(direction=direction)
        success, row = db_operation(op)
        if not row:
            if direction == pytis.data.FORWARD:
                message(_("Poslední záznam"), beep_=True)
            else:
                message(_("První záznam"), beep_=True)
            # Pøesuneme ukazovátko zpìt na poslední záznam, to je chování
            # oèekávané u¾ivateli.
            antidir = pytis.data.opposite_direction(direction)
            db_operation(lambda: self._data.fetchone(direction=antidir))
        if not success or not row:
            return
        self._select_row(row)

    def _select_row(self, row):
        super(BrowsableShowForm, self)._select_row(row)
        self._set_status()

    def _set_status(self):
        current, total = self._data.last_row_number(), self._lf_select_count
        if total:
            set_status('list-position', "%d/%d" % (current+1, total))        

    def on_command(self, command, **kwargs):
        if command == BrowsableShowForm.COMMAND_NEXT_RECORD:
            self._on_next_record()
            return True
        elif command == BrowsableShowForm.COMMAND_PREVIOUS_RECORD:
            self._on_next_record(direction=pytis.data.BACKWARD)
            return True
        elif command == BrowsableShowForm.COMMAND_FIRST_RECORD:
            self.select_row(0)
            return True
        elif command == BrowsableShowForm.COMMAND_LAST_RECORD:
            self.select_row(self._lf_select_count-1)
            return True
        else:
            return super(BrowsableShowForm, self).on_command(command, **kwargs)
