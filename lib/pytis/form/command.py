# -*- coding: iso-8859-2 -*-

# Definice u¾ivatelských pøíkazù
# 
# Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Tøídy slou¾ící k definici pøíkazù.

Tento modul definuje tøídy slou¾ící k definici a zpracování pøíkazù.  Vlastní
definice v¹ech dostupných pøíkazù aplikace je potom soustøedìna centrálnì v
modulu 'commands_'.

"""

from pytis.form import *

class CommandHandler:
    """Mix-in tøída, kterou musí dìdit tøídy definující vlastní pøíkazy.

    Tato tøída pøidává schopnost zpracovat pøíkazy (instance 'Command') a
    zjistit, zda je konkrétní pøíkaz v danou chvíli dostupný.

    TODO: Doplnit pøehled úèelu jednotlivých metod a zpùsobu vyhledání instance
    handleru.

    """
    
    @classmethod
    def _get_command_handler_instance(cls):
        """Najdi v aplikaci aktivní prvek, který je schopen zpracovat pøíkaz."""
        raise ProgramError("This method must be overriden in a derived class.")

    @classmethod
    def _command_handler(cls, command, _command_handler=None, **kwargs):
        if _command_handler is not None:
            handler = _command_handler
        else:
            handler = cls._get_command_handler_instance()
        if not isinstance(handler, cls):
            handler = None
        return handler, kwargs
    
    @classmethod
    def command_enabled(cls, command, **kwargs):
        """Vra» pravdu, pokud je daný pøíkaz aktivní (smí být vyvolán).
        
        Pøíkazy, které nejsou kompatibilní s aktivním prvkem aplikace (instancí
        'CommandHandler') jsou automaticky neaktivní.  Pokud je kompatibilní
        instance 'CommandHandler' nalezena, je dostupnost pøíkazu dále
        vyhodnocena voláním metody 'can_command' této instance.

        """
        handler, kwargs = cls._command_handler(command, **kwargs)
        if handler is None:
            return False
        if __debug__:
            name = 'COMMAND_' + command.name()
            assert hasattr(handler,name) and getattr(handler,name) == command,\
                   "Invalid command '%s' for %s" % (name, handler)
        return handler.can_command(command, **kwargs)

    @classmethod
    def invoke_command(cls, command, **kwargs):
        """Vyhledej instanci handleru pøíkazu a pøíkaz proveï.

        Vrací: Návratovou hodnotu obslu¾né rutiny daného pøíkazu.

        """
        handler, kwargs = cls._command_handler(command, **kwargs)
        try:
            try:
                busy_cursor(True)
                return handler.on_command(command, **kwargs)
            finally:
                busy_cursor(False)
        except UserBreakException:
            pass
        except:
            top_level_exception()

    @classmethod
    def add_toolbar_ctrl(cls, toolbar, uicmd):
        """Add a toolbar control for given 'uicmd' into 'toolbar'.

        This method adds a default command control into the toolbar.  The default control is a
        simple button which invokes the command on click.  Derived classes may override this method
        to create some more sophisticated controls for their specific commands.

        """
        cmd, kwargs = uicmd.command(), uicmd.args()
        id = wx.NewId()
        icon = get_icon(command_icon(cmd, kwargs), type=wx.ART_TOOLBAR)
        tool = toolbar.AddTool(id, icon,
                               shortHelpString=uicmd.title(),
                               longHelpString=uicmd.descr())
        frame = toolbar.GetParent()
        wx_callback(wx.EVT_TOOL, frame, id, lambda e: cmd.invoke(**kwargs))
        wx_callback(wx.EVT_UPDATE_UI, frame, id, lambda e: e.Enable(cmd.enabled(**kwargs)))
    
    def on_command(self, command, **kwargs):
        """Zpracuj pøíkaz 'command' s parametry 'kwargs'.

        Argumenty:

          command -- instance 'Command'.

          kwargs -- argumenty, se kterámi byl pøíkaz 'command' vyvolán.

        Obslu¾dá rutina pøíkazu je nalezena automaticky podle názvu pøíkazu.
        Napøíkad pro pøíkaz 'Application.COMMAND_RUN_FORM' je hledána metoda
        'Application._cmd_run_form()'.  Této metodì jsou pøedány v¹echny
        argumenty, se kterými byl pøíkaz vyvolán.

        Ka¾dá tøída, pro kterou jsou definovány pøíkazy, by tak mìla definovat
        v¹echny odpovídající obslu¾né rutiny.  Druhou mo¾ností je pøedefinování
        této metody a implementace vlastního mechanismu zpracování pøíkazù.
        
        Vrací: Návratovou hodnotu obslu¾né rutiny daného pøíkazu.

        """
        handler = getattr(self, '_cmd_' + command.name().lower())
        return handler(**kwargs)

    def can_command(self, command, **kwargs):
        """Vra» pravdu, pokud je pøíkaz aktivní a mù¾e být proveden.

        Pokud je pøíkaz aktivní, znamená to, ¾e jeho provedení má v daném
        kontextu smysl, u¾ivatel má dostateèná pøístupová práva atd.

        Pøíkazy, pro nì¾ je definována metoda 'can_<command_name>' a ta vrátí
        False, jsou neaktivní.

        """
        can_method_name = '_can_' + command.name().lower()
        if hasattr(self, can_method_name):
            can = getattr(self, can_method_name)
            if not can(**kwargs):
                return False
        return True




    
class Command(object):
    """Reprezentace obecného pøíkazu u¾ivatelského rozhraní.

    Ka¾dý pøíkaz je vázán na urèitý typ prvku u¾ivatelského rozhraní aplikace
    (formuláø, dialog, vstupní políèko), nad jeho¾ instancí mù¾e být vyvolán.
    Tøída ka¾dého takového prvku u¾ivatelského rozhraní, která chce vlastní
    pøíkazy definovat, musí být odvozena od tøídy 'CommandHandler'.

    """

    _commands = {}

    @classmethod
    def command(class_, name):
        """Return command instance named 'name'.

        If there is no command with that name, return 'None'.

        Arguments:

          name -- name of the command, string
          
        """
        return class_._commands.get(name)
    
    def __init__(self, handler, name, doc=None, log_=True):
        """Definuj pøíkaz.

        Argumenty:

          handler -- Tøída prvku u¾ivatelského rozhraní, který pøíkaz
            zpracovává.  Tøída musí být potomkem tøídy 'CommandHandler'.  Více
            také viz. vý¹e (dokumentace tøídy 'Command').
          name -- název pøíkazu.  Neprázdný øetìzec, pou¾itelný jako Pythonový
            identifikáítor, mezi názvy pøíkazù unikátní.  Název je pou¾it pro
            vytvoøení konstanty (viz. ní¾e), tak¾e dal¹ím po¾adavkem je, aby
            ve¹kerá písmena byla velká.
          doc -- dokumentaèní øetìzec pøíkazu.  Struèný popis z pohledu vývojáøe
            (ne pro zobrazení v u¾ivatelském rozhraní).
          log_ -- právì kdy¾ je pravdivé, je vyvolání pøíkazu logováno jako
            EVENT, jinak je logováno pouze jako DEBUG

        Po definici pøíkazu je ka¾dý pøíkaz automaticky dostupný jako veøejná
        konstanta své obslu¾né tøídy (dané argumentem 'handler').  Název této
        konstanty je v¾dy COMMAND_ + 'name' ('name' je název pøíkazu zadaný v
        konstruktoru).  Naøíklad tedy 'Application.COMMAND_EXIT', nebo
        'LookupForm.COMMAND_SORT'.

        """
        assert issubclass(handler, CommandHandler), \
               "Not a CommandHandler subclass: %s" % handler
        assert isinstance(name, types.StringType) and name == name.upper(), \
               (name, type(name))
        assert doc is None or isinstance(doc, types.StringTypes)
        self._handler = handler
        self._name = name
        self._doc = doc
        self._id = '.'.join((handler.__name__, name.lower().replace('_', '-')))
        self._log = log_
        assert not hasattr(handler, 'COMMAND_' + name), \
               "Command '%s' already defined for %s" % (name, handler.__name__)
        setattr(handler, 'COMMAND_' + name, self)
        Command._commands[name] = self

    def __call__(self, **kwargs):
        """Umo¾òuje pohodlnì vytvoøit definici pøíkazu a jeho argumentù.

        Vrací dvojici (COMMAND, ARGS), kde COMMAND je instance pøíkazu a ARGS
        jsou jeho argumenty jako slovník.

        Této vlastnosti lze vyu¾ít napøíklad pro zjednodu¹ení zápisu
        klávesových map apod., kde pøíkaz a jeho argumenty tvoøí nedílnou
        dvojici.

        """
        return (self, kwargs)
        
    def handler(self):
        """Vra» tøídu u¾ivatelského rozhraní, která tento pøíkaz zpracovává."""
        return self._handler

    def name(self):
        """Vra» název pøíkazu zadaný v konstruktoru."""
        return self._name
    
    def id(self):
        """Vra» identifikátor pøíkazu jako øetìzec.

        Identifikátor je vhodný napø. pro logování.  Pøíkazy jsou rozpoznávány
        dle konkrétních instancí, ne podle svého identifikátoru.
    
        """
        return self._id

    def doc(self):
        """Vra» dokumentaèní øetìzec pøíkazu jako string, nebo None."""
        return self._doc
    
    def enabled(self, **kwargs):
        """Vra» pravdu, pokud je pøíkaz aktivní (smí být vyvolán).

        Zji¹tìní dostupnosti pøíkazu je ponecháno na metodì 'command_enabled'
        tøídy 'CommandHandler' pro kterou je tento pøíkaz definován.

        """
        return self._handler.command_enabled(self, **kwargs)

    def invoke(self, **kwargs):
        """Vyvolej v aplikaci zpracování pøíkazu s danými argumenty."""
        if self.enabled(**kwargs):
            if self._log:
                kind = EVENT
            else:
                kind = DEBUG
            log(kind, 'Vyvolán pøíkaz:', (self, kwargs))
            return self._handler.invoke_command(self, **kwargs)
        else:
            message(_("Vyvolání pøíkazu zamítnuto: %s") % self.id(), beep_=True)
            return False
    
    def __cmp__(self, other):
        if sameclass(self, other):
            if self._id == other._id:
                return 0
            elif self._id < other._id:
                return -1
            else:
                return 1
        else:
            return compare_objects(self, other)
        
    def __str__(self):
        return '<Command: %s>' % self._id


class UICommand(object):
    """User interface command specification.

    This class defines concrete command variants available within the user interface (as menu
    items, toolbar buttons).  Technically, 'Command' instances can be invoked with arguments, but
    'UICommand' instance is a definition of a command and its arguments.  Each combination of a
    command and its arguments is accompanied by the corresponding title and description which can
    be displayed in the user interface (as a button tooltip, menu item title, etc).

    """
    def __init__(self, cmd, title, descr, icon=None, hotkey=None):
        """Arguments:

          cmd -- The (command, args) pair as produced by calling a command instance.
          title -- user interface title shown as menu item title, toolbar button tooltip, etc.
          descr -- brief description (longer than title) used in status-bar help or so.
          
          icon, hotkey -- currently unused, but planned to replace the 'DEFAULT_KEYMAP' and
            'COMMAND_ICONS' specifications.

        """
        command, args = cmd
        assert isinstance(command, Command), command
        assert isinstance(args, dict), args
        assert isinstance(title, (str, unicode)), title
        assert isinstance(descr, (str, unicode)), descr
        assert icon is None or isinstance(icon, (int, str)), icon
        assert hotkey is None or isinstance(hotkey, str), hotkey
        self._command = command
        self._args = args
        self._title = title
        self._descr = descr
        self._icon = icon
        self._hotkey = hotkey

    def command(self):
        return self._command

    def args(self):
        return self._args

    def title(self):
        return self._title

    def descr(self):
        return self._descr

    def icon(self):
        return self._icon

    def hotkey(self):
        return self._hotkey

    def clone(self, **kwargs):
        """Return the same 'UICommand' instance with command arguments overriden by 'kwargs'."""
        return UICommand((self._command, dict(self._args, **kwargs)), self._title, self._descr,
                         icon=self._icon, hotkey=self._hotkey)


_command_icons = None
def command_icon(command, args):
    """Return the icon identifier for given command and its arguments.

    Arguments:

      command -- 'Command' instance.
      args -- command arguemnts as a dictionary.

    The icon which best matches with given command and arguments is searched
    within 'COMMAND_ICONS' specification (see the 'commands_' module).

    The returned value is the icon identifier as accepted by 'get_icon()'.
    
    """
    global _command_icons
    if _command_icons is None:
        _command_icons = {}
        for item, icon in COMMAND_ICONS:
            if isinstance(item, tuple):
                cmd, iargs = item
            else:
                cmd, iargs = item, {}
            icons = _command_icons[cmd] = _command_icons.get(cmd, [])
            icons.append((iargs, icon))
            
    try:
        icons = _command_icons[command]
    except KeyError:
        pass
    else:
        for iargs, icon in icons:
            for k, v in iargs.items():
                if k not in args or args[k] != v:
                    break
            else:
                return icon
    return None
