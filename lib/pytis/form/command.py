# -*- coding: iso-8859-2 -*-

# Definice u¾ivatelských pøíkazù
# 
# Copyright (C) 2002, 2003, 2004, 2005, 2006 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Tøídy slou¾ící k definici pøíkazù.

Tento modul definuje tøídy slou¾ící k definici pøíkazù.  Vlastní definice v¹ech
pøíkazù aplikace je potom soustøedìna centrálnì v modulu 'commands_'.

"""

from pytis.form import *


class CommandHandler:
    """Mix-in tøída, kterou musí dìdit tøídy definující vlastní pøíkazy."""
    
    def get_command_handler_instance(cls, application):
        """Najdi v aplikaci aktivní prvek, který je schopen zpracovat pøíkaz."""
        raise ProgramError("This method must be overriden in derived class.")
    get_command_handler_instance = classmethod(get_command_handler_instance)
                           
    
class Command(object):
    """Reprezentace obecného pøíkazu u¾ivatelského rozhraní.

    Ka¾dý pøíkaz je vázán na urèitý typ prvku u¾ivatelského rozhraní aplikace
    (formuláø, dialog, vstupní políèko), nad jeho¾ instancí mù¾e být vyvolán.
    Tøída ka¾dého takového prvku u¾ivatelského rozhraní, která chce vlastní
    pøíkazy definovat, musí být odvozena od tøídy 'CommandHandler'.

    Metoda 'enabled()' ka¾dého pøíkazu potom nejprve zjistí, zda je aktivní
    prvek aplikace (instance 'CommandHandler') kompatibilní s daným pøíkazem
    (pøíkaz byl definován pro jeho tøídu).  Pokud ne, metoda vrací v¾dy false
    bez testování hodnoty, dané arguemntem 'enabled' konstruktoru.  Tím jsou v
    dùsledku automaticky zneaktivnìny i pøíslu¹né polo¾ky menu atd.

    Obslu¾ná tøída (resp. její instance) ka¾dý pøíkaz zpracuje buïto sama
    (pøíkazy definované pøímo Pytisem), nebo jde o tzv. `u¾ivatelský pøíkaz' s
    vlastní obslu¾nou rutinou (definovanou u¾ivatelem/tvùrcem aplikace).

    O¹etøení u¾ivatelských pøíkazù je provedeno vyvoláním obslu¾né rutiny,
    specifikované argumentem konstruktoru 'handler'.  Parametry, se kterými
    bude obslu¾ná rutina zavolána závisí na typu tøídy 'CommandHandler'.  Tøída
    'BrowseForm' tak napøíklad jako argument pøedá data aktuálního øádku
    seznamu apod.  Více v dokumentaci jednotlivých tøíd.

    Terminologická poznámka: Název arguemntu konstruktoru 'handler' (obslu¾ná
    rutina pøíkazu) nelze zamìòovat s pou¾itím oznaèení handler pro prvek
    u¾ivatelského rozhraní, který se o zpracování pøíkazu postará
    ('CommandHandler').  Shodné oznaèení je pou¾ito z historických dùvodù a je
    tøeba mít rozli¹ení na pamìti.
    
    """
    def __init__(self, cls, name=None, doc=None, key=None, handler=None,
                 enabled=True, access_groups=None, static=False, log_=True):
        """Definuj pøíkaz.

        Argumenty:

          cls -- Tøída prvku u¾ivatelského rozhraní, který pøíkaz zpracovává.
            Tøída musí být potomkem tøídy 'CommandHandler'.  Více také
            viz. vý¹e (dokumentace tøídy 'Command').
          name -- název pøíkazu.  Neprázdný øetìzec, pou¾itelný jako Pythonový
            identifikáítor, mezi názvy pøíkazù unikátní.  Název je pou¾it pro
            vytvoøení konstanty (viz. ní¾e), tak¾e dal¹ím po¾adavkem je, aby
            ve¹kerá písmena byla velká.
          doc -- dokumentaèní øetìzec pøíazu.  Pokud je pøíkaz urèen k
            u¾ivatelskému vyu¾ití, mìly by být zmínìny zejména argumenty
            pøíkazu.
          handler -- obslu¾ná funkce volaná pøi zpracování pøíkazu.  Má význam
            pøi definici u¾ivatelských pøíkazù.  Blí¾e viz dokumentace tøídy.
            Hodnotou je callable object, nebo None.
          access_groups -- sekvence jmen skupin (strings), které mají právo
            pøíkaz vyvolat; mù¾e být té¾ 'None', v kterém¾to pøípadì pøíkaz
            mohou vyvolat v¹echny skupiny.  Toto oprávnìní je formální,
            zohlednìné jen v u¾ivatelském rozhraní, nemá faktickou bezpeènostní
            roli.  Pøítomnost u¾ivatele ve skupinách je zji¹»ována pouze jednou
            pøi inicializaci instance pøíkazu, co¾ je vìt¹inou pøi startu
            aplikace.
          enabled -- buïto pøímo boolean hodnota urèující, zda je pøíkaz
            aktivní, nebo odkaz na funkci, která toto zjistí (a vrátí
            odpovídající boolean hodnotu).  Jde o funkci tøí argumentù (APPL,
            COMMAND, ARGS), kde APPL je instance aplikace (tøídy
            'Application'), COMMAND je instance pøíkazu a ARGS je slovník
            arguemntù s jakými bude pøíkaz volán.
          static -- pokud je pøedána pravdivá hodnota, bude hodnota vrácená
            funkcí `enabled' pova¾ována za nemìnnou a výsledek tedy bude
            cachován.  V opaèném pøípadì (výchozí hodnota) bude funkce volána
            pøi ka¾dém po¾adavku na zji¹tìní hodnoty enabled.
          log_ -- právì kdy¾ je pravdivé, je vyvolání pøíkazu logováno jako
            EVENT, jinak je logováno pouze jako DEBUG

        Po definici pøíkazu je ka¾dý pøíkaz automaticky dostupný jako veøejná
        konstanta své obslu¾né tøídy (dané argumentem 'cls').  Název této
        konstanty je v¾dy COMMAND_ + 'name' ('name' je název pøíkazu zadaný v
        konstruktoru).  Naøíklad tedy 'Application.COMMAND_LEAVE_FORM', nebo
        'LookupForm.COMMAND_SORT_COLUMN'.

        """
        if isinstance(cls, types.StringType):
            # TODO: A¾ se to bude ru¹it, je tøeba také udìlat argument `name'
            # pozièním (povinným) argumentem.
            assert name is None
            name = cls.replace('user-command.', '').upper().replace('-', '_')
            cls = BrowseForm
            log(OPERATIONAL, "Konstruktor Command volán se starými argumenty!",
                stack_info(depth=2).splitlines()[0])
        assert issubclass(cls, CommandHandler), \
               "Not a CommandHandler subclass: %s" % cls
        assert isinstance(name, types.StringType) and name == name.upper()
        assert handler is None or callable(handler)
        assert doc is None or isinstance(doc, types.StringTypes)
        assert key is None or is_string(key) or is_sequence(key)
        assert callable(enabled) or isinstance(enabled, types.BooleanType)
        assert isinstance(static, types.BooleanType)
        assert access_groups is None or \
               isinstance(access_groups,
                          (types.StringType, types.TupleType, types.ListType))
        self._cls = cls
        self._name = name
        self._doc = doc
        self._id = id = '.'.join((cls.__name__, name.lower().replace('_', '-')))
        if key is not None:
            log(OPERATIONAL,
                "Pou¾it potlaèený argument `key' tøídy `Command':", (key, id))
        self._handler = handler
        self._log = log_
        self._has_access = True
        if access_groups is not None:
            access_groups = xtuple(access_groups)
            dbconnection = config.dbconnection
            groups = pytis.data.DBDataDefault.class_access_groups(dbconnection)
            if groups is not None:
                self._has_access = some(lambda g: g in groups, access_groups)
        self._enabled = enabled
        self._static = static
        self._cache = {}
        assert not hasattr(cls, 'COMMAND_' + name), \
               "Command '%s' already defined for %s" % (name, cls.__name__)
        setattr(cls, 'COMMAND_' + name, self)
        

    def __call__(self, **kwargs):
        """Umo¾òuje pohodlnì vytvoøit definici pøíkazu a jeho argumentù.

        Vrací dvojici (COMMAND, ARGS), kde COMMAND je instance pøíkazu a ARGS
        jsou jeho argumenty jako slovník.

        Této vlastnosti lze vyu¾ít napøíklad pro zjednodu¹ení zápisu
        klávesových map apod., kde pøíkaz a jeho argumenty tvoøí nedílnou
        dvojici.

        """
        return (self, kwargs)
        
    def cls(self):
        """Vra» tøídu u¾ivatelsk0ho rozhraní, která tento pøíkaz zpracovává."""
        return self._cls

    def name(self):
        """Vra» název pøíkazu zadaný v konstruktoru."""
        return self._name
    
    def id(self):
        """Vra» identifikátor pøíkazu jako øetìzec.

        Identifikátor je vhodný napø. pro logování.  Pøíkazy jsou rozpoznávány
        dle konkrétních instancí, ne podle svého identifikátoru.
    
        """
        return self._id

    def doc(self):
        """Vra» dokumentaèní øetìzec pøíkazu jako string, nebo None."""
        return self._doc
    
    def handler(self):
        """Vra» rutinu pro zpracování pøíkazu zadanou v konstruktoru."""
        return self._handler

    def enabled(self, application, args):
        """Vra» pravdu, pokud je pøíkaz aktivní (smí být vyvolán).

        Pokud u¾ivatel nemá pøístupová práva k danému pøíkazu, je automaticky
        vráceno False.  Pøíkazy, které nejsou kompatibilní s aktivním prvkem
        aplikace (instancí 'CommandHandler') jsou rovnì¾ automaticky neaktivní.
        Také pøíkazy, pro nì¾ aktivní prvek aplikace definuje metodu
        'can_<command_name>' a ta vrátí False, jsou neaktivní.  A¾ nakonec je
        testována hodnota (nebo výsledek volání funkce) argumentu 'enabled'
        konstruktoru.
        
        """
        if not self._has_access:
            return False
        handler = self._cls.get_command_handler_instance(application)
        if handler is None or not hasattr(handler, 'COMMAND_'+self._name) \
               or not getattr(handler, 'COMMAND_'+self._name) == self:
            return False
        can_method_name = 'can_' + self._name.lower()
        if hasattr(handler, can_method_name):
            can = getattr(handler, can_method_name)
            if not can(**args):
                return False
        enabled = self._enabled
        if not isinstance(enabled, types.BooleanType):
            if self._static:
                cache_key = tuple(args.items())
                try:
                    enabled = self._cache[cache_key]
                except KeyError:
                    enabled = bool(enabled(application, self, args))
                    self._cache[cache_key] = enabled
            else:
                enabled = bool(enabled(application, self, args))
        return enabled
    
    def log_kind(self):
        """Vra» druh logovací hlá¹ky, pod kterým má být pøíkaz logován."""
        if self._log:
            kind = EVENT
        else:
            kind = DEBUG
        return kind

    def has_access(self):
        return self._has_access

    def __cmp__(self, other):
        if sameclass(self, other):
            if self._id == other._id:
                return 0
            elif self._id < other._id:
                return -1
            else:
                return 1
        else:
            return compare_objects(self, other)
        
    def __str__(self):
        return '<Command: %s>' % self._id

    def __setattr__(self, name, value):
        # TODO: Èasem zru¹it.
        if name == 'key':
            log(OPERATIONAL,
                "Nastaven potlaèený atribut `key' tøídy `Command':",
                (value, self._id))
        self.__dict__[name] = value
            
        
def invoke_command(command, **kwargs):
    """Vyvolej globální zpracování pøíkazu 'command'.

    Argumenty:

      command -- instance tøídy 'Command'
      kwargs -- parametry pøíkazu

    """
    appl = pytis.form.application._application
    # TODO: Zde vyvoláme on_command aplikace a ta je zodpovìdna za pøedání
    # pøíkazu formuláøi, pokud to není její pøíkaz.  Formuláø zase pøedává
    # pøíkazy políèkùm.  To odpovídá pùvodnímu návrhu.  Nyní v¹ak máme
    # CommandHandler a metodu get_command_handler_instance(), tak¾e bychom
    # pøíkazy mohli pøedávat rovnou instanci, které pøíkaz nále¾í.  Pozor,
    # mo¾ná to také nìjak souvisí s metodou KeyHandler._maybe_invoke_command().
    if command.enabled(appl, kwargs):
        return appl.on_command(command, **kwargs)
    else:
        return False
