# -*- coding: iso-8859-2 -*-

# Formátovací prvky
# 
# Copyright (C) 2002, 2003, 2004, 2005, 2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Definice formátovacích znaèek.

Tento soubor definuje prvky sestavující výsledný tiskový dokument.  Prvky
jednak definují formátování a jednak umo¾òují vkládat externí data do
dokumentu.  Jsou pou¾ívány v definièních souborech výstupních sestav.

Ka¾dá veøejná tøída modulu odpovídá formátovací znaèce pou¾itelné v definici
dokumentu.  Kromì tìchto tøíd je je¹tì mo¾no pou¾ívat obyèejné øetìzce, které
budou vlo¾eny tak, jak jsou, vèetnì mezer a odøádkování, a sekvence obsahující
elementy ke spojení dohromady.

"""

import collections

from pytis.output import *


class Unit(object):
    """Velikost explicitnì vyjádøená v urèitých jednotkách.

    Instance potomkù této tøídy mohou být pou¾ity kdekoliv, kde je mo¾no pøedat
    absolutní délkové jednotky, místo implicitnì uva¾ovaných jednotek.

    Tato tøída je bázová, k pøímému pou¾ití jsou urèeni a¾ její potomci,
    odpovídající konkrétním jednotkám.

    """
    def __init__(self, size):
        """Inicializuj instanci.

        Argumenty:

          size -- velikost v daných jednotkách, float

        """
        self._size = size

    def __nonzero__(self):
        """Vra» pravdu, právì kdy¾ velikost je nenulová."""
        return self._size != 0
    
    def __add__(self, other):
        """Vra» instanci stejné tøídy s velikostí zvìt¹enou o 'other'.

        Argumenty:

          other -- float nebo int udávající velikost, o kterou má být v nové
            instanci zvìt¹ena velikost aktuální instance

        """
        assert isinstance(other, float) or isinstance(other, int)
        return self.__class__(self._size + other)

    def __mul__(self, other):
        """Vra» instanci stejné tøídy s velikostí vynásobenou 'other'.

        Argumenty:

          other -- float nebo int udávající násobek, kterým má být pro novou
            instanci vynásobena velikost aktuální instance

        """
        assert isinstance(other, float) or isinstance(other, int)
        return self.__class__(self._size * other)        

    def size(self):
        """Vra» velikost zadanou v konstruktoru."""
        return self._size

class UMm(Unit):
    """Milimetry."""

class UPoint(Unit):
    """Tiskové body (1/72 palce)."""
    
class UFont(Unit):
    """Jednotky odpovídající velikosti aktuálního fontu."""
    
class USpace(Unit):
    """Jednotky odpovídající preferované mezislovní mezeøe aktuálního fontu."""
    

class _Mark(object):
    pass


class _Container(_Mark):

    KWARGS = {}
    
    def __init__(self, *contents, **kwargs):
        """Definuj odstavec.

        Argumenty:

          contents -- obsah odstavce, znaèky a øetìzce

        """
        self._contents = contents
        for k, v in self.KWARGS.items():
            try:
                v = kwargs[k]
                del kwargs[k]
            except KeyError:
                pass
            self.__dict__['arg_' + k] = v
        if kwargs:
            raise TemplateException(_("Chybné argumenty prvku"),
                                    self.__class__, kwargs.keys())

    def contents(self):
        """Vra» obsah odstavce zadaný v konstruktoru."""
        return self._contents


class Null(_Mark):
    """Nic.

    Pou¾ití této znaèky se pøedpokládá v místech, kde nemá být nic, tj. ani
    prázdný øetìzec.  Pøíkladem takového místa, kde pou¾ití takové znaèky dává
    smysl, je patièka stránky.

    """

class Nbsp(_Mark):
    """Znaèka reprezentující znak nezalomitelné mezery.

    Tento znak lze zapsat i v obyèejném stringovém zápisu textu jako ' '.
    Znaèka slou¾í jako alternativní forma zápisu.

    """

class Euro(_Mark):
    """Znaèka reprezentující znak mìny Euro."""

class Pound(_Mark):
    """Znaèka reprezentující znak libry."""

class Center(_Container):
    """Znaèka horizontálního vycentrování svého obsahu."""

class AlignLeft(_Container):
    """Znaèka zarovnání svého obsahu vlevo."""

class AlignRight(_Container):
    """Znaèka zarovnání svého obsahu vpravo."""
    

class VCenter(_Container):
    """Znaèka horizontálního vycentrování svého obsahu."""


class _Space(_Mark):

    VERTICAL = 'VERTICAL'
    HORIZONTAL = 'HORIZONTAL'
    
    def __init__(self, size, orientation):
        self._size = size
        self._orientation = orientation

    def size(self):
        return self._size

    def orientation(self):
        return self._orientation

class VSpace(_Space):
    """Znaèka prázdného vertikálního objektu dané ¹íøky."""
    
    def __init__(self, height):
        """Inicializuj instanci.

        Argumenty:

          height -- po¾adovaná vý¹ka objektu v milimetrech, nezáporné èíslo;
            mù¾e být té¾ 'None', v kterém¾to pøípadì objekt bude mít nejvìt¹í
            rozumnou vý¹ku, pøièem¾ \"nejvìt¹í rozumná vý¹ka\" není nijak
            exaktnì definována

        """
        super(VSpace, self).__init__(height, self.VERTICAL)

class HSpace(_Space):
    """Znaèka prázdného horizontálního objektu dané ¹íøky."""
    
    def __init__(self, width):
        """Inicializuj instanci.

        Argumenty:

          width -- po¾adovaná ¹íøka objektu v milimetrech, nezáporné èíslo;
            mù¾e být té¾ 'None', v kterém¾to pøípadì objekt bude mít nejvìt¹í
            rozumnou ¹íøku, pøièem¾ \"nejvìt¹í rozumná ¹íøka\" není nijak
            exaktnì definována

        """
        super(HSpace, self).__init__(width, self.HORIZONTAL)


class HLine(_Mark):
    """Znaèka horizontální èáry vyplòující celý dostupný prostor."""


class Paragraph(_Container):
    """Znaèka odstavce."""


class List(_Container):
    """Seznam.

    Polo¾ky seznamu jsou uvozeny znaèkou specifikovanou klíèovým argumentem
    konstruktoru 'mark'.  Není-li tento argument zadán, polo¾ky nemají ¾ádné
    zvlá¹tní uvození.
    
    """
    NUMBER_MARK = 'NUMBER_MARK'
    """Polo¾ky seznamu uvozené vzestupnými arabskými èíslicemi od 1."""
    BULLET_MARK = 'BULLET_MARK'
    """Polo¾ky seznamu uvozené puntíkem."""
    
    KWARGS = {'mark': None}
    

class NewPage(_Mark):
    """Znaèka nové stránky."""


class PageNumber(_Mark):
    """Znaèka generující èíslo aktuální stránky.

    Vygenerované èíslo je poøadové èíslo poèínaje od 1, zapsané arabskými
    èíslicemi.

    Tato znaèka smí být pou¾ita jen uvnitø hlavièek a patièek stránek.

    """
    def __init__(self, total=False):
        """Inicializuj instanci.

        Argumenty:

          total -- právì kdy¾ je pravdivé, uveï kromì aktuální stránky
            i celkový poèet stran

        """
        super(PageNumber, self).__init__()
        self._total = total

    def total(self):
        """Vra» hodnotu argumentu 'total' z konstruktoru."""
        return self._total


class Bold(_Container):
    """Tuènì sázený text."""


class Italic(_Container):
    """Text sázený kurzívou."""


class Roman(_Container):
    """Standardnì sázený text."""


class FontSize(_Container):
    """Standardnì sázený text."""
    
    def __init__(self, size, *contents):
        """Definuj text.

        Argumenty:

          size -- float urèující relativní velikost fontu vzhledem
            k aktuálnímu, na daném místì pou¾itému fontu; 1.0 znaèí shodnou
            velikost
          contents -- znaèky, na které je zmìna velikosti fontu aplikována

        """
        super_(FontSize).__init__(self, *contents)
        self._size = size
        
    def size(self):
        """Vra» velikost zadanou v konstruktoru."""
        return self._size


class FontFamily(_Container):
    """Text sázený zadanou rodinou fontu.

    Tato znaèka zároveò nastaví základní øez fontu.

    """
    
    PROPORTIONAL = 'PROPORTIONAL'
    """Standardní proporcionální font (napøíklad Times)."""
    SANS_SERIF = 'SANS_SERIF'
    """Standardní bezpatkový proporcionální font(napøíklad Helvetica)."""
    FIXED_WIDTH = 'FIXED_WIDTH'
    """Standardní neproporcionální font (napøíklad Courier)."""

    def __init__(self, family, *contents):
        """Definuj text.

        Argumenty:

          family -- jedna z konstant této tøídy urèující rodinu pou¾itého fontu
          contents -- znaèky, na které je zmìna velikosti fontu aplikována

        """
        super_(FontFamily).__init__(self, *contents)
        self._family = family
        
    def family(self):
        """Vra» rodinu fontu zadanou v konstruktoru."""
        return self._family


class Group(_Container):
    """Spojení obsahu do skupiny.

    Na rozdíl od prostého u¾ití tuple, tato znaèka umo¾òuje specifikovat rùzné
    parametry tohoto spojení pomocí pøedaných klíèovaných argumentù.  Tìmito
    argumenty mohou být:

      vertical -- je-li pravdivé, budou prvky spojeny vertikálnì, jinak budou
        spojeny horizontálnì
      boxed -- právì kdy¾ je pravdivé, budou prvky skupiny orámovány
      balance -- není-li 'None', jedná se o tuple o poètu prvkù shodném
        s poètem prvkù skupiny, udávající vzájemný pomìr velikostí poøadím
        odpovídajících prvkù.  Velikost prvkù ve smìru orientace skupiny (dle
        argumentu 'vertical') bude patøiènì upravena, velikost prvkù s udaným
        pomìrem 0 zùstane nezmìnìna.
      
    """
    KWARGS = {'vertical': False,
              'boxed': False,
              'balance': None}


class Document(_Container):
    """Samostatná èást dokumentu se samostatnì èíslovanými stránkami.

    Dokument je uvozen, resp. ukonèen, obvyklou hlavièkou, resp. patièkou.
    Stránky uvnitø dokumentu mají své vlastní èíslování poèínaje od 1.  Pomocí
    této znaèky lze vytvoøit \"nìkolik dokumentù v jednom\".

    Tato znaèka smí být pou¾ita pouze jako znaèka obalující celý obsah
    dokumentu nebo jako znaèka v¹ech prvkù sekvence definující kompletní obsah
    dokumentu.  Není-li znaèka pou¾ita vùbec, je jí celý dokument obalen
    automaticky.

    Znaèce lze pøedat následující argumenty:

      page_header -- znaèky specifikující hlavièku ka¾dé stránky nebo 'None'
        indikující implicitní hlavièku stránky danou specifikaèní funkcí
        'page_header'
      page_footer -- znaèky specifikující patièku ka¾dé stránky nebo 'None'
        indikující implicitní patièku stránky danou specifikaèní funkcí
        'page_footer'
      first_page_header -- znaèky specifikující hlavièku první stránky nebo
        'None' indikující hlavièku stránky danou specifikaèní funkcí
        'first_page_header'

    """
    KWARGS = {'page_header': None,
              'page_footer': None,
              'first_page_header': None}


class Table(_Mark):
    """Nejvý¹e jednostránková tabulka s pøedpøipravenými daty.

    Pro formátování vìt¹ích tabulek lze pou¾ít znaèku 'LongTable'.

    """
    class Column:
        """Specifikaèní tøída sloupce tabulky."""
        
        ALIGN_LEFT = 'ALIGN_LEFT'
        """Zarovnání obsahu sloupce nalevo."""
        ALIGN_CENTER = 'ALIGN_CENTER'
        """Centrování obsahu sloupce."""
        ALIGN_RIGHT = 'ALIGN_RIGHT'
        """Zarovnání obsahu sloupce napravo."""
        
        def __init__(self, label=None, width=None, alignment=ALIGN_LEFT,
                     label_alignment=ALIGN_CENTER):
            """Inicializuj instanci.

            Argumenty:

              label -- záhlaví sloupce, formátovací element; smí být té¾
                'None', v kterém¾to pøípadì sloupec nemá ¾ádné záhlaví a
                nemá-li ¾ádný sloupec záhlaví, nebude záhlaví vùbec generováno
              width -- ¹íøka sloupce ve znacích, pøirozené èíslo nebo 'None'
                (v kterém¾to pøípadì je ¹íøka sloupce urèena automaticky)
              alignment -- zpùsob zarovnání obsahu sloupce, jedna z 'ALIGN_*'
                konstant tøídy
              alignment -- zpùsob zarovnání hlavièky sloupce, jedna z 'ALIGN_*'
                konstant tøídy

            """
            self.label = label
            self.width = width
            self.alignment = alignment
            self.label_alignment = label_alignment
            
    def __init__(self, columns, *data, **kwargs):
        """Inicializuj instanci.

        Argumenty:

          columns -- sekvence instancí tøídy 'Table.Column', musí mít
            nejménì 1 a nejvý¹e 26 prvkù
          data -- neprázdná sekvence neprázdných sekvencí, odpovídá øádkùm
            (vnìj¹í sekvence) formátovaným do sloupcù (vnitøní sekvence);
            v¹echny vnitøní sekvence musí mít délku shodnou s délkou argumentu
            'columns'.  Místo vnitøní sekvence smí být kdekoliv 'None', na
            takovém místì bude místo øádku tabulky vygenerována horizontální
            èára.
          vmargin (jako klíèovaný argument) -- je-li 'None', je mezi øádky
            tabulky ponechána implicitní mezera; je-li 0, není mezi øádky
            tabulky ¾ádná mezera; jiné hodnoty argumentu nejsou povoleny

        """
        super(Table, self).__init__()
        assert not some(lambda c: c not in ('vmargin',), kwargs.keys())
        assert is_sequence(columns)
        vmargin = kwargs.get('vmargin')
        assert vmargin in (None, 0)
        if len(columns) > 26:
            raise TemplateException(_("Více ne¾ 26 sloupcù v tabulce"))
        self._columns = columns
        self._data = data
        self._vmargin = vmargin
        
    def columns(self):
        """Vra» specifikaci sloupcù tabulky zadanou v konstruktoru."""
        return self._columns

    def data(self):
        """Vra» obsah argumentu 'data' zadaného v '__init__()'."""
        return self._data

    def vmargin(self):
        """Vra» hodnotu argumentu 'vmargin' zadaného v '__init__()'."""
        return self._vmargin
    

class LongTable(Table):
    """Tabulka, potenciálnì vícestránková.

    Tabulka je dána svými sloupci a funkcí generující její øádky.  Délka
    tabulky není omezena, pøekroèí-li tabulka hranice stránky, pokraèuje na
    stránkách dal¹í, pøièem¾ na ka¾dé dal¹í stránce je uvozena stejnou
    hlavièkou jako na svém zaèátku.

    Pro krátké tabulky s víceménì fixním poètem øádkù lze pou¾ít znaèku
    'Table'.

    """
    class Column(Table.Column):
        """Specifikaèní tøída sloupce dlouhé tabulky."""
        
        def __init__(self, label, width, **kwargs):
            """Stejné jako v pøedkovi a¾ na argumenty 'label' a 'width'.

            Argumenty 'label' a 'width' jsou povinné a nesmí být 'None'.

            """
            Table.Column.__init__(self, label, width, **kwargs)

    def __init__(self, columns, row_generator, row_generator_init=None,
                 separator_height=0, line_separator_height=0,
                 separator_margin=0, line_separator_margin=0):
        """Inicializuj instanci.

        Argumenty:

          columns -- sekvence instancí tøídy 'LongTable.Column', musí mít
            nejménì 1 a nejvý¹e 26 prvkù
          row_generator -- funkce generující øádky datové tabulky.  Funkce je
            opakovanì volána, bez argumentù, a musí v¾dy vrátit nový øádek
            tabulky, v podobì sekvencí formátovacích elementù odpovídajících
            sloupcùm tabulky, vèetnì poøadí.  Pokud funkce vrátí 'None', je
            tabulka ukonèena.
          row_generator_init -- funkce volaná bez argumentù pøed prvním voláním
            'row_generator', nebo 'None'
          separator_height -- tlou¹»ka oddìlovací èáry mezi záhlavím tabulky a
            jejími øádky v bodech, jako float
          line_separator_height -- tlou¹»ka oddìlovací èáry za ka¾dým øádkem
            tabulky v bodech, jako float
          separator_margin -- vzdálenost oddìlovací èáry záhlaví tabulky od
            záhlaví v bodech, jako float
          line_separator_margin -- vzdálenost oddìlovací èáry od ka¾dého øádku
            tabulky v bodech, jako float

        """
        super(LongTable, self).__init__(columns)
        assert isinstance(row_generator, collections.Callable)
        self._row_generator = row_generator
        self._row_generator_init = row_generator_init
        self._separator_height = separator_height
        self._line_separator_height = line_separator_height
        self._separator_margin = separator_margin
        self._line_separator_margin = line_separator_margin

    def row_generator(self):
        """Vra» funkci generující øádku tabulky zadanou v konstruktoru."""
        return self._row_generator

    def row_generator_init(self):
        """Vra» argument 'row_generator_init' metody '__init__()'."""
        return self._row_generator_init

    def separator_height(self):
        """Vra» tlou¹»ku oddìlovací èáry záhlaví zadanou v konstruktoru."""
        return self._separator_height
    
    def line_separator_height(self):
        """Vra» tlou¹»ku oddìlovací èáry øádkù zadanou v konstruktoru."""
        return self._line_separator_height

    def separator_margin(self):
        """Vra» vzdálenost oddìlovací èáry záhlaví zadanou v konstruktoru."""
        return self._separator_margin
    
    def line_separator_margin(self):
        """Vra» vzdálenost oddìlovací èáry øádkù zadanou v konstruktoru."""
        return self._line_separator_margin


class Image(_Mark):
    """EPS obrázek."""
    
    def __init__(self, file_name):
        """Inicializuj instanci.

        Argumenty:

          file_name -- jméno souboru obrázku, relativní k adresáøi definovanému
            konfiguraèní volbou 'def_dir'.

        """
        self._file_name = file_name

    def file_name(self):
        """Vra» jméno souboru zadané v konstruktoru."""
        return self._file_name
