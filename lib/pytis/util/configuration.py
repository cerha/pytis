# -*- coding: iso-8859-2 -*-

# Prostøedky pro definici a zpracování konfigurace bìhu aplikace
# 
# Copyright (C) 2002-2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Prostøedky pro definici a zpracování konfigurace bìhu aplikace.

Celá konfigurace je definována instancí tøídy 'Configuration', dokumentace
v této tøídì poví více.

"""

import getopt
import imp
import os
import stat
import string
import sys
import time
import copy

from pytis.util import *
import pytis.data


class _OrderedDefinitionClass(type):
    """A metaclass allowing us to find out the order of class definitions."""
    _class_counter = 0
    def __init__(cls, name, bases, dict):
        cls._class_definition_order = _OrderedDefinitionClass._class_counter
        _OrderedDefinitionClass._class_counter += 1


class Configuration(object):
    """Definition of configuration and its particular options."""

    class Option(object):
        """Specification of a configuration option (variable).

        Definicí potomka této tøídy se jménem zaèínajícím prefixem '_Option_'
        jako vnitøní tøídy tøídy 'Configuration' je automaticky definována nová
        konfiguraèní volba aplikace.  Jméno volby je shodné s èástí jména
        takové tøídy následující za prefixem '_Option_', její popis je
        v docstringu tøídy.  Ostatní vlastnosti volby jsou definovány metodami
        a/nebo konstantami dané tøídy.  Konkrétní hodnota je pak udr¾ována
        v její instanci.

        Docstring tøíd nepodléhá obvyklým formátovacím pravidlùm.  Mìl by mít
        podobu, je¾ se dobøe vyjímá v komentáøi pythonového zdrojového souboru.

        Standardní konfiguraèní volby jsou uvedeny pøímo zde.  Aplikace mù¾e ve
        svém definièním souboru definovat dal¹í, své vlastní, konfiguraèní
        volby pou¾itím potomka tøídy 'Configuration' a doplnìním dal¹ích
        vnitøních tøíd v nìm roz¹íøit dostupné konfiguraèní volby.

        Po zpracování konfiguraèních voleb je zbývající, nezpracovaná, èást
        pøíkazové øádky pøiøazena do 'sys.argv'.

        """
        __metaclass__ = _OrderedDefinitionClass
        
        _DESCR = None
        """Struèný (jednoøádkový) popis volby."""
        
        _DOC = None
        """Podrobnìj¹í dokumentace významu volby a pøípustných hodnot."""
        
        _DEFAULT = None
        """Výchozí hodnota konfiguraèní volby.

        Více viz. dokumentace metody `default()'."""

        _DEFAULT_STRING = None
        """Výchozí hodnota konfiguraèní volby pro dump.

        Více viz. dokumentace metody `default_string()'."""

        _CMDLINE = False
        """Pøíznak, zda tato volba mù¾e být zadána také z pøíkazové øádky.

        Pravdivou hodnotou této konstanty definujeme, ¾e daná volba."""
        
        _LONG_OPTION = None
        """Specifikace dlouhé volby pøíkazové øádky pro 'getopt'."""
        
        _ENVIRONMENT = ()
        """Specifikace jmen promìnných prostøedí obsahujících hodnotu volby.

        Více viz. dokumentace metody `environment()'."""

        _VISIBLE = True
        """Specifikace viditelnosti volby.

        Více viz. dokumentace metody `visible()'."""

        _TYPE = None
        """Datový typ volby jako instance tøídy 'pytis.data.Type' nebo None.

        Hodnota 'None' urèuje blí¾e nespecifikovaný typ.  Takové volby umo¾òují
        pøedávat libovolný Pythonový objekt.

        Namísto pøímého nastavování této konstanty je doporuèováno pou¾ít
        pøeddefinovaných tøíd 'StringOption', 'NumericOption' nebo
        'BooleanOption' (viz ní¾e).

        """
        
        def __init__(self, configuration):
            """Inicializuj instanci volby.

            Argumenty:

              configuration -- instance tøídy 'Configuration', ve které je
                konfiguraèní volba pøítomna
                
            """
            self._configuration = configuration
            self._value = self._undefined = object()
            self._changed = False
            assert self._DESCR is not None, \
                   "Option '%s' doesn't define the description string." % \
                   self.name()

        def _compute_init_value(self, configuration):
            value = self._undefined
            long_option = self.long_option()
            if long_option:
                if long_option[-1] == '=':
                    boolean = False
                    long_option = long_option[:-1]
                else:
                    boolean = True
                try:
                    values = configuration.command_line_options[long_option]
                    if boolean:
                        value = True
                    else:
                        value = values[0]
                except KeyError:
                    pass
            if value is self._undefined:
                for var in self.environment():
                    varval = os.getenv(var)
                    if varval is not None:
                        value = varval
                        break
            if value is self._undefined:
                value = self._value
            if value is self._undefined:
                value = self.default()
            return value

        def name(self):
            return self.__class__.__name__[8:]
        
        def init_value(self, force=False):
            """Inicializuj hodnotu promìnné.

            Argumenty:

              force -- právì kdy¾ je nepravdivé, inicializuj hodnotu jen tehdy,
                je-li je¹tì nedefinována

            """
            if force or self._value is self._undefined:
                value = self._compute_init_value(self._configuration)
                self._value = value

        def value(self):
            """Vra» aktuální hodnotu konfiguraèní volby."""
            # Hodnotu nenastavujeme hned v konstruktoru, proto¾e v té dobì
            # je¹tì nemusí být inicializovány jiné volby, na kterých tato volba
            # pøípadnì závisí.
            if self._value is self._undefined:
                self.init_value()
            return self._value

        def set_value(self, value, initialization=False):
            """Nastav hodnotu konfiguraèní volby na 'value'."""
            if not initialization:
                self._changed = True
            self._value = value

        def changed(self):
            """Vra» pravdu, pokud hodnota volby byla zmìnìna aplikací.

            Za zmìnu je pova¾ováno jakékoliv nastavení volby na jinou hodnotu, ne¾
            jakou daná volba nabyla bìhem inicializace (tj. pøi naèítání voleb
            pøíkazové øádky a konfiguraèního souboru).
            
            """ 
            return self._changed

        def reset(self):
            """Set option value to the initial default value."""
            self._value = self._undefined
            self._changed = False

        def long_option(self):
            """Vra» specifikaci dlouhé volby pro 'getopt' jako string.

            Specifikace mù¾e mít napøíklad podobu 'debug' nebo 'datadir='.
            Pokud konfiguraèní volba není spojena s ¾ádnou volbou pøíkazové
            øádky, vra» 'None'.

            Specifikaci lze upravit pøedefinováním konstanty `_OPTION' v
            odvozené tøídì.
            
            """
            if self._LONG_OPTION is not None:
                return self._LONG_OPTION
            elif self._CMDLINE:
                name = self.name().replace('_','-')
                if isinstance(self.type(), pytis.data.Boolean):
                    return name
                else:
                    return name + '='
            else:
                return None

        def environment(self):
            """Vra» tuple jmen promìnných prostøedí obsahujících hodnotu volby.

            Jména promìnných jsou strings.  Promìnné prostøedí jsou zkoumány
            v uvedeném poøadí a platná je první z nich, která je v prostøedí
            pøítomna (a to i kdy¾ je tøeba její hodnota prázdná).  Promìnné
            prostøedí mají ni¾¹í prioritu ne¾ volba pøíkazové øádky nebo
            hodnota v konfiguraèním souboru, av¹ak vy¹¹í prioritu ne¾ hodnota
            vrácená metodou 'default'.

            Specifikaci lze upravit pøedefinováním konstanty `_ENVIRONMENT' v
            odvozené tøídì.
            
            """
            return self._ENVIRONMENT

        def default(self):
            """Vra» výchozí hodnotu konfiguraèní volby.
            
            Hodnota vrácená touto metodou je pou¾ita, pokud nebylo mo¾no
            výchozí hodnotu volby zjistit jinak.

            Specifikaci lze upravit pøedefinováním konstanty `_DEFAULT' v
            odvozené tøídù, nebo ve slo¾itìj¹ích pøípadech pøedefinováním této
            metody.
            
            """
            return self._DEFAULT
        
        def default_string(self):
            """Vra» výchozí hodnotu konfiguraèní volby pro dump.

            Hodnota je vrácena jako øetìzec, který bude vlo¾en do vzorového
            konfiguraèního souboru.  Tuto metodu je u¾iteèné pøedefinovat
            v pøípadì, ¾e výchozí hodnota volby vrácená metodou 'default()' je
            závislá na konkrétním prostøedí a/nebo nevystihuje zpùsob svého
            získání.

            Specifikaci lze upravit pøedefinováním konstanty `_DEFAULT_STRING'
            v odvozené tøídì, nebo ve slo¾itìj¹ích pøípadech pøedefinováním
            této metody.


            """

            if self._DEFAULT_STRING is not None:
                return self._DEFAULT_STRING
            else:
                import pprint
                return pprint.PrettyPrinter().pformat(self.default())

        def type(self):
            return self._TYPE
        
        def visible(self):
            """Vra» pøíznak viditelnosti volby.

            Vrácená hodnota urèuje, zda má být volba pøítomna ve vzorovém
            konfiguraèním souboru.

            Specifikaci lze upravit pøedefinováním konstanty `_VISIBLE'
            v odvozené tøídì.

            """
            return self._VISIBLE

        def description(self):
            """Vra» struèný jednoøádkový popis volby 'name' jako øetìzec."""
            return self._DESCR
        
        def documentation(self):
            """Vra» podrobný popis volby 'name' jako øetìzec nebo None.
        
            Øetìzec tak mù¾e být víceøádkový a délka jednoho øádku mù¾e pøesahovat 80 znakù.  Pokud
            podrobný popis není definován, mù¾e vrátit té¾ None.
            
            """
            return self._DOC

    class StringOption(Option):
        """Tøída pro volby øetìzcového typu."""
        _TYPE = pytis.data.String()        

    class BooleanOption(Option):
        """Tøída pro volby typu boolean."""
        _TYPE = pytis.data.Boolean()        

    class ColorOption(Option):
        """Tøída pro volby typu barva."""
        _TYPE = pytis.data.Color()
        _DOC = "Barva je reprezentována øetìzcem '#RRGGBB'."

    class NumericOption(Option):
        """Tøída pro volby celoèíselného typu."""
        _TYPE = pytis.data.Integer()        

    class FileOption(StringOption):
        def _compute_init_value(self, *args, **kwargs):
            value = super(Configuration.FileOption, self).\
                    _compute_init_value(*args, **kwargs)
            if not os.path.isabs(value):
                value = os.path.join(os.getcwd(), value)
            return value

    class HiddenOption(Option):
        """Mix-in tøída pro skryté volby."""
        _VISIBLE = False
        
    class CommandlineOption(Option):
        """Mix-in tøída pro volby pøíkazové øádky."""
        _CMDLINE = True
        
    # Volba pro konfiguraci samu

    class _Option_config_file(StringOption, HiddenOption):
        _DESCR = _("Umístìní konfiguraèního souboru.")
        _LONG_OPTION = 'config='
        _ENVIRONMENT = ('PYTISCONFIG',)
        def default(self):
            for filename in ('./config.py', '/etc/pytis/config.py'):
                if os.access(filename, os.F_OK):
                    result = filename
                    break
            else:
                result = None
            return result

    class _Option_user_config_file(StringOption, HiddenOption):
        _DESCR = _("Umístìní doplòujícího konfiguraèního souboru u¾ivatele.")
        _DOC = _("Tento soubor, pokud, existuje, je naèítán navíc ke "
                 "standardní konfiguraci a v nìm definované volby mají vy¹¹í "
                 "prioritu ne¾ volby ve standardním konfiguraèním souboru. "
                 "U¾iteèné pøevá¾nì pro ladìní.")
        def default(self):
            config_file = self._configuration.config_file
            if config_file:
                dir, file = os.path.split(config_file)
                user_config_file = os.path.join(dir, '_'+file)
                if os.path.exists(user_config_file):
                    result = user_config_file
                else:
                    result = None
            else:
                result = None 
            return result
        
    # Volby u¾iteèné hlavnì pro ladìní

    class _Option_help(BooleanOption, CommandlineOption, HiddenOption):
        _DESCR = _("Volba odpovídající --help na pøíkazové øádce.")
        _DEFAULT = False
        
    class _Option_debug(BooleanOption, CommandlineOption):
        _DESCR = _("Pøíznak ladícího re¾imu.")
        _DOC = _("Je-li zapnut, aplikace mù¾e bì¾et s více kontrolami "
                 "a vypisovat spoustu informací, obvykle v¹ak za cenu svého "
                 "výrazného zpomalení.")
        _DEFAULT = False
        
    class _Option_debug_on_error(BooleanOption, CommandlineOption):
        _DESCR = _("Pøíznak vyvolání debuggeru pøi chybì.")
        _DOC = _("Dojde-li k odchycení neoèekávané výjimky a tato volba je "
                 "zapnuta, je vyvolán interaktivní debugger.  Je-li zapnuta "
                 "volba 'debug', je implicitnì zapnuta i tato volba.  U¾iteèné "
                 "pouze pro ladìní.")
        
        def default(self):
            return self._configuration.debug

    class _Option_debug_memory(BooleanOption, CommandlineOption):
        _DESCR = _("Pøíznak výpisu ladících informací o pamìti.")
        _DOC = _("Je-li zapnuta, aplikace vypisuje informativní hlá¹ky "
                 "garbage collectoru a jiné údaje o pamìti.")
        _DEFAULT = False

    class _Option_bug_report_address(StringOption):
        _DESCR = _("E-mailová adresa, na kterou mají být posílána oznámení "
                   "o chybì.")
        _DEFAULT = ''

    class _Option_bug_report_subject(StringOption):
        _DESCR = _("Subject mailu oznámení o chybì aplikace.")
        _DEFAULT = 'Bug report'

    class _Option_profile(BooleanOption, CommandlineOption):
        _DESCR = _("Pøíznak profilování.")
        _DOC = _("Je-li zapnut, aplikace se spustí v profilovacím re¾imu "
                 "a ukládá informace o trvání jednotlivých volání do souboru. "
                 "Zapnutí této volby velmi výraznì zpomaluje bìh aplikace.")
        _DEFAULT = False
        
    class _Option_test_run_interactive(BooleanOption, HiddenOption):
        _DESCR = _("Pøíznak urèující, zda mají být spou¹tìny i interaktivní testy.")
        _DOC = _("Týká se pouze regresivního testování.")

    class _Option_custom_debug(HiddenOption):
        _DESCR = _("Zvlá¹tní ladící funkce, napojená na pøíkaz 'COMMAND_CUSTOM_DEBUG'.")
        _DEFAULT = (lambda: None)

    # Cesty a adresáøe

    class _Option_def_dir(FileOption, CommandlineOption):
        _DESCR = _("Adresáø obsahující definièní soubory.")
        _DOC = _("Adresáø mù¾e být zadán absolutnì i relativnì vzhledem "
                 "k aktuálnímu adresáøi.")
        _DEFAULT = './defs'
        _ENVIRONMENT = ('PYTISDEFDIR',)

    class _Option_help_dir(FileOption, CommandlineOption):
        _DESCR = _("Adresáø obsahující soubory s nápovìdou.")
        _DOC = _("Mù¾e být zadán absolutnì i relativnì vzhledem k aktuálnímu "
                 "adresáøi.")
        _ENVIRONMENT = ('PYTISHELPDIR',)
        _DEFAULT = './help'

    # TODO: Doèasnì vráceno, dokud ve v¹ech projektech nepøejdeme na nový
    # systém nápovìdy.
    class _Option_doc_dir(FileOption, CommandlineOption):
        _DESCR = _("Adresáø obsahující dokumentaci.")
        _DEFAULT = './docs'

    class _Option_icon_dir(FileOption):
        _DESCR = _("Adresáø s obrázkovými soubory.")
        _DOC = _("Mù¾e být zadán absolutnì i relativnì vzhledem k aktuálnímu "
                 "adresáøi.")
        _DEFAULT = './icons'

    class _Option_tmp_dir(StringOption):
        _DESCR = _("Adresáø pro doèasné pomocné soubory.")
        _DEFAULT_STRING = "'/tmp'"
        def default(self):
            dirs = ['/tmp', '/var/tmp', '/usr/tmp']
            tmpdir = os.getenv('TMPDIR')
            if tmpdir is not None:
                dirs = [tmpdir] + dirs
            for d in dirs:
                if os.access(d, os.W_OK):
                    result = d
                    break
            else:
                result = '.'
            return result

    class _Option_logo(FileOption, CommandlineOption):
        _DESCR = _("Cesta k souboru s logem.")
        _DOC = _("Mù¾e být zadán absolutnì i relativnì vzhledem k aktuálnímu "
                 "adresáøi.")
        _DEFAULT = './icons/logo.bmp'

    class _Option_server(StringOption, CommandlineOption):
        _DESCR = _("Jméno stroje (øetìzec), na kterém bì¾í Pyro server.")
        _DOC = _("Mù¾e být té¾ 'None', pak se klient nepøipojuje na server "
                 "a pou¾ívá lokální konfiguraci.")
        _DEFAULT = None

    # Databáze
    
    class _Option_dbuser(StringOption, CommandlineOption):
        _DESCR = _("Database user login name.")
        _DEFAULT_STRING = 'getpass.getuser()'
        def default(self):
            import getpass
            return getpass.getuser()

    class _Option_dbpass(StringOption, CommandlineOption):
        _DESCR = _("Database login password.")
        _DEFAULT = None
        
    class _Option_dbname(StringOption, CommandlineOption):
        _DESCR = _("Database name.")
        _DEFAULT = None

    class _Option_dbhost(StringOption, CommandlineOption):
        _DESCR = _("Database host name.")
        _DEFAULT = 'localhost'
    
    class _Option_dbport(NumericOption, CommandlineOption):
        _DESCR = _("Database port number.")
        _DEFAULT = None
    
    class _Option_dbsslm(StringOption, CommandlineOption):
        _DESCR = _("Database SSL mode (one of string constants supported by the DB system).")
        _DEFAULT = None

    class _Option_dbschemas(StringOption, CommandlineOption):
        _DESCR = _("List of database schemas to use in the order of their preference.")
        _DEFAULT = None        
    
    class _Option_dbconnections(HiddenOption):
        _DESCR = _("Alternative database connections")
        _DOC = ("The default database connection is normally defined by 'dbconnection'.  Certain "
                "applications, however, may require multiple database connections, which are "
                "configured using this option.  The value is a dictionary assigning a connection "
                "specification to each connection by name.  Connection names are defined by "
                "applications (each application should mention the names of used conections in "
                "its documentation).  The connection specification (the value assigned to a "
                "connection name) is a dictionary with keys 'dbname', 'dbhost', 'dbport', "
                "'dbuser', 'dbpass' and 'dbsslm'.  Only 'dbname' is mandatory.  Their meaning "
                "and default values are the same as for the configuration options of the same "
                "names specifying the properties of the default connection.")
        _DEFAULT = {}
        
    class _Option_dbconnection(HiddenOption):
        _DESCR = _("Database connection specification instance ('pytis.data.DBConnection').")
        _DOC = _("The instance is constructed from the above db* option by default.")
        def default(self):
            map = {'dbname': 'database',
                   'dbhost': 'host',
                   'dbport': 'port',
                   'dbuser': 'user',
                   'dbpass': 'password',
                   'dbsslm': 'sslmode'}
            def connection_options(items):
                # Transform configuration option names to DBConnection option names.
                return dict([(map[key], value) for key, value in items
                             if value is not None])
            cfg = self._configuration
            options = connection_options([(option, getattr(cfg, option))
                                          for option in map.keys() if hasattr(cfg, option)])
            alternatives = [(name, connection_options(opts.items()))
                            for name, opts in cfg.dbconnections.items()]
            schemas_string = cfg.dbschemas
            if schemas_string:
                schemas = [s.strip() for s in schemas_string.split(',')]
            else:
                schemas = None
            return pytis.data.DBConnection(alternatives=dict(alternatives),
                                           schemas=schemas,
                                           **options)

    class _Option_dblogtable(StringOption):
        _DESCR = _("Jméno tabulky, do které mají být logovány DML SQL pøíkazy.")
        _DEFAULT = ''

    class _Option_dblisten(BooleanOption):
        _DESCR = _("Flag urèující, zda má být spou¹tìn dohlí¾eè zmìn dat.")
        _DEFAULT = True

    class _Option_max_pool_connections(NumericOption):
        _DESCR = _("Maximum number of database connections stored in a pool "
                   "for a single connection specification. "
                   "If None then there is no limit.")
        _DEFAULT = None

    class _Option_connection_limit(NumericOption):
        _DESCR = _("Maximum number of concurrently open database connections "
                   "for a single connection specification in a database pool. "
                   "If None then there is no limit.")
        _DEFAULT = None

    # Logovací volby

    class _Option_log_logger(Option):
        _DESCR = _("Specifikace logovací tøídy.")
        _DOC = _("Trojice (CLASS, ARGS, KWARGS), kde CLASS je logovací tøída a "
                 "ARGS, resp. KWARGS, jsou argumenty, resp. klíèované "
                 "argumenty, jejího konstruktoru.  Standardní dostupné tøídy "
                 "jsou SyslogLogger a StreamLogger.  Více o nich lze nalézt "
                 "v jejich dokumentaci.")
        
        _DEFAULT_STRING = '(log.StreamLogger, (sys.stderr,), {})'
        def default(self):
            import log
            return (log.StreamLogger, (sys.stderr,), {})

    class _Option_log_exclude(Option):
        _DESCR = _("Seznam typù logovacích hlá¹ek, které mají být "
                   "odfiltrovány.")
        _DOC = _("V seznamu lze pou¾ít konstanty 'OPERATIONAL', 'ACTION', "
                 "'EVENT' a 'DEBUG'.")
        _DEFAULT_STRING = '[DEBUG]'
        def default(self):
            if self._configuration.debug:
                return []
            else:
                import log
                return [log.DEBUG]

    class _Option_log_one_line_preferred(BooleanOption):
        _DESCR = _("Urèuje, zda je preferováno struèné nebo jednotné "
                   "formátování.")
        _DOC = _("Je-li tato volba nastavena na pravdu, jsou krátká data "
                 "v logovacích hlá¹kách doporuèujících struènost pøipojena "
                 "ihned za hlá¹ku místo vypsání na samostatný øádek.")
        _DEFAULT = True

    class _Option_log_module_filter(StringOption):
        _DESCR = _("Prefix jména modulu, jeho¾ debugovací hlá¹ky jsou "
                   "propu¹tìny.")
        _DOC = _("Debugovací logovací hlá¹ky modulù s jiným prefixem jsou "
                 "odfiltrovány.  Není-li definováno, jsou propu¹tìny v¹echny "
                 "hlá¹ky (nestanoví-li jiný filtr jinak).  U¾iteèné pouze pro "
                 "ladìní.")
        _DEFAULT = ''
        _DEFAULT_STRING = "'pytis.data'"

    class _Option_log_class_filter(Option):
        _DESCR = _("Sekvence jmen tøíd, jejich¾ debugovací hlá¹ky jsou "
                   "propu¹tìny.")
        _DOC = _("Debugovací logovací hlá¹ky ostatních tøíd jsou odfiltrovány. "
                 "Je-li 'None', jsou propu¹tìny v¹echny hlá¹ky (nestanoví-li "
                 "jiný filtr jinak).  U¾iteèné pouze pro ladìní.")
        _DEFAULT = None
        _DEFAULT_STRING = "('pytis.data.DBDefaultClass',)"
            
    # Externí programy

    class _Option_printing_command(StringOption):
        _DESCR = _("Shellový pøíkaz pro provedení tisku, vèetnì argumentù.")
        _DOC = _("Pøíkaz musí být schopen pøevzít tisková data ze "
                 "standardního vstupu.")
        _DEFAULT = 'lpr'

    class _Option_lout_command(StringOption):
        _DESCR = _("Jméno programu Lout, s cestou nebo bez ní.")
        _DOC = _("Bude pou¾ito pøi konstrukci pøíkazové øádky Lout. "
                 "Nejedná-li se o originální Lout, musí být argumenty "
                 "programu s Loutem kompatibilní.")
        _DEFAULT = 'lout'

    class _Option_postscript_viewer(StringOption):
        _DESCR = _("Shell command to be used for displaying print preview PostScript files. "
                   "It must take the name of the file to be displayed as its first argument. "
                   "If this option value is empty, Pytis internal viewer is used.")
        _DEFAULT = ''
        #_DEFAULT = 'gv'

    class _Option_sendmail_command(StringOption):
        # Pou¾íváno ji¾ jen v pytis-extensions...
        _DESCR = _("Shellový pøíkaz sendmail vèetnì celé cesty (DEPRECATED).")
        _DEFAULT = '/usr/lib/sendmail'
        
    class _Option_smtp_server(StringOption):
        _DESCR = _("Jméno serveru odchozí po¹ty.")
        _DEFAULT = 'localhost'
        
    class _Option_image_viewer(StringOption):
        _DESCR = _("Shellový pøíkaz pro spu¹tìní prohlí¾eèe obrázkù.  Pokud "
                   "pøíkaz obsahuje øetìzec %f, bude tento nahrazen názvem "
                   "otevíraného souboru, jinak je soubor pøipojen na konec "
                   "pøíkazu.")
        _DEFAULT = 'run-mailcap'
        
    # Ostatní konfiguraèní volby

    class _Option_application_name(StringOption):
        _DESCR = _("Jméno aplikace.")
        _DOC = _("Jméno mù¾e být libovolné, pou¾ívá se napø. jako titulek "
                 "okna nebo pøi logování.  Od nìho je také odvozeno jméno "
                 "výchozího souboru pro ukládání u¾ivatelských zmìn v "
                 "konfiguraci (po vypu¹tìní speciálních znakù a diakritiky)")
        _DEFAULT = 'Pytis'

    class _Option_date_time_format(StringOption):
        _DESCR = _("Formát spoleènì uvedeného data a èasu.")
        _DOC = _("Øetìzec ve tvaru vy¾adovaném parametrem `format' "
                 "konstruktoru tøídy 'pytis.data.DateTime'.")
        _DEFAULT = pytis.data.DateTime.DEFAULT_FORMAT

    class _Option_date_format(StringOption):
        _DESCR = _("Formát data.")
        _DOC = _("Øetìzec ve tvaru vy¾adovaném parametrem `format' "
                 "konstruktoru tøídy 'pytis.data.Date'.")
        _DEFAULT = pytis.data.Date.DEFAULT_FORMAT

    class _Option_time_format(StringOption):
        _DESCR = _("Formát èasu.")
        _DOC = _("Øetìzec ve tvaru vy¾adovaném parametrem `format' "
                 "konstruktoru tøídy 'pytis.data.Time'.")
        _DEFAULT = pytis.data.Time.DEFAULT_FORMAT

    class _Option_lc_numeric(StringOption):
        _DESCR = _("Numeric locale.")
        _DOC = _("Hodnota musí být string reprezentující locale pro "
                 "formátování èíselných polo¾ek.")
        _DEFAULT = 'C'

    class _Option_export_directory(StringOption):
        _DESCR = _("Adresáø pro export do CSV souborù.")
        _DOC = _("Hodnota udává cestu k adresáøi, kde se budou ukládat textové "
                 "CSV soubory.")
        _DEFAULT = '/tmp'

    class _Option_export_encoding(StringOption):
        _DESCR = _("Kódování exportovaných dat.")
        _DOC = _("Hodnota musí být jedním z podporovaných kódování v Pythonu.")
        _DEFAULT = 'iso8859-2'

    class _Option_cache_size(NumericOption):
        _DESCR = _("Velikost cache pro øádky datového objektu.")
        _DOC = _("Velikost je celé èíslo, které udává poèet øádkù cache.")
        _DEFAULT = 20000

    class _Option_initial_fetch_size(NumericOption):
        _DESCR = _("Poèet øádkù, které se pøednaètou do cache pøi prvním "
                   "selectu z datového objektu.")
        _DEFAULT = 100

    class _Option_fetch_size(NumericOption):
        _DESCR = _("Poèet øádkù, které se pøinaèítají do cache pøi dal¹ích "
                   "selectech z datového objektu.")
        _DEFAULT = 100

    class _Option_sender_address(StringOption):
        _DESCR = _("E-mailová adresa odesílatele pou¾itá napø. jako odchozí adresa bug-reportù "
                   " apod.")
        _DEFAULT = None

    class _Option_clipboard_primary_selection(BooleanOption):
        _DESCR = _("Flag urèující, zda se má pøi exportu pou¾ít primary selection.")
        _DEFAULT = False

    class _Option_use_wx_clipboard(BooleanOption):
        _DESCR = _("Flag urèující, zda se má pro kopírování obsahu buòky pou¾ít wxClipboard")
        _DEFAULT = True

    class _Option_form_statistics(BooleanOption):
        _DESCR = _("Flag urèující, zda mají být do databáze ukládány statistické informace "
                   "o otevíraných formuláøích.")
        _DEFAULT = False
        
    # Volby pøizpùsobení u¾ivatelského rozhraní
        
    class _Option_show_tooltips(BooleanOption):
        _DESCR = _("Zobrazovat bublinovou nápovìdu.")
        _DEFAULT = True
        
    class _Option_stretch_tables(BooleanOption):
        _DESCR = _("Roztahovat sloupce tabulek, aby vyu¾ily celou ¹íøku okna.")
        _DEFAULT = True
        
    class _Option_show_splash(BooleanOption):
        _DESCR = _("Zobrazovat úvodní uvítací dialog.")
        _DEFAULT = True
        
    class _Option_auto_menu_accel(BooleanOption):
        _DESCR = _("Automaticky doplnit polo¾ky menu prefixy akcelerátorových kláves (zmìna "
                   "vy¾aduje restart aplikace).")
        _DEFAULT = True
        
    class _Option_cache_spec_onstart(BooleanOption):
        _DESCR = _("Pøíznak cachování specifikací pøi startu aplikace.")
        _DEFAULT = True

    class _Option_startup_forms(StringOption, CommandlineOption):
        _DESCR = _("Seznam formuláøù, které mají být otevøeny po spu¹tìní "
                   "aplikace.")
        _DEFAULT = None

    class _Option_row_focus_fg_color(ColorOption):
        _DESCR = _("Barva textu aktivního øádku tabulkového formuláøe.")
        _DEFAULT = '#ffffff'
        
    class _Option_row_focus_bg_color(ColorOption):
        _DESCR = _("Barva pozadí aktivního øádku tabulkového formuláøe.")
        _DOC   = _("Pokud barva není nastavena, bude pou¾ita systémová barva "
                   "zvýraznìní.  Barva je reprezentována øetìzcem '#RRGGBB'.")
        _DEFAULT = None
        
    class _Option_row_nofocus_fg_color(ColorOption):
        _DESCR = _("Barva textu neaktivního øádku tabulkového formuláøe.")
        _DEFAULT = '#000000'
        
    class _Option_row_nofocus_bg_color(ColorOption):
        _DESCR = _("Barva pozadí neaktivního øádku tabulkového formuláøe.")
        _DEFAULT = '#b6b6b6'
        
    class _Option_row_edit_fg_color(ColorOption):
        _DESCR = _("Barva textu editovaného øádku tabulkového formuláøe.")
        _DEFAULT = '#ffffff'

    class _Option_row_edit_bg_color(ColorOption):
        _DESCR = _("Barva pozadí editovaného øádku.")
        _DEFAULT = '#c80000'

    class _Option_cell_highlight_color(ColorOption):
        _DESCR = _("Barva zvýraznìní aktivní buòky tabulkového formuláøe.")
        _DEFAULT = '#ffa000'

    class _Option_grid_line_color(ColorOption):
        _DESCR = _("Barva møí¾ky tabulkového formuláøe.")
        _DEFAULT = '#6482be'

    class _Option_grouping_background_downgrade(ColorOption):
        _DESCR = _("Ztmavení barvy skupiny pøi seskupování øádkù.")
        _DOC = _("Proto¾e barva pozadí øádkù není v¾dy bílá, je tato hodnota "
                 "chápána jako relativní.  O kolik je zvolená barva tmav¹í "
                 "ne¾ bílá, o tolik bude výsledná barva skupiny tmav¹í, ne¾ "
                 "barva pozadí ostatních øádkù.  Barva je reprezentována "
                 "øetìzcem '#RRGGBB'.")
        _DEFAULT = '#eceef0'

    class _Option_field_disabled_color(ColorOption):
        _DESCR = _("Barva pozadí needitovatelného vstupního políèka.")
        _DEFAULT = '#d8d8d8'
        
    class _Option_field_denied_color(ColorOption):
        _DESCR = _("Pozadí políèka needitovatelného kvùli pøístupovým právùm.")
        _DEFAULT = '#e0e4f0'

    class _Option_field_hidden_color(ColorOption):
        _DESCR = _("Pozadí políèka se skrytou hodnotou.")
        _DEFAULT = '#404040'

    class _Option_field_invalid_color(ColorOption):
        _DESCR = _("Barva pozadí vstupního políèka pokud aktuální hodnota není validní.")
        _DEFAULT = '#ffffc0'
        
    class _Option_filter_color(ColorOption):
        _DESCR = _("Barva záhlaví tabulky pøi zapnutém filtrování.")
        _DEFAULT = '#82c882'

    # Metody

    def __init__(self):
        self._init_options()

    def add_command_line_options(self, command_line):
        """Nastav volby dle pøíkazové øádky.

        Argumenty:

          command_line -- volby pøíkazové øádky jako sekvence strings; typicky
            'sys.argv'

        """
        self._init_options(command_line=command_line)

    def _init_options(self, command_line=None):
        PREFIX = '_Option_'
        options = {}
        for k, v in self.__class__.__dict__.items():
            if starts_with(k, PREFIX):
                name = k[len(PREFIX):]
                options[name] = v(self)
        self.__dict__['_options'] = options
        if command_line is None:
            command_line_options = {}
        else:
            command_line_options = self._parse_command_line_options(command_line)
        self.__dict__['command_line_options'] = command_line_options
        for o in ('config_file', 'user_config_file'):
            if o in options:
                opt = options[o]
                opt.init_value()
                v = opt.value()
            else:
                v = None
            self.__dict__['_' + o] = v
        self._read_configuration()
        for o in options.values():
            o.init_value(force=True)

    def _parse_command_line_options(self, command_line):
        command_line_options = {}
        long_options = [o.long_option() for o in self._options.values()
                        if o.long_option() is not None]
        opts, args = getopt.getopt(command_line[1:], '', long_options)
        sys.argv[1:] = args
        for o, a in opts:
            try:
                arglist = command_line_options[o[2:]]
            except KeyError:
                arglist = []
                command_line_options[o[2:]] = arglist
            arglist.append(a)
        return command_line_options

    def _read_configuration(self):
        conffile = self._config_file
        if conffile is not None:
            self.__dict__['_config_mtime'] = self._read_configuration_file(conffile)
        uconffile = self._user_config_file
        if uconffile is not None:
            self.__dict__['_user_config_mtime'] = self._read_configuration_file(uconffile)

    def _read_configuration_file(self, filename=True):
        try:
            filetime = os.stat(filename)[stat.ST_MTIME]
        except:
            raise Exception(_("Unable to stat configuration file:"), filename)
        try:
            f = open(filename)
        except:
            raise Exception(_("Unable to open configuration file:"), filename)
        try:
            del sys.modules['_config']
        except:
            pass
        try:
            confmodule = imp.load_source('_config', filename, f)
        finally:
            f.close()
        options = self._options
        cloptions = self.command_line_options
        for o in dir(confmodule):
            if o in options:
                opt = options[o]
                if opt.long_option() not in cloptions:
                    value = confmodule.__dict__[o]
                    opt.set_value(value, initialization=False)
        for o in self._options.values():
            if not o.changed():
                o.reset()
        return filetime

    def read_configuration_file(self, filename):
        """Read options from given pytis configuration file.

        Previously set configuration values may get reset during that process.

        Arguments:

          filename -- name of the pytis configuration file, basestring
          
        """
        assert isinstance(filename, basestring), filename
        return self._read_configuration_file(filename)

    def __getattr__(self, name):
        """Return the current value of configuration option 'name'.

        'name' must be a string name of an existing configuration option.  'AttributeError' is
        raised if no such option exists.

        """
        if __debug__ and name not in ('config_file', 'user_config_file'):
            now = time.time()
            reread = False
            if self._config_file and now > self._config_mtime:
                t = os.stat(self._config_file)[stat.ST_MTIME]
                if t > self._config_mtime:
                    reread = True
            if not reread and self._user_config_file and now > self._user_config_mtime:
                ut = os.stat(self._user_config_file)[stat.ST_MTIME]
                if ut > self._user_config_mtime:
                    reread = True
            if reread:
                self._read_configuration()
        try:
            return self._options[name].value()
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        """Set the value of configuration option 'name'.

        'name' must be a string name of an existing configuration option.  'AttributeError' is
        raised if no such option exists.
        
        """
        if name == 'user_config_file':
            self.__dict__['_user_config_file'] = value
            self.__dict__['_user_config_mtime'] = 0
        if name in self.__dict__['_options']:
            self.__dict__['_options'][name].set_value(value)
        elif hasattr(self, name):
            self.__dict__[name] = value
        else:
            raise AttributeError(name)

    def merge(self, dict, override_cmdline=False):
        """Nastav aktuální konfiguraci z hodnot daného slovníku.

        Argumenty:
          dict -- slovník, ze kterého mají být pøevzaty nové hodnoty.
            Pøevezmou se pouze hodnoty klíèù, jejich¾ názvy odpovídají
            definovaným konfiguraèním volbám a to pouze v pøípadì, ¾e jsou
            definovány (obsahují jinou hodnotu ne¾ None).  Ostatní budou
            ignorovány.
          override_cmdline -- implicitnì nejsou pøenastavovány hodnoty pøevzaté
            z pøíkazové øádky.  Pravdivá hodnota tohoto argumentu zpùsobí, ¾e
            budou pøenastaveny v¹echny nalezené konfiguraèní volby vèetnì tìch
            z pøíkazového øádku.
            
        """
        options = self._options
        clopt = self.command_line_options
        for o in dict.keys():
            if o in options and dict[o] != None:
                opt = options[o]
                if override_cmdline or opt.long_option() not in clopt:
                    opt.set_value(dict[o])

    def dump_config_template(self, stream):
        """Write configuration file template to 'stream'.

        'stream' must be a stream opened for writing.

        """
        #stream.write('# -*- coding: iso-8859-2 -*-\n\n')
        from textwrap import wrap
        import pprint
        pp = pprint.PrettyPrinter()
        for option in self.options(sort=True):
            if option.visible():
                stream.write('# %s\n' % option.description())
                doc = option.documentation()
                if doc:
                    for line in wrap(doc, 77):
                        stream.write('# %s\n' % string.strip(line))
                value = option.default_string()
                indent = ' ' * (len(option.name()) + 3)
                stream.write('#%s = %s\n\n' % (option.name(), value.replace("\n", "\n#"+indent)))

    def options(self, sort=False):
        """Return a tuple of all configuration options as 'Configuration.Option' instances.

        If 'sort' is true, the options will be returned in the order of their definition.

        """
        options = self._options.values()
        if sort:
            def _cmp(o1, o2):
                return cmp(o1._class_definition_order, o2._class_definition_order)
            options.sort(_cmp)
        return tuple(options)

    def option(self, name):
        """Return the 'Configuration.Option' instance for the option of given 'name'.

        'name' must be a string name of an existing configuration option.  'AttributeError' is
        raised if no such option exists.

        """
        try:
            return self._options[name]
        except KeyError:
            raise AttributeError(name)
