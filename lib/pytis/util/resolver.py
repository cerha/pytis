# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001, 2002, 2005, 2006, 2008, 2009, 2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Resolvery jmenných odkazù.

Motivací pro zavedení resolveru je mo¾nost vzájemného provázání jednotlivých
formuláøù, specifikací a prvkù u¾ivatelského rozhraní (menu, tlaèítka apod.) na
základì jmen bez nutnosti vytváøet instance v¹ech odkazovaných objektù pøi
vytváøení objektu na nì se odkazujícího. Instance odkazovaných objektù jsou
vytvoøeny a¾ pøi jejich skuteèné potøebì pouze na základì znalosti jména.

"""

import imp
import sys

from pytis.util import *

global _current_resolver
_current_resolver = None

def resolver():
    """Vra» resolver pro získání specifikaèních instancí na základì jména."""
    global _current_resolver
    _current_resolver
    if _current_resolver is None:
        import config
        _current_resolver = FileResolver(config.def_dir)
    return _current_resolver

def set_resolver(resolver):
    """Nastav výchozí resolver vracený funkcí 'resolver()'.

    Výchozí resolver je vytvoøen automaticky jako instance 'FileResolver' nad
    adresáøem daným konfiguraèní volbou 'def_dir'.  Pokud chceme pou¾ít jiný
    resolver, je tøeba jej nastavit touto funkcí pøed inicializací aplikace.

    """
    assert isinstance(resolver, Resolver)
    global _current_resolver
    _current_resolver = resolver


class ResolverError(Exception):
    """Chyba resolvace.

    Tato tøída je spoleèným základem v¹ech tøíd signalizujících chybu
    resolvace.
    
    """


class ResolverModuleError(ResolverError):
    """Výjimka vyvolávaná pøi nedostupnosti ¾ádaného specifikaèního modulu."""

    def __init__(self, module_name, *args):
        """Inicializuj výjimku.

        Argumenty:

          module_name -- jméno nenalezeného specifikaèního modulu, string
          args -- dal¹í argumenty pøedané konstruktoru pøedka

        """
        msg = 'Specification module not found: %s, %s' % (module_name, args)
        super_(ResolverModuleError).__init__(self, msg)
    

class ResolverFileError(ResolverError):
    """Výjimka vyvolávaná nelze-li naèíst ¾ádaný specifikaèní soubor."""
    
    def __init__(self, file_name, path, exception):
        """Inicializuj výjimku.

        Argumenty:

          file_name -- jméno nenalezeného specifikaèního souboru, string
          path -- cesta ke specifikaèním souborùm, string
          exception -- výjimka, která problém signalizovala, instance tøídy
            'Exception' nebo 'None'
          
        """
        msg = 'Error importing specification file %s: %s %s' % (file_name, exception, path)
        super_(ResolverFileError).__init__(self, msg)


class ResolverSpecError(ResolverError):
    """Výjimka vyvolaná není-li ve specifikaèním modulu ¾ádaná funkce."""
    
    def __init__(self, module_name, spec_name):
        """Inicializuj výjimku.

        Argumenty:

          module_name -- jméno specifikaèního modulu, string
          spec_name -- jméno specfikaèní funkce, string
          
        """
        msg = 'Specification not found: %s, %s' % (module_name, spec_name)
        super_(ResolverSpecError).__init__(self, msg)


class Resolver(object):
    """Resolver umo¾òuje získat specifikaèní objekt na základì modulu a jména.

    Modulem se rozumí objekt, mù¾e a nemusí jím být pythonový modul,
    poskytující specifikace prostøednictvím funkcí vracejících instance
    specifikaèních objektù.  Specifikaèní jména odpovídají jménùm callable
    objektù modulu, resolver je schopen vracet pøímo tyto objekty (metoda
    'get_object()') nebo jimi vytvoøené instance (metoda 'get()').

    """
    def __init__(self):
        """Inicializuj resolver."""
        self._module_cache = SimpleCache(self._get_module)
        self._object_cache = SimpleCache(self._get_object)
        self._spec_cache = SimpleCache(self._get_spec)
        self._instance_cache = SimpleCache(self._get_instance)
    
    def _get_module(self, module_name):
        raise ResolverModuleError(module_name)

    def _get_object(self, key):
        module_name, spec_name = key
        module = self._module_cache[module_name]
        try:
            obj = getattr(module, spec_name)
        except AttributeError:
            raise ResolverSpecError(module_name, spec_name)
        return obj

    def _get_spec(self, key):
        module_name, spec_name, kwargs_items = key
        kwargs = dict(kwargs_items)
        if module_name.find('.') != -1:
            parts = module_name.split('.')
            module_name = os.path.join(*parts[:-1])
            class_name = parts[-1]
            instance = self.get_instance(module_name, class_name, self, **kwargs)
            try:
                method = getattr(instance, spec_name)
            except AttributeError:
                raise ResolverSpecError(module_name, spec_name)
            return method()
        else:
            obj = self.get_object(module_name, spec_name)
            return obj(self, **kwargs)

    def _get_instance(self, key):
        module_name, spec_name, args, kwargs_items = key
        class_ = self.get_object(module_name, spec_name)
        return class_(*args, **dict(kwargs_items))
        
    def get_object(self, module_name, spec_name):
        """Vra» po¾adovaný objekt z daného specifikaèního modulu.

        Argumenty:

          module_name -- jméno specifikaèního modulu
          spec_name -- jméno objektu ze specifikaèního modulu, neprázdný
            string
        
        Není-li modul 'module_name' nalezen, je vyvolána výjimka
        'ResolverModuleError'.  Je-li modul nalezen, av¹ak není v nìm
        nalezena tøída daná 'spec_name' nebo pokud 'spec_name' zaèíná
        podtr¾ítkem, je vyvolána výjimka 'ResolverSpecError'.

        """
        if not spec_name or spec_name[0] == '_':
            raise ResolverSpecError(module_name, spec_name)
        key = (module_name, spec_name)
        return self._object_cache[key]

    def get_module(self, module_name):
        """Vra» po¾adovaný modul.

        Argumenty:

          module_name -- jméno specifikaèního modulu
        
        Není-li modul 'module_name' nalezen, je vyvolána výjimka
        'ResolverModuleError'.

        """
        return self._get_module(module_name)

    def get_instance(self, module_name, spec_name, *args, **kwargs):
        # Nestaèí nám pouhé 'get_object', proto¾e tøída jako taková obsahuje
        # svùj modul, co¾ mù¾e èinit potí¾e pøi vzdáleném pøístupu pøes Pyro.
        """Vra» instanci po¾adované tøídy z daného specifikaèního modulu.

        Argumenty:

          module_name -- jméno specifikaèního modulu
          spec_name -- jméno veøejné tøídy ze specifikaèního modulu, neprázdný
            string

        Instance tøídy je vytvoøena voláním jejího konstruktoru s argumenty
        'args' a 'kwargs'.
        
        Není-li modul 'module_name' nalezen, je vyvolána výjimka
        'ResolverModuleError'.  Je-li modul nalezen, av¹ak není v nìm
        nalezena tøída daná 'spec_name' nebo pokud 'spec_name' zaèíná
        podtr¾ítkem, je vyvolána výjimka 'ResolverSpecError'.

        """
        key = (module_name, spec_name, tuple(args), tuple(kwargs.items()))
        return self._instance_cache[key]

    def get(self, module_name, spec_name, **kwargs):
        """Vra» specifikaci 'spec_name' ze specifikaèního modulu 'module_name'.

        Argumenty:

          module_name -- jméno specifikaèního modulu.          
          spec_name -- jméno specifikaèní funkce/metoda.
          kwargs -- klíèové argumenty specifikaèní funkce/metody.

        Pokud 'module_name' neobsahuje teèky, jde pøímo o jméno modulu.  V
        tomto modulu je vyhledána funkce 'spec_name', ta je spu¹tìna s instancí
        resolveru jako prvním pozièním argumentem a danými klíèovými argumenty
        a výsledek je vrácen.

        Pokud 'module_name' obsahuje teèky, jde o název modulu a tøídy v nìm
        obsa¾ené.  Název modulu mù¾e v tomto pøípadì také obsahovat názvy
        adresáøù (oddìlené rovnì¾ teèkami).  Napøíklad název
        'ucetnictvi.denik.UcetniDenik' znamená, ¾e v adresáøi 'ucetnictvi' bude
        hledán soubor 'denik.py' a v nìm tøída 'UcetniDenik'.  Pokud je tøída
        nalezena, je vytvoøena její instance (konstruktoru je pøedána instance
        resolveru jako první pozièní argument) a nad ní zavolána metoda
        'spec_name', té jsou pøedány dané klíèové argumenty a výsledek je
        vrácen.
          
        Není-li modul 'module_name' nalezen, je vyvolána výjimka
        'ResolverModuleError'.  Je-li modul nalezen, av¹ak není v nìm
        nalezena specifikace 'spec_name', je vyvolána výjimka
        'ResolverSpecError'.
        
        """        
        key = (module_name, spec_name, tuple(kwargs.items()))
        return self._spec_cache[key]
        

class FileResolver(Resolver):
    """Resolver natahující moduly ze specifikaèních souborù.

    Specifikaèní soubory jsou hledány v adresáøi zadaném v konstruktoru
    resolveru.  Jména specifikaèních souborù musí zaèínat velkým písmenem.

    """
    def __init__(self, path):
        """Inicializuj resolver.

        Argumenty:

          path -- cesta ke specifikaèním souborùm; string, nebo sekvence
            stringù

        """
        super(FileResolver, self).__init__()
        self._path = xlist(path)
        
    def _get_module(self, name):
        module = sys.modules.get(name)
        if module is None:
            file = None
            try:
                try:
                    file, pathname, descr = imp.find_module(name, self._path)
                    module = imp.load_module(name, file, pathname, descr)
                except ImportError, e:
                    raise ResolverFileError(name, self._path, e)
            finally:
                if file is not None:
                    file.close()
        return module


class ProxyResolver(Resolver):
    """Resolver vyu¾ívající pro získávání dat jiný resolver.

    Tento resolver umo¾òuje \"øetìzit\" instance resolverù.  V konstruktoru je
    zadána instance jiného resolveru a proxy resolver z ní vytahuje v¹echny
    specifikace.

    Hlavní smysl této tøídy je umo¾nit dynamicky roz¹íøit existující instanci
    resolveru a dal¹í specifikace.

    """
    def __init__(self, resolver, **kwargs):
        """Inicializuj instanci.

        Argumenty:

          resolver -- resolver, ze kterého jsou specifikace získávány, instance
            tøídy 'Resolver'
          kwargs -- pøedává se konstruktoru pøedka

        """
        super(ProxyResolver, self).__init__(**kwargs)
        self._resolver = resolver

    def _get_module(self, module_name):
        return self._resolver._get_module(module_name)
