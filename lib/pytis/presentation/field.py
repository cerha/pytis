# -*- coding: iso-8859-2 -*-

# Prezentace dat v políèkách.
# 
# Copyright (C) 2002, 2003, 2004, 2005 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Prezentace dat v políèkách.

_Políèkem_ se zde rozumí abstraktní element u¾ivatelského rozhraní pøijímající
textová data, nikoliv konkrétní forma zobrazení dat.

"""

import copy

import pytis.data

from pytis.presentation import *
from pytis.util import *


class PresentedRow:
    """Øádek prezentovaných dat.

    Tøída je mezièlánkem mezi datovým øádkem a jeho finální prezentací.  Na
    rozdíl od datového øádku obsahuje v¹echna políèka dané specifikacemi
    políèek 'FieldSpec'.  Na druhou stranu ale ji¾ neøe¹í konkrétní prezentaci
    dat pøesahující jejich zformátování do stringu.

    """
    class _Column:
        def __init__(self, id_, type_, computer, separator, line_separator,
                     default, editable, check, codebook_runtime_filter):
            self.id = id_
            self.type = type_
            self.computer = computer
            self.separator = separator
            self.line_separator = line_separator
            self.default = default
            self.editable = editable
            self.check = check
            self.codebook_runtime_filter = codebook_runtime_filter
            
    def __init__(self, fieldspec, data, row, prefill=None, singleline=False,
                 change_callback=None, enable_field_callback=None,
                 disable_field_callback=None, new=False):
        """Inicializuj prezentaci øádku.
        
        Argumenty:

          fieldspec -- sekvence specifikací políèek, instancí tøídy
            'FieldSpec'
          data -- odpovídající datový objekt, instance tøídy 'pytis.data.Data'
          row -- data øádku, viz ní¾e
          prefill -- slovník hodnot pro inicializaci øádku namísto výchozích
            hodnot. Slovník je klíèovaný pøes textový identifikátor sloupce.
            Hodnotami jsou instance tøídy Value, v pøípadì nového záznamu
            (argument 'row' je 'None') mohou být pou¾ity i u¾ivatelské hodnoty.
            Takto lze pøedvyplòit pouze políèka, k nim¾ existuje odpovídající
            sloupec v datovém objektu -- plnì virtuální políèka mají hodnotu
            v¾dy urèenou pomocí computeru (viz. argument 'computer'
            konstruktoru tøídy 'FieldSpec').
          singleline -- právì kdy¾ je pravdivé, stringové hodnoty v¹ech políèek
            budou zformátovány jako jednoøádkové
          change_callback -- funkce jednoho argumentu (id políèka) volaná pøi
            nepøímé zmìnì políèka (tj. pøi pøepoèítávání hodnot), která
            oznamuje \"neèekané\" zmìny políèek v prezentovaném row; je-li
            'None', není ¾ádná taková funkce volána
          enable_field_callback -- funkce jednoho argumentu (id políèka) volaná
            pøi nepøímé zmìnì editovatelnosti políèka.  Tato funkce oznamuje,
            ¾e v dùsledku zmìny v políèkách, na kterých editovatelnost daného
            políèka závisí se dané políèko stalo editovatelným; je-li 'None',
            není ¾ádná taková funkce volána
          disable_field_callback -- funkce jednoho argumentu (id políèka)
            volaná, kdy¾ se políèko stává needitovatelným - obdoba
            'enable_field_callback'
          new -- flag urèující, zda se jedná o novì vytváøený záznam (nikoliv
            editaci záznamu ji¾ existujícího)

        Prezentaèní podoba je vytvoøena z dat specifikovaných argumentem 'row',
        který mù¾e mít nìkterou z následujících hodnot:

          None -- bude vytvoøen zbrusu nový øádek odpovídající 'fieldspec'
          instance 'PresentedRow' -- bude vytvoøena kopie zadaného øádku, oba
            musí mít shodnou specifikaci políèek
          instance 'pytis.data.Row' -- bude vytvoøena prezentace z daného
            datového øádku

        Ve v¹ech pøípadech je rozhodující podoba 'row' v okam¾iku volání tohoto
        konstruktoru, pozdìj¹í pøípadné destruktivní zmìny 'row' nemají na novì
        vytvoøenou instanci tøídy 'PresentedRow' vliv.

        """
        assert is_sequence(fieldspec)
        # TODO: pytis.remote vy¾aduje inicializaci Pyro, co¾ není v¾dy to pravé
        # oøechové.  `data' by stejnì mìlo být jednotného typu, je tøeba to
        # nìjak promyslet.
#         assert isinstance(data, pytis.data.Data) or \
#                isinstance(data, pytis.remote.RemoteData)
        self._fieldspec = fieldspec
        self._data = data
        self._singleline = singleline
        self._change_callback = change_callback
        self._enable_field_callback = enable_field_callback
        self._disable_field_callback = disable_field_callback
        self._process_fieldspec()
        self._row = self._init_row(row, prefill=prefill)
        self._original_row = copy.copy(self._row)
        self._new = new
        self._cache = {}
        self._invoke_callbacks()
        self._recompute_dependencies()

    def _process_fieldspec(self):
        data = self._data
        # Pro ka¾dé políèko si zapamatuji seznam poèítaných políèek, která na
        # nìm závisí (obrácené mapování ne¾ ve specifikacích).
        self._dependent = {}
        self._editability_dependent = {}
        self._codebook_runtime_filter_dependent = {}
        # Pro v¹echna poèítaná políèka si pamatuji, zda potøebují pøepoèítat,
        # èi nikoliv (po pøepoèítání je políèko èisté, po zmìnì políèka na
        # kterém závisí jiná políèka nastavím závislým políèkùm pøíznak dirty).
        # Pøepoèítávání potom mohu provádìt a¾ pøi skuteèném po¾adavku na
        # získání hodnoty políèka.
        self._dirty = {}
        self._editability_dirty = {}
        self._editable = {}
        self._columns = {}
        self._refvalues = {}
        for f in self._fieldspec:
            key = f.id()
            c = self._Column(key, f.type(data), f.computer(), f.separator(),
                             f.line_separator(), f.default(), f.editable(),
                             f.check(), f.codebook_runtime_filter())
            self._columns[key] = c
            if c.computer is not None:
                self._dirty[key] = True
                for dep in c.computer.depends():
                    if self._dependent.has_key(dep):
                        self._dependent[dep].append(key)
                    else:
                        self._dependent[dep] = [key]
            if isinstance(c.editable, Computer):
                self._editable[key] = True
                self._editability_dirty[key] = True
                for dep in c.editable.depends():
                    if self._editability_dependent.has_key(dep):
                        self._editability_dependent[dep].append(key)
                    else:
                        self._editability_dependent[dep] = [key]
            if c.codebook_runtime_filter is not None:
                for dep in c.codebook_runtime_filter.depends():
                    if self._codebook_runtime_filter_dependent.has_key(dep):
                        self._codebook_runtime_filter_dependent[dep].append(key)
                    else:
                        self._codebook_runtime_filter_dependent[dep] = [key]
                provider = c.codebook_runtime_filter.function()
                c.type.set_runtime_filter_provider(provider, (self,))
                        
    def _init_row(self, row, prefill=None):
        self._cache = {}
        if row is None:
            def genval(c):
                id = c.id()
                if prefill is not None and prefill.has_key(id):
                    value = prefill[id]
                    if not isinstance(value, pytis.data.Value):
                        value = pytis.data.Value(c.type(), value)
                    else:
                        # Pro Codebooky radìji taky vytvoøíme novou
                        # instanci
                        value = pytis.data.Value(c.type(), value.value())
                    if self._dirty.has_key(id):
                        self._dirty[id] = False
                else:
                    if self._columns.has_key(id):
                        field = self._columns[id]
                        default = field.default
                        t = field.type
                        if default is None:
                            value = t.default_value()
                        else:
                            value = pytis.data.Value(t, default())
                            if self._dirty.has_key(id):
                                self._dirty[id] = False
                    else:
                        value = c.type().default_value()
                return id, value
            for id in self._dirty.keys():
                self._dirty[id] = True
            row_data = map(genval, self._data.columns())
            row = pytis.data.Row(row_data)
        else:
            if isinstance(row, pytis.data.Row):
                row = copy.copy(row)
            elif isinstance(row, PresentedRow):
                row = copy.copy(row._row)
            else:
                raise Exception('Invalid argument row:', row)
            if prefill is not None:
                row.update(prefill)
            for id in self._dirty.keys():
                self._dirty[id] = not row.has_key(id)
        return row

    def __getitem__(self, key):
        """Vra» hodnotu políèka 'key' jako instanci tøídy 'pytis.data.Value'.
        
        'key' je id políèka (øetìzec) identifikující existující políèko, jinak
        je chování metody nedefinováno.
        
        """
        column = self._columns[key]
        if column.computer and self._needs_recomputation(column.id):
            value = pytis.data.Value(column.type, self._compute(column))
        else:
            value = self._row[column.id]
        return value

    def __setitem__(self, key, value):
        assert isinstance(value, pytis.data.Value)
        self._cache = {}
        # Pokus o nastavení virtuálních políèek ti¹e ignorujeme...
        if self._row.has_key(key) and self._row[key] != value:
            self._row[key] = value
            if self._mark_dependent_dirty(key):
                self._invoke_callbacks()
            self._recompute_dependencies(key)
                
    def __str__(self):
        items = []
        for spec in self._fieldspec:
            items.append(spec.id() + '=' + str(self[spec.id()]))
        return '<PresentedRow: %s>' % string.join(items, ', ')

    def _mark_dependent_dirty(self, key):
        # Rekurzivnì oznaè závislá políèka.
        # Vra» pravdu, pokud k oznaèení nìjakých políèek do¹lo.
        if self._dependent.has_key(key):
            for id in self._dependent[key]:
                self._dirty[id] = True
                self._mark_dependent_dirty(id)
            return True
        else:
            return False
    
    def _invoke_callbacks(self):
        # Zavolej `chage_callback' pro v¹echna ``dirty'' políèka.
        if self._change_callback is not None:
            keys = filter(lambda key: self._dirty[key], self._dirty.keys())
            for key in keys:
                self._change_callback(key)

    def _needs_recomputation(self, id):
        # Vra» pravdu, pokud jde o poèítané políèko, které je tøeba vypoèítat.
        return not self._row.has_key(id) or self._dirty[id]

    def _compute(self, column):
        # Vypoèti a vra» aktuální hodnotu políèka (jako Pythonovou hodnotu).
        id = column.id
        value = column.computer.function()(self)
        self._dirty[id] = False
        if self._row.has_key(id):
            self._row[id] = pytis.data.Value(column.type, value)
        return value

    def _recompute_dependencies(self, key=None):
        # recompute dependencies for all fields when key is None or recompute
        # just fields depending on a field specified by key (after its change).
        self._recompute_editability(key)
        self._recompute_codebook_runtime_filter(key)
    
    def _recompute_editability(self, key=None):
        if key is None:
            ids = self._editable.keys()
        elif self._editability_dependent.has_key(key):
            ids = self._editability_dependent[key]
        else:
            return
        for id in ids:
            if self._enable_field_callback or self._disable_field_callback:
                old = self._editable[id]
                self._editable[id] = new = self._compute_editability(id)
                self._editability_dirty[id] = False
                if not old and new and self._enable_field_callback:
                    self._enable_field_callback(id)
                if old and not new and self._disable_field_callback:
                    self._disable_field_callback(id)
            else:
                self._editability_dirty[id] = True

    def _compute_editability(self, key):
        # Vypoèti editovatelnost políèka a vra» výsledek (jako boolean).
        func = self._columns[key].editable.function()
        return func(self, key)
    
    def _recompute_codebook_runtime_filter(self, key=None):
        if key is None:
            ids = [id for id in self._columns.keys()
                   if self._columns[id].codebook_runtime_filter is not None]
        elif self._codebook_runtime_filter_dependent.has_key(key):
            ids = self._codebook_runtime_filter_dependent[key]
        else:
            return
        for id in ids:
            c = self._columns[id]
            c.type.notify_runtime_filter_change()
 

    def row(self):
        """Vra» aktuální datový øádek, jako instanci 'pytis.data.Row'.

        Typy sloupcù takto vráceného øádku jsou shodné s typy z datového
        objektu, pro sloupce v datovém objektu pøítomné.

        """
        data = self._data
        row_data = []
        for id, value in self._row.items():
            c = data.find_column(id)
            if c is None:
                ok_value = value
            elif self._dirty.has_key(id) and self._dirty[id]:
                ok_value = pytis.data.Value(c.type(),
                                          self._compute(self._columns[id]))
            else:
                ok_value = pytis.data.Value(c.type(), value.value())
            row_data.append((id, ok_value))
        result = pytis.data.Row(row_data)
        return result

    def data(self):
        """Vra» odpovídající datový objekt øádku."""
        return self._data

    def format(self, key, **kwargs):
        """Vra» stringovou hodnotu políèka 'key'.

        Argumenty:

          'key' -- id políèka (øetìzec) identifikující existující políèko,
            jinak je chování metody nedefinováno.
          'kwargs' -- klíèové argumenty které budou pou¾ity pøi volání metody
            'export()' pro získáné øetìzcové reprezentace hodnoty.
        
        """
        try:
            return self._cache[key]
        except KeyError:
            pass
        column = self._columns[key]
        if column.computer and self._needs_recomputation(column.id):
            value = self._compute(column)
            try:
                svalue = column.type.export(value, **kwargs)
            except Exception, e:
                raise ProgramError("Computer returned an incopatible value:",
                                   key, column.computer.function(),
                                   value, type(value))
        else:
            try:
                value = self._row[column.id]
            except KeyError:
                # Mù¾e nastat napøíklad v pøípadì, kdy k danému sloupci nejsou
                # pøístupová práva.
                svalue = None
            else:
                svalue = value.export(**kwargs)
        if svalue is None:
            svalue = ''
        if self._singleline and column.line_separator is not None:
            svalue = string.join(svalue.splitlines(), column.line_separator)
        self._cache[key] = svalue
        assert not is_sequence(svalue)
        return svalue

    def set_row(self, row, reset=False):
        """Nastav aktuální data na 'row'.

        'row' má stejný význam jako stejnojmenný argument metody '__init__()'.

        Pravdivá hodnota argumentu 'reset' zpùsobí to, ¾e tato nová hodnota
        øádku bude nadále pova¾ována za pùvodní, co¾ má vliv na funkci metod
        'changed()' a 'original_row()'.

        Tuto metodu je vhodné vyu¾ívat pro koncepci aktuálního øádku v tabulce
        s nemìnnými sloupci a datovým objektem.  U¹etøí se tak chroustání
        specifikací uvnitø této tøídy.
        
        """
        self._row = self._init_row(row)
        if reset:
            self._original_row = copy.copy(self._row)
        self._invoke_callbacks()
        self._recompute_dependencies()

    def fields(self):
        """Vra» seznam v¹ech políèek."""
        return self._fieldspec
        
    def has_key(self, key):
        """Vra» pravdu, pokud je políèko daného klíèe v øádku obsa¾eno."""
        return self._columns.has_key(key)
        
    def keys(self):
        """Vra» seznam identifikátorù v¹ech políèek obsa¾ených v tomto øádku."""
        return self._columns.keys()
        
    def original_row(self):
        """Vra» øádek obsahující pùvodní hodnoty øádku pøed pøípadnými zmìnami.

        Vrácená hodnota je instance 'pytis.data.Row' nebo 'None', ne nutnì
        toto¾ná (ve smyslu 'id()') s øádkem zadaným v konstruktoru.

        Pozor, pokud byl øádek pøedaný konstruktoru `None', metoda sice vrátí
        inicializovaný prázdný øádek, ale hodnoty poèítaných políèek v nìm
        nebudou být vypoèteny.
        
        """
        return self._original_row

    def changed(self):
        """Vra» pravdu, právì kdy¾ byl øádek zmìnìn.

        Øádek se pova¾uje za zmìnìný, není-li shodný s øádkem vytvoøeným z dat
        zadaných v konstruktoru, ve smyslu operátoru `='.

        """
        return self._row != self._original_row

    def field_changed(self, key):
        """Vra» pravdu, právì kdy¾ bylo políèko dané 'key' zmìnìno.

        """
        if not self._row.has_key(key):
            return False
        return self._row[key] != self._original_row[key]

    def new(self):
        """Vra» pravdu, právì kdy¾ se jedná o nový záznam."""
        return self._new
    
    def editable(self, key):
        """Vra» pravdu, právì kdy¾ je políèko dané 'key' editovatelné.

        Význam argumentu 'key' je stejný jako v metodì '__getitem__'.

        """
        editable = self._columns[key].editable
        if self._editable.has_key(key):
            if self._editability_dirty[key]:
                self._editable[key] = self._compute_editability(key)
                self._editability_dirty[key] = False
            return self._editable[key]
        else:
            return editable == Editable.ALWAYS or \
                   (editable == Editable.ONCE and self._new)

    # Nakonec to není nikde potøeba, ale kdyby, staèí odkomentovat a dopsat
    # test...
    #def accessible(self, key, permission):
    #    """Vra» pravdu, právì kdy¾ má u¾ivatel právo pøístupu k danému políèku.
    #
    #    Argumenty:
    #    
    #      'key' -- stejnì jako v metodì '__getitem__'.
    #      'permission' -- jedna z konstant tøídy 'pytis.data.Permission'
    #        urèující, které pøístupové právo se má testovat.
    #
    #    Pokud dané políèko není souèástí datového øádku (jde o virtuální
    #    políèko), vrací v¾dy None.
    #        
    #    """
    #    if self._row.has_key(key):
    #        return self._data.accessible(key, permission)
    #    else:
    #        return None

    def check(self):
        """Proveï kontrolu vzájemné integrity dat øádku.
        
        Metoda provede v¹echny existující 'check' funkce definované ve
        'FieldSpec' obsa¾ených políèek.  Pøi neúspìchu kontroly nìkterého
        políèka není provádìna ¾ádná akce, pouze je vráceno id tohoto políèka a
        provedeno zalogování.  Oèekává se, ¾e pøípadná interakce s u¾ivatelem
        je provádìna v rámci check funkce.

        Vrací: Id políèka, pokud nìkterá kontrolní funkce neprojde, nebo None v
        pøípadì, ¾e je v¹e v poøádku.

        """
        # TODO: Tato metoda bude zru¹ena, hned jak se pøestanou pou¾ívat funkce
        # 'check' ve 'FieldSpec', které¾to mají být nahrazeny stejnojmennou
        # funkcí ve 'ViewSpec', ke které zde v¹ak není pøístup, tak¾e se volá
        # na úrovni formuláøe.
        for spec in self._fieldspec:
            c = self._columns[spec.id()]
            if c.check is not None and not c.check(self):
                log(EVENT, 'Kontrola integrity selhala:', (c.id, self))
                return c.id
        return None

    def listfield_choose(self, key, value):
        """O¹etøi výbìr polo¾ky u ListField políèka."""

        self._refvalues[key] = value
        self._dirty[key] = True
        if self._mark_dependent_dirty(key):
            self._invoke_callbacks()
        
    def refvalue(self, key):
        """Vrátí vybranou hodnotu z ListField.

        Typickým pou¾itím je zji¹tìní vybrané hodnoty v computerech,
        které jsou závislé na ListFieldu.
        """
        
        if self._refvalues.has_key(key):
            return self._refvalues[key]
        return None
