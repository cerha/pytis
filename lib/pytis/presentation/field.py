# -*- coding: iso-8859-2 -*-

# Prezentace dat v políèkách.
# 
# Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Prezentace dat v políèkách.

_Políèkem_ se zde rozumí abstraktní element u¾ivatelského rozhraní pøijímající
textová data, nikoliv konkrétní forma zobrazení dat.

"""

import copy

import pytis.data

from pytis.presentation import *
from pytis.util import *


class PresentedRow(object):
    """Øádek prezentovaných dat.

    Tøída je mezièlánkem mezi datovým øádkem a jeho finální prezentací.  Na
    rozdíl od datového øádku obsahuje v¹echna políèka dané specifikacemi
    políèek 'FieldSpec'.  Na druhou stranu ale ji¾ neøe¹í konkrétní prezentaci
    dat pøesahující jejich zformátování do stringu.

    """
    class _Column:
        def __init__(self, f, data):
            self.id = f.id()
            self.type = f.type(data)
            self.computer = f.computer()
            self.line_separator = f.line_separator()
            self.default = f.default()
            self.editable = f.editable()
            self.display = f.display()
            self.codebook = f.codebook(data)
            self.codebook_runtime_filter = f.codebook_runtime_filter()
            
    def __init__(self, fieldspec, data, row, prefill=None, singleline=False,
                 change_callback=None, editability_change_callback=None,
                 new=False, resolver=None):
        """Inicializuj prezentaci øádku.
        
        Argumenty:

          fieldspec -- sekvence specifikací políèek, instancí tøídy
            'FieldSpec'
            
          data -- odpovídající datový objekt, instance tøídy 'pytis.data.Data'
          
          row -- data øádku, viz ní¾e
          
          prefill -- slovník hodnot pro inicializaci øádku namísto výchozích
            hodnot.  Slovník je klíèovaný pøes textový identifikátor sloupce.
            Hodnotami jsou instance tøídy Value, nebo pøímo vnitøní hodnoty.
            Takto pøedvyplnìné hodnoty mají pøednost nejen pøed výchozími
            hodnotami urèenými specifikací 'default' pøíslu¹ného políèka, ale
            také pøed hodnotami dopoètenými pomocí jeho dopoèítávací funkce
            ('computer').
            
          singleline -- právì kdy¾ je pravdivé, stringové hodnoty v¹ech políèek
            budou zformátovány jako jednoøádkové
            
          change_callback -- funkce jednoho argumentu (id políèka) volaná pøi
            nepøímé zmìnì políèka (tj. pøi pøepoèítávání hodnot), která
            oznamuje \"neèekané\" zmìny políèek v prezentovaném row; je-li
            'None', není ¾ádná taková funkce volána
            
          editability_change_callback -- funkce dvou argumentù (id políèka,
            pøíznak editovatelnosti) volaná pøi nepøímé zmìnì editovatelnosti
            políèka.  Voláním této funkce øádek oznamuje, ¾e v dùsledku zmìny v
            jiných políèkách se dané políèko stalo editovatelným (druhý
            argument je pravdivý), èi naopak (druhý argument je nepravdivý);
            je-li 'None', není zmìna editovatelnosti oznamována.
            
          new -- flag urèující, zda se jedná o novì vytváøený záznam (nikoliv
            editaci záznamu ji¾ existujícího)
            
          resolver -- instance 'Resolver', která má být pou¾ívána k naèítání
            specifikací.  Pokud není urèen, je pou¾it globální resolver získaný
            pomocí funkce 'pytis.util.resolver()'.  Globální resolver je
            pou¾itelný v samostatnì bì¾ící aplikaci, ale napø. v prostøedí
            webového serveru je tøeba pracovat s více resolvery souèasnì a ty
            je potom nutné pøedávat jako argument.

        Prezentaèní podoba je vytvoøena z dat specifikovaných argumentem 'row',
        který mù¾e mít nìkterou z následujících hodnot:

          None -- bude vytvoøen zbrusu nový øádek odpovídající 'fieldspec'
          instance 'PresentedRow' -- bude vytvoøena kopie zadaného øádku, oba
            musí mít shodnou specifikaci políèek
          instance 'pytis.data.Row' -- bude vytvoøena prezentace z daného
            datového øádku

        Ve v¹ech pøípadech je rozhodující podoba 'row' v okam¾iku volání tohoto
        konstruktoru, pozdìj¹í pøípadné destruktivní zmìny 'row' nemají na novì
        vytvoøenou instanci tøídy 'PresentedRow' vliv.

        """
        assert is_sequence(fieldspec)
        # TODO: pytis.remote vy¾aduje inicializaci Pyro, co¾ není v¾dy to pravé
        # oøechové.  `data' by stejnì mìlo být jednotného typu, je tøeba to
        # nìjak promyslet.
        #assert isinstance(data, pytis.data.Data) or \
        #       isinstance(data, pytis.remote.RemoteData)
        assert row is None or isinstance(row, (PresentedRow, pytis.data.Row))
        assert change_callback is None or callable(change_callback)
        assert editability_change_callback is None or \
               callable(editability_change_callback)
        assert prefill is None or isinstance(prefill, dict)
        assert isinstance(singleline, bool)
        assert isinstance(new, bool)
        assert resolver is None or isinstance(resolver, Resolver)
        self._fieldspec = fieldspec
        self._data = data
        self._singleline = singleline
        self._change_callback = change_callback
        self._editability_change_callback = editability_change_callback
        self._new = new
        self._cache = {}
        self._resolver = resolver or pytis.util.resolver()
        self._columns = columns = dict([(f.id(), self._Column(f, data))
                                        for f in self._fieldspec])
        self._init_dependencies()
        if prefill:
            V = pytis.data.Value
            prefill = dict([(k, V(columns[k].type,
                                  isinstance(v, V) and v.value() or v))
                            for k, v in prefill.items()])
        self._set_row(row, prefill=prefill)
        self._virtual = dict([(k, self._default(k, prefill=prefill))
                              for k in columns.keys()
                              if data.find_column(k) is None])

    def _set_row(self, row, reset=True, prefill=None):
        self._row = self._init_row(row, prefill=prefill)
        if reset:
            self._original_row = copy.copy(self._row)
            self._original_row_empty = row is None
        self._resolve_dependencies()

    def _all_deps(self, depends):
        all = []
        for key in depends:
            all.append(key)
            computer = self._columns[key].computer
            if computer:
                all.extend(self._all_deps(computer.depends()))
        return all
        
    def _init_dependencies(self):
        # Pro ka¾dé políèko si zapamatuji seznam poèítaných políèek, která na
        # nìm závisí (obrácené mapování ne¾ ve specifikacích).
        self._dependent = {}
        self._editability_dependent = {}
        self._codebook_runtime_filter_dependent = {}
        # Pro v¹echna poèítaná políèka si pamatuji, zda potøebují pøepoèítat,
        # èi nikoliv (po pøepoèítání je políèko èisté, po zmìnì políèka na
        # kterém závisí jiná políèka, nastavím závislým políèkùm pøíznak
        # dirty).  Pøepoèítávání potom mohu provádìt a¾ pøi skuteèném po¾adavku
        # na získání hodnoty políèka.
        self._dirty = {}
        self._editability_dirty = {}
        self._editable = {}
        for key, c in self._columns.items():
            if c.computer is not None:
                self._dirty[key] = True
                for dep in c.computer.depends():
                    if self._dependent.has_key(dep):
                        self._dependent[dep].append(key)
                    else:
                        self._dependent[dep] = [key]
            if isinstance(c.editable, Computer):
                self._editable[key] = True
                self._editability_dirty[key] = True
                for dep in self._all_deps(c.editable.depends()):
                    if self._editability_dependent.has_key(dep):
                        self._editability_dependent[dep].append(key)
                    else:
                        self._editability_dependent[dep] = [key]
            if c.codebook_runtime_filter is not None:
                for dep in self._all_deps(c.codebook_runtime_filter.depends()):
                    if self._codebook_runtime_filter_dependent.has_key(dep):
                        self._codebook_runtime_filter_dependent[dep].append(key)
                    else:
                        self._codebook_runtime_filter_dependent[dep] = [key]
                provider = c.codebook_runtime_filter.function()
                e = c.type.enumerator()
                e.set_runtime_filter_provider(provider, (self,))
                
    def _init_row(self, row, prefill=None):
        self._cache = {}
        if row is None:
            for key in self._dirty.keys():
                self._dirty[key] = True
            row_data = [(c.id(), self._default(c.id(), prefill=prefill))
                        for c in self._data.columns()]
            row = pytis.data.Row(row_data)
        else:
            if isinstance(row, pytis.data.Row):
                row = copy.copy(row)
            elif isinstance(row, PresentedRow):
                row = copy.copy(row._row)
            else:
                raise Exception('Invalid argument row:', row)
            if prefill:
                row.update(prefill)
            for key in self._dirty.keys():
                self._dirty[key] = not row.has_key(key)
        return row

    def _default(self, key, prefill=None):
        if prefill and prefill.has_key(key):
            value = prefill[key]
            if self._dirty.has_key(key):
                # Prefill má pøednost pøed computerem, proto¾e nìkdy
                # chceme v procedurách mít mo¾nost ve formuláøi za
                # nìjakých okolností pøednastavit jinou hodnotu, ne¾
                # jaká by byla computerem normálnì vypoètena.
                self._dirty[key] = False
        elif self._columns.has_key(key):
            col = self._columns[key]
            default = col.default
            if self._new and default is not None:
                if callable(default):
                    default = default()
                value = pytis.data.Value(col.type, default)
                if self._dirty.has_key(key):
                    self._dirty[key] = False
            else:
                value = col.type.default_value()
        else:
            value = self._data.find_column(key).type().default_value()
        return value

    def __getitem__(self, key):
        """Vra» hodnotu políèka 'key' jako instanci tøídy 'pytis.data.Value'.
        
        'key' je id políèka (øetìzec) identifikující existující políèko, jinak
        je chování metody nedefinováno.
        
        """
        if self._row.has_key(key):
            value = self._row[key]
        else:
            value = self._virtual[key]
        if self._dirty.has_key(key) and self._dirty[key]:
            column = self._columns[key]
            # Nastavením dirty na False u¾ zde zamezíme rekurzi v pøípadì, ¾e
            # se kód computeru ptá na vlastní hodnotu a umo¾níme mu tak zjistit
            # pùvodní hodnotu (pøed pøepoèítáním).
            self._dirty[key] = False
            func = column.computer.function()
            new_value = pytis.data.Value(column.type, func(self))
            if new_value.value() != value.value():
                value = new_value
                if self._row.has_key(key):
                    self._row[key] = value
                else:
                    self._virtual[key] = value
                if self._change_callback is not None:
                    self._change_callback(key)
        return value

    def __setitem__(self, key, value):
        assert isinstance(value, pytis.data.Value)
        column = self._columns[key]
        assert value.type() == column.type, \
               "Invalid type for '%s': %s (expected %s)" % \
               (key, value.type(), column.type)
        self._cache = {}
        if self._row.has_key(key) and self._row[key] != value:
            self._row[key] = value
        elif self._virtual.has_key(key) and self._virtual[key] != value:
            self._virtual[key] = value
        else:
            return
        self._resolve_dependencies(key)
                
    def __str__(self):
        if hasattr(self, '_row'):
            items = []
            for spec in self._fieldspec:
                items.append(spec.id() + '=' + str(self[spec.id()]))
            return '<PresentedRow: %s>' % string.join(items, ', ')
        else:
            return super(PresentedRow, self).__str__()

    def _mark_dependent_dirty(self, key):
        # Rekurzivnì oznaè závislá políèka.
        # Vra» pravdu, pokud k oznaèení nìjakých políèek do¹lo.
        if self._dependent.has_key(key):
            for k in self._dependent[key]:
                self._dirty[k] = True
                self._mark_dependent_dirty(k)
            return True
        else:
            return False
    
    def _resolve_dependencies(self, key=None):
        # Recompute dependencies for all fields when key is None or recompute
        # just fields depending on a given field (after its change).
        # TODO: Musí se to dìlat v¾dy?  Napø. i pøi set_row z BrowseFormu?
        if key is None:
            invoke_callbacks = False
        else:
            invoke_callbacks = self._mark_dependent_dirty(key)
        self._notify_runtime_filter_change(key)
        self._recompute_editability(key)
        if invoke_callbacks and self._change_callback is not None:
            # Zavolej 'chage_callback' pro v¹echna zbylá "dirty" políèka.
            # Políèka, která byla oznaèena jako "dirty" ji¾ buïto byla
            # pøepoèítána a callback byl zavolán bìhem pøepoèítávání
            # editovatelnosti a runtime codebookù, nebo zùstala "dirty" a
            # musíme tedy jejich callback zavolat teï.
            dirty = [k for k in self._dirty.keys() if self._dirty[k]]
            for k in dirty:
                self._change_callback(k)
    
    def _recompute_editability(self, key=None):
        if key is None:
            keys = self._editable.keys()
        elif self._editability_dependent.has_key(key):
            keys = self._editability_dependent[key]
        else:
            return
        if self._editability_change_callback:
            for k in keys:
                old = self._editable[k]
                new = self._compute_editability(k)
                if old != new:
                    self._editability_change_callback(k, new)
        else:
            for k in keys:
                self._editability_dirty[k] = True

    def _compute_editability(self, key):
        # Vypoèti editovatelnost políèka a vra» výsledek (jako boolean).
        func = self._columns[key].editable.function()
        self._editable[key] = result = func(self, key)
        self._editability_dirty[key] = False
        return result
    
    def _notify_runtime_filter_change(self, key=None):
        if key is None:
            columns = [c for c in self._columns.values()
                       if c.codebook_runtime_filter is not None]
        elif self._codebook_runtime_filter_dependent.has_key(key):
            columns = [self._columns[k]
                       for k in self._codebook_runtime_filter_dependent[key]]
        else:
            return
        for c in columns:
            c.type.enumerator().notify_runtime_filter_change()
 
    def row(self):
        """Vra» aktuální datový øádek, jako instanci 'pytis.data.Row'.

        Typy sloupcù takto vráceného øádku jsou shodné s typy z datového
        objektu, pro sloupce v datovém objektu pøítomné.

        """
        data = self._data
        row_data = []
        for key, value in self._row.items():
            c = data.find_column(key)
            if c is not None:
                if self._dirty.has_key(key) and self._dirty[key]:
                    value = self[key]
                value = pytis.data.Value(c.type(), value.value())
            row_data.append((key, value))
        return pytis.data.Row(row_data)

    def data(self):
        """Vra» odpovídající datový objekt øádku."""
        return self._data

    def format(self, key, **kwargs):
        """Vra» stringovou hodnotu políèka 'key'.

        Argumenty:

          'key' -- id políèka (øetìzec) identifikující existující políèko,
            jinak je chování metody nedefinováno.
          'kwargs' -- klíèové argumenty které budou pou¾ity pøi volání metody
            'export()' pro získání øetìzcové reprezentace hodnoty.
        
        """
        try:
            return self._cache[key]
        except KeyError:
            pass
        try:
            value = self[key]
        except KeyError:
            # Mù¾e nastat napøíklad v pøípadì, kdy k danému sloupci nejsou
            # pøístupová práva.
            svalue = ''
        else:
            svalue = value.export(**kwargs)
        column = self._columns[key]
        if self._singleline and column.line_separator is not None:
            svalue = string.join(svalue.splitlines(), column.line_separator)
        self._cache[key] = svalue
        return svalue

    def set_row(self, row, reset=False):
        """Nastav aktuální data na 'row'.

        'row' má stejný význam jako stejnojmenný argument metody '__init__()'.

        Pravdivá hodnota argumentu 'reset' zpùsobí to, ¾e tato nová hodnota
        øádku bude nadále pova¾ována za pùvodní, co¾ má vliv na funkci metod
        'changed()' a 'original_row()'.

        Tuto metodu je vhodné vyu¾ívat pro koncepci aktuálního øádku v tabulce
        s nemìnnými sloupci a datovým objektem.  U¹etøí se tak chroustání
        specifikací uvnitø této tøídy.
        
        """
        self._set_row(row, reset=reset)

    def fields(self):
        """Vra» seznam v¹ech políèek."""
        return self._fieldspec
        
    def has_key(self, key):
        """Vra» pravdu, pokud je políèko daného klíèe v øádku obsa¾eno."""
        return self._columns.has_key(key)
        
    def keys(self):
        """Vra» seznam identifikátorù v¹ech políèek obsa¾ených v tomto øádku."""
        return self._columns.keys()
        
    def original_row(self, empty_as_none=False):
        """Vra» øádek obsahující pùvodní hodnoty øádku pøed pøípadnými zmìnami.

        Vrácená hodnota je instance 'pytis.data.Row', ne nutnì toto¾ná (ve
        smyslu 'id()') s øádkem zadaným v konstruktoru.

        Pùvodními hodnotami jsou my¹leny hodnoty øádku pøedaného konstruktoru,
        nebo poslednímu volání metody 'set_row()', s pravdivým argumentem
        'reset'.
        
        """
        if empty_as_none and self._original_row_empty:
            return None
        else:
            return self._original_row

    def changed(self):
        """Vra» pravdu, právì kdy¾ byl øádek zmìnìn.

        Øádek se pova¾uje za zmìnìný, není-li shodný s øádkem vytvoøeným z dat
        zadaných v konstruktoru, ve smyslu operátoru `='.

        """
        return self._row != self._original_row

    def field_changed(self, key):
        """Vra» pravdu, právì kdy¾ bylo políèko dané 'key' zmìnìno.

        """
        return self._row.has_key(key) and \
               self._row[key] != self._original_row[key]

    def new(self):
        """Vra» pravdu, právì kdy¾ se jedná o nový záznam."""
        return self._new
    
    def editable(self, key):
        """Vra» pravdu, právì kdy¾ je políèko dané 'key' editovatelné.

        Význam argumentu 'key' je stejný jako v metodì '__getitem__'.

        """
        if self._editable.has_key(key):
            if self._editability_dirty[key]:
                return self._compute_editability(key)
            else:
                return self._editable[key]
        else:
            editable = self._columns[key].editable
            return editable == Editable.ALWAYS or \
                   (editable == Editable.ONCE and self._new)

    # Nakonec to není nikde potøeba, ale kdyby, staèí odkomentovat a dopsat
    # test...
    #def accessible(self, key, permission):
    #    """Vra» pravdu, právì kdy¾ má u¾ivatel právo pøístupu k danému políèku.
    #
    #    Argumenty:
    #    
    #      'key' -- stejnì jako v metodì '__getitem__'.
    #      'permission' -- jedna z konstant tøídy 'pytis.data.Permission'
    #        urèující, které pøístupové právo se má testovat.
    #
    #    Pokud dané políèko není souèástí datového øádku (jde o virtuální
    #    políèko), vrací v¾dy None.
    #        
    #    """
    #    if self._row.has_key(key):
    #        return self._data.accessible(key, permission)
    #    else:
    #        return None


        
    
    def _display_func(self, column):
        def getval(enum, value, col, func=None):
            if value is None:
                return ''
            try:
                v = enum.get(value, col)
            except pytis.data.DataAccessException:
                return ''
            if not v:
                return ''
            elif func:
                return f(v.value())
            else:
                return v.export()
        display = column.display
        if not display and column.codebook:
            try:
                cb_spec = self._resolver.get(column.codebook, 'cb_spec')
            except ResolverError, e:
                pass
            else:
                display = cb_spec.display()
        if not display:
            return None
        elif callable(display):
            return display
        enum = column.type.enumerator()
        if isinstance(display, tuple):
            f, col = display
            return lambda v: getval(enum, v, col, f)
        else:
            return lambda v: getval(enum, v, display)

    def display(self, key):
        """Vra» hodnotu displeje èíselníku daného políèka.

        Pokud dané políèko není èíselníkem, nebo tento èíselník nemá urèen
        displej, nebo aktuální hodnota políèka není v èíselníku nalezena, nebo
        k nejsou dostateèná práva k jejímu naètení, bude vrácen prázdný
        øetìzec.
        
        """
        column = self._columns[key]
        display = self._display_func(column)
        if not display:
            computer = column.computer
            if computer and isinstance(computer, CbComputer):
                column = self._columns[computer.field()]
                display = self._display_func(column)
        if display:
            return display(self[column.id].value())
        else:
            return ''
    
    def enumerate(self, key):
        """Vra» výèet hodnot èíselníku daného políèka jako seznam dvojic.

        Vrácený seznam obsahuje v¾dy vnitøní Pythonovou hodnotu èíselníku a k
        ní odpovídající u¾ivatelskou hodnotu jako øetìzec.  U¾ivatelská hodnota
        je urèena specifikací `display'.
        
        Vyvolání této metody pro políèko, které není èíselníkové je pova¾ováno
        za chybu.
       
        """
        column = self._columns[key]
        display = self._display_func(column)
        if display is None:
            display = lambda v: pytis.data.Value(column.type, v).export()
        return [(v, display(v)) for v in column.type.enumerator().values()]



    
