# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Tøídy pro specifikaci prezentaèní vlastností formuláøù.

Tøída 'ViewSpec' zastøe¹uje ostatní specifikaèní tøídy definované tímto
modulem ('FieldSpec', 'GroupSpec', 'LayoutSpec').

Vytvoøení instance formuláøové tøídy je potom v podstatì interpretací
pøíslu¹ných specifikací.

V¹echny tøídy tohoto modulu mají specifikaèní charakter a jejich instance jsou
pova¾ovány za immutable, tudí¾ mohou být libovolnì sdíleny.

"""

import pytis.data

from pytis.util import *
from pytis.presentation import *

class TextFormat(object):
    """Konstanty pro definici vstupního formátu textu."""
    PLAIN = 'PLAIN'
    HTML = 'HTML'
    WIKI = 'WIKI'

class BorderStyle(object):
    """Výètová tøída definující konstanty pro styl orámování."""
    ALL    = 'ALL'
    """Mezera je kolem dokola."""
    TOP    = 'TOP'
    """Mezera je jen nahoøe."""
    BOTTOM = 'BOTTOM'
    """Mezera je jen dole."""
    LEFT   = 'LEFT'
    """Mezera je jen vpravo."""
    RIGHT  = 'RIGHT'
    """Mezera je jen vlevo."""

    
class Color(object):
    """Na GUI toolkitu nezávislé konstanty pro nìkteré barvy."""
    WHITE = 'WHITE'
    BLACK = 'BLACK'
    RED = 'RED'
    RED20 = 'RED20'
    GREEN = 'GREEN'
    BLUE = 'BLUE'
    YELLOW = 'YELLOW'
    GRAY   = 'GRAY'
    GRAY10 = 'GRAY10'
    GRAY20 = 'GRAY20'
    GRAY30 = 'GRAY30'
    GRAY40 = 'GRAY40'
    GRAY50 = 'GRAY50'
    GRAY60 = 'GRAY60'
    GRAY70 = 'GRAY70'
    GRAY80 = 'GRAY80'
    GRAY90 = 'GRAY90'
    BLANCHETALMOND = 'BLANCHETALMOND'
    LIGHTYELLOW = 'LIGHTYELLOW'
    PEACHPUFF2 = 'PEACHPUFF2'
    SLATEGRAY2 = 'SLATEGRAY2'
    LIGHTSALMON = 'LIGHTSALMON'

    
class FieldStyle(object):
    """Specifikaèní tøída definující podobu vnitøku políèka s hodnotou."""

    def __init__(self, foreground=Color.BLACK, background=Color.WHITE,
                 bold=False, slanted=False):
        """Inicializuj instanci.

        Argumenty:

          foreground -- barva textu políèka, jedna z konstant tøídy 'Color'
          background -- barva pozadí políèka, jedna z konstant tøídy 'Color'
          bold -- pøíznak urèující, zda má být text políèka tuèný
          slanted -- pøíznak urèující, zda má být text políèka sklonìný
          
        """
        self._foreground = foreground
        self._background = background
        self._bold = bold
        self._slanted = slanted

    def foreground(self):
        """Vra» barvu textu zadanou v konstruktoru."""
        return self._foreground

    def background(self):
        """Vra» barvu pozadí zadanou v konstruktoru."""
        return self._background

    def bold(self):
        """Vra» pravdu, právì kdy¾ má text blikat."""
        return self._bold

    def slanted(self):
        """Vra» pravdu, právì kdy¾ má být text tuèný."""
        return self._slanted


FIELD_STYLE_DEFAULT = FieldStyle()
FIELD_STYLE_EMPHASIS = FieldStyle(bold=True)
FIELD_STYLE_WARNING = FieldStyle(foreground=Color.RED)


class Orientation(object):
    """Výètová tøída definující konstanty pro smìrovou orientaci."""
    HORIZONTAL = 'HORIZONTAL'
    """Horizontální orientace."""
    VERTICAL = 'VERTICAL'
    """Vertikální orientace."""

    
class Button(object):
    """Specifikace tlaèítka navázaného na proceduru pro pou¾ití ve formuláøích.

    Takto lze do formuláøe umístit tlaèítka, jejich¾ stisk vyvolá libovolnou
    u¾ivatelem definovanou akci.  Pøi spu¹tìní akce pøitom lze pøistupovat k
    aktuálním hodnotám políèek formuláøe (viz konstruktor).

    Tlaèítko lze umístit do LayoutSpec jako jednu z polo¾ek (v¹ude tam, kde
    bì¾nì uvádíme id políèka pro umístìní vstupního políèka, nebo vnoøenou
    LayoutSpec).  Pokud ve specifikaci není 'LayoutSpec' definována explicitnì,
    nelze tlaèítko pou¾ít.

    """
    
    def __init__(self, label, handler, width=None, tooltip=None,
                 active_in_popup_form=True):
        """Inicializuj specifikaèní instanci.

        Argumenty:

          label -- nápis tlaèítka jako string.
          
          handler -- funkce jednoho argumentu, kterým je instance
            'PresentedRow' obsahující aktuální hodnoty políèek formuláøe.  Tato
            funkce je vyvolána pøi stisku tlaèítka.
            
          width -- ¹íøka (poèet znakù).  Implicitnì je ¹íøka nastavena
            automaticky podle ¹íøky nápisu ('label'), ale pokud je tento
            argument specifikován, bude ¹íøka nastavena podle dané celoèíselné
            hodnoty.
            
          tooltip -- text, který se zobrazí jako bublinová nápovìda pro toto
            tlaèítko.
            
          active_in_popup_form -- Pokud je zde specifikována pravdivá hodnota,
            nebude tlaèítko aktivní v popup (modálních) formuláøích.  To je
            urèeno zejména pro tlaèítka, která mají vyvolat otevøení nového
            formuláøe na zásobníku oken aplikace, co¾ není právì v dobì práce s
            modálním formuláøem mo¾né.
        
        """
        assert isinstance(label, types.StringTypes)
        assert callable(handler)
        assert width is None or isinstance(width, types.IntType)
        assert tooltip is None or isinstance(tooltip, types.StringTypes)
        assert isinstance(active_in_popup_form, types.BooleanType)
        self._label = label
        self._handler = handler
        self._width = width
        self._tooltip = tooltip
        self._active_in_popup_form = active_in_popup_form
        
    def label(self):
        return self._label
    
    def handler(self):
        return self._handler
    
    def width(self):
        return self._width
    
    def tooltip(self):
        return self._tooltip
    
    def active_in_popup_form(self):
        return self._active_in_popup_form

class ActionContext(object):
    """Výètová tøída definující konstanty pro urèení kontextu akce."""
    
    CURRENT_ROW = 'CURRENT_ROW'

    """Akce je provádìna nad aktuálním øádkem tabulky.  Ten bude pøedán
    handleru akce jako pozièní argument v podobì instance PresentedRow."""
    
    SELECTION = 'SELECTION'

    """Akce je provádìna nad aktuálním výbìrem, tedy nad v¹emi vybranými øádky
    tabulky.  Výbìr bude pøedán handleru akce jako pozièní argument v podobì
    iterátoru, který vrací jednotlivé øádky jako instance PresentedRow."""

    # TODO: Zde by je¹tì mohla být jedna hodnota, která by umo¾nila definovat
    # univerzální akce, které pracují implicitnì s aktuálním øádkem, ale pokud
    # existuje výbìr, tak s výbìrem.
    

class _ActionItem(object):
    
    def __init__(self, title):
        assert isinstance(title, types.StringTypes)
        self._title = title

    def title(self, raw=False):
        """Vra» název akce."""
        title = self._title
        if not raw:
            title = title.replace("&", "")
        return title
            
    
class Action(_ActionItem):
    """Definice kontextovì závislé akce.

    Tato definice akce slou¾í pro pou¾ití ve specifikátoru 'actions' tøídy
    'ViewSpec'.  Ka¾dá akce je o¹etøena vlastní obslu¾nou funkcí, co¾ umo¾òuje
    implementovat libovolnou vlastní funkcionalitu.  Pro ka¾dou akci lze
    definovat také kontext, který urèuje kdy má akce smysl a jaké argumenty
    budou handleru akce pøedány.  Tím je napøíklad mo¾né, aby akce pracovala s
    aktuálním øádkem tabulky apod.  Více viz argumenty konstruktoru.
    
    """
    def __init__(self, title, handler, context=ActionContext.CURRENT_ROW,
                 secondary_context=None, enabled=True, access_groups=None,
                 descr=None, hotkey=None, **kwargs):
        """Inicializuj instanci.

        Argumenty:

          title -- titulek akce zobrazený v u¾ivatelském rozhraní.

          handler -- callable objekt o¹etøující danou akci.  Handleru jsou pøi
            vyvolání akce pøedány argumenty odpovídající danému kontextu.
            Pokud argument 'context' není None, bude pøedán první pozièní
            argument.  Je to buïto instance 'PresentedRow' odpovídající
            aktuálnímu øádku, nebo sekvence vybraných øádkù, v závislosti na
            hodnotì argumentu 'context'.  Pokud je definován také argument
            'secondary_context', bude pøedán také druhý pozièní argument
            odpovídající kontextu ve druhém formuláøi duálního formuláøe.  Dále
            jsou handleru pøedány také ve¹keré zbylé klíèové argumenty.
        
          context -- Instance 'ActionContext' urèující v jakém kontextu mù¾e
            být akce vyvolána.  Tato hodnota ovlivòuje argumenty, které jsou
            handleru akce pøedány pøi jejím vyvolání.  Mù¾e být také None, v
            kterém¾to pøípadì nejsou handleru pøadávány ¾ádné argumenty.
        
          secondary_context -- Instance 'ActionContext', nebo None.  Nìkteré
            akce mohou v duálním formuláøi pracovat i s kontextovou informací z
            druhého formuláøe.  Tímto argumentem, podobnì jako argumentem
            'context' urèujeme s èím se pracuje.  Specifikace ovlivní druhý
            pozièní argument pøedaný handleru akce.  Pokud je None, s ¾ádným
            dal¹ím kontextem se nepracuje a druhý pozièní argument se handleru
            nepøedává.

          enabled -- funkce, vracející pravdu, pokud je akce aktivní a nepravdu
            v opaèném pøípadì.  Funkci jsou pøadány stejné argumenty, jako
            handleru.  Není-li uvedeno, je akce aktivní v závislosti na
            'access_groups'.  Namísto funkce mù¾e být pøedána té¾ pøímo boolean
            hodnota, které dostupnost akce urèuje staticky.

          access_groups -- seznam u¾ivatelských skupin, které mají právo akci
            vyvolat.  Akce se pro ostatní u¾ivatele stane automaticky
            neaktivní.  Teprve pokud u¾ivatel patøí do jedné z vyjmenovaných
            skupin, je dostupnost akce zji¹tìna pomocí funkce 'enabled'.
              
          descr -- textový popis akce, který mù¾e být pou¾it jak k vytvoøení
            nápovìdy, tak k zobrazení v u¾ivatelském rozhraní.

          hotkey -- pøípadná klávesová zkratka, která akci vyvolá.

          V¹echny ostatní klíèové argumenty budou pøi vyvolání akce pøedány
          handleru jako klíèové argmenty.  Takto napøíklad lze jeden handler
          pou¾ít pro více podobných akcí.
        
        """
        assert callable(handler)
        assert context in (None,) + public_attributes(ActionContext)
        assert secondary_context in (None,) + public_attributes(ActionContext)
        assert callable(enabled) or isinstance(enabled, types.BooleanType)
        assert access_groups is None or \
               isinstance(access_groups,
                          (types.StringType, types.TupleType, types.ListType))
        assert descr is None or isinstance(descr, types.StringTypes)
        assert hotkey is None or isinstance(hotkey, (types.StringType,
                                                     types.TupleType))
        self._handler = handler
        self._context = context
        self._secondary_context = secondary_context
        self._enabled = enabled
        self._access_groups = access_groups
        self._descr = descr
        self._hotkey = hotkey
        self._kwargs = kwargs
        super(Action, self).__init__(title)
        
    def handler(self):
        """Vra» obslu¾nou funkci akce."""
        return self._handler

    def context(self):
        """Vra» kontext akce jako instanci 'ActionContext'."""
        return self._context
    
    def secondary_context(self):
        """Vra» pøídavný kontext akce, pokud je definován, nebo None."""
        return self._secondary_context

    def enabled(self):
        """Vra» funkci k zji¹tìní dostupnosti akce, nebo pøímo bool hodnotu."""
        return self._enabled
        
    def access_groups(self):
        """Vra» seznam u¾iv. skupin které mají právo akci vyvolat.""" 
        return self._access_groups
        
    def descr(self):
        """Vra» popis akce.""" 
        return self._descr
        
    def hotkey(self):
        """Vra» klávesovou zkratku akce.""" 
        return self._hotkey
    
    def kwargs(self):
        """Vra» klíèové argumenty pro handler akce."""
        return self._kwargs
    

class ActionGroup(_ActionItem):
    """Definice pojmenované logické skupiny akcí.

    Skupiny akcí slou¾í k logickému seskupení souvisejících akcí.  V
    u¾ivatelském rozhraní se takto definované akce napøíklad zobrazí jako
    samostatné podmenu v menu akcí.

    """
    def __init__(self, title, *actions):
        """Inicializuj instanci.

        Argumenty:
        
          title -- název skupiny jako øetìzec

          actions -- obsah této skupiny.  Zde platí rekurzívnì stejná pravidla
            jako pro stejnojmennný argument konstruktoru ViesSpec.

        """
        assert isinstance(actions, (types.ListType, types.TupleType))
        if __debug__:
            for x in actions:
                if isinstance(x, (types.TupleType, types.ListType)):
                    for y in x:
                        assert isinstance(y, (Action, ActionGroup))
                else:
                    assert isinstance(x, (Action, ActionGroup))
        self._actions = actions
        super(ActionGroup, self).__init__(title)
        
    def actions(self):
        """Vra» seznam akcí jako tuple."""
        return self._actions
    
    
class GroupSpec(object):
    """Definice skupiny vstupních polí editaèního formuláøe.

    Tato specifikace se nestará o vzhled jednotlivých vstupních polí, pouze
    definuje jejich rozlo¾ení ve formuláøi.

    Skupina mù¾e obsa¾ené prvky skládat horizontálnì, nebo vertikálnì a skupiny
    se mohou libovolnì vnoøovat (prvkem je buïto pøímo vstupní políèko, nebo
    jiná skupina -- viz argument 'items' konstruktoru).

    Dal¹ími argumenty konstruktoru lze urèit rozestupy políèek, mezeru kolem
    celé skupiny, styl orámování, nadpis skupiny apod.

    Postup skládání políèek a skupin ve formuláøi je následovný:

    Podle orientace skupiny jsou obsa¾ené celky skládány buïto horizontálnì
    (vedle sebe), nebo vertikálnì (nad sebe).  Obsa¾enými celky se rozumí
    sekvence za sebou následujících políèek a vnoøených skupin.  V¹echna za
    sebou následující políèka jsou skládána pod sebe do møí¾ky (nehledì na to,
    jde-li o vertikální, nebo horizontální skupinu).  Teprve celky takto
    seskupených políèek a vnoøených skupin jsou skládány podle orientace
    skupiny.  Samostatná vedle sebe umístìná políèka je mo¾no vytvoøit jejich
    umístìním do samstatných vnoøených podskupin (jednoprvkových).
    
    """
    def __init__(self, items, orientation=Orientation.HORIZONTAL, label=None,
                 gap=2, space=1, border=3, border_style=BorderStyle.ALL):
        """Inicializuj instanci.

        Argumenty:

          items -- obsah této skupiny jako sekvence vnoøených skupin (instancí
            'GroupSpec'), nebo pøímo vstupních políèek urèených svým
            identifikátorem (øetìzec).
            
          orientation -- orientace skládání obsa¾ených prvkù; konstanta
            tøídy 'Orientation'.
            
          label -- název skupiny uvedený v záhlaví rámeèku - pokud není None,
            skupina bude orámována; string;
            
          gap -- velikost vertikální mezery mezi jednotlivými políèky
            v dialog units; integer; 1 du = 1/4 ¹íøky bì¾ného znaku.
            Relevantní pouze pokud 'items' obsahuje pøímo políèka.
            
          space -- velikost mezery mezi políèkem a jeho labelem v du; integer;
            Relevantní pouze pokud 'items' obsahuje pøímo políèka.
            
          border -- velikost mezery kolem celé skupiny v du; integer;
          
          border_style -- styl orámování; mezera je implicitnì ze v¹ech stran,
            mù¾e v¹ak být pouze vpravo, vlevo, nahoøe, nebo dole; Konstanta
            tøídy 'BorderStyle'.

        'label' je v¾dy pova¾ován za jazykovì závislý text a tudí¾ automaticky
        podléhá jazykové konverzi.

        """
        assert is_sequence(items)
        assert label is None or is_anystring(label)
        assert type(gap) == type(0)
        assert gap >= 0
        assert orientation in public_attributes(Orientation)
        assert border_style in public_attributes(BorderStyle)
        for item in items:
            # není tøeba kontrolovat rekurzivnì, proto¾e kontrola probìhne pro
            # ka¾dou instanci na její úrovni...
            assert isinstance(item, GroupSpec) or isinstance(item, Button) \
                   or is_anystring(item), (item, label)
        self._items = items
        self._label = label
        self._orientation = orientation
        self._gap = gap
        self._space = space
        self._border = border
        self._border_style = border_style

    def items(self):
        """Vra» prvky skupiny jako tuple."""
        return tuple(self._items)

    def label(self):
        """Vra» název skupiny."""
        return self._label

    def orientation(self):
        """Vra» orientaci skládání prvkù; konstanta tøídy 'Orientation'."""
        return self._orientation

    def gap(self):
        """Vra» ¹íøku mezery vertikální mezi políèky v du."""
        return self._gap

    def space(self):
        """Vra» ¹íøku mezery mezi políèkem a jeho labelem v du."""
        return self._space

    def border(self):
        """Vra» ¹íøku mezery kolem celé skupiny v du."""
        return self._border

    def border_style(self):
        """Vra» styl mezery kolem skupiny jako konstantu 'BorderStyle'."""
        return self._border_style

    
class HGroup(GroupSpec):
    """Horizontální seskupení políèek.

    Tato tøída je pouze pohodlnìj¹ím rozhraním k tøídì 'GroupSpec'.

    """
    def __init__(self, *items, **kwargs):
        kwargs['orientation'] = Orientation.HORIZONTAL
        super(HGroup, self).__init__(items, **kwargs)

        
class VGroup(GroupSpec):
    """Vertikální seskupení políèek.

    Tato tøída je pouze pohodlnìj¹ím rozhraním k tøídì 'GroupSpec'.

    """
    def __init__(self, *items, **kwargs):
        kwargs['orientation'] = Orientation.VERTICAL
        super(VGroup, self).__init__(items, **kwargs)

        
class LHGroup(HGroup):
    """Horizontální seskupení políèek s labelem a orámováním.

    Tato tøída je pouze pohodlnìj¹ím rozhraním k tøídì 'GroupSpec'.

    """
    def __init__(self, label, *items, **kwargs):
        kwargs['label'] = label
        super(LHGroup, self).__init__(*items, **kwargs)

        
class LVGroup(VGroup):
    """Vertikální seskupení políèek s labelem a orámováním.

    Tato tøída je pouze pohodlnìj¹ím rozhraním k tøídì 'GroupSpec'.

    """
    def __init__(self, label, *items, **kwargs):
        kwargs['label'] = label
        super(LVGroup, self).__init__(*items, **kwargs)
    

class LayoutSpec(object):
    """Specifikace rozmístìní vstupních polí editaèního formuláøe.

    Editaèní formuláø pro jeden záznam tabulky (na úrovni u¾ivatelského
    rozhraní) se sestává z nìkolika editaèních polí - jedno pro ka¾dou polo¾ku
    záznamu.  Tato pole mohou být vizuálnì seskupena do skupin.  Skupina je
    specifikována instancí tøídy 'GroupSpec'.  Zpùsob rozlo¾ení polí ve skupinì
    je popsán v dokumentaci tøídy 'GroupSpec'.

    """
    def __init__(self, caption, group, order=None):
        """Inicializace a doplnìní defaultních hodnot atributù.

        Argumenty:
        
          caption -- nadpis editaèního formuláøe jednoho záznamu
          
          group -- specifikace skupiny políèek nejvý¹¹í úrovnì; instance
            'GroupSpec'. Tato skupina mù¾e obsahovat dal¹í vnoøené skupiny
            (viz dokumentace tøídy 'GroupSpec').
            
          order -- specifikace poøadí procházení mezi políèky jako sekvence
            øatìzcù - identifikátorù políèek.  Pokud není None, je poøadí
            procházení políèek urèeno poøadím jejich identifikátorù v této
            sekvenci.  V takovém pøípadì musí sekvence obsahovat identifikátory
            v¹ech políèek obsa¾ených v 'group'.  Pokud je ponechána výchozí
            hodnota 'None', je poøadí procházení dáno poøadím políèek v
            'group' pøi procházení stromu do hloubky.  Tento výchozí zpùsob
            urèení poøadí v naprosté vìt¹inì pøípadú vyhovuje a je z pohledu
            u¾ivatele nejpøirozenìj¹í, proto se pou¾ítí tohoto argumentu
            doporuèuje jen v nevyhnutelných pøípadech!  Prioritním øe¹ením by
            v¾dy mìla být reorganizace skupin formuláøe.

        'caption' je v¾dy pova¾ován za jazykovì závislý text a tudí¾ automaticky
        podléhá jazykové konverzi.

        """
        assert caption is None or is_anystring(caption)
        assert isinstance(group, GroupSpec)
        assert order is None or is_sequence(order)
        self._caption = caption
        self._group = group
        def find_fields(group):
            # Extract field ids from group by recursing it.
            fields = []
            for item in group.items():
                if isinstance(item, GroupSpec):
                    fields += find_fields(item)
                elif not isinstance(item, Button):
                    fields.append(item)
            return fields
        if order is None:
            order = find_fields(group)
        elif __debug__:
            found = find_fields(group)
            for id in order:
                assert is_string(id)
                assert id in found, \
                       (_("Invalid field id in 'order' specification:"), id)
            for id in found:
                assert id in order, \
                       (_("Field id missing in 'order' specification:"), id)
            assert len(found) == len(order), \
                   _("Duplicate field id in 'order' spcification.")
        self._order = order

    def caption(self):
        """Vra» nadpis pro editaèní formuláø jednoho záznamu."""
        return self._caption

    def group(self):
        """Vra» skupinu políèek nejvý¹¹í úrovnì; instance 'GroupSpec'."""
        return self._group
    
    def order(self):
        """Vra» tuple id v¹ech políèek editaèního formuláøe v poøadí procházení.
        
        Pokud nebylo poøadí v konstruktoru urèeno, odpovídá poøadí ve skupinách.

        """
        return self._order


class ViewSpec(object):
    """Kompletující specifikace prezentaèních vlastnoostí pro formuláøe.

    Instance této tøídy zná ve¹keré prezentaèní vlasnosti urèité entity
    (tabulky z pohledu aplikace).  Tøída definuje API pro pøístup k tìmto
    vlastnostem.  Toto API je vyu¾íváno formuláøovými tøídami.

    Ka¾dá instance této tøídy definuje vlastnosti pro v¹echny zpùsoby
    zobrazení (editaèní formuláø, editaèní seznam, apod.).

    Ka¾dý typ formuláøe z potom vyu¾ívá ze specifikace pouze tu èást, která je
    pro nìj relevantní.

    """
    
    def __init__(self, title, fields, singular=None, layout=None, columns=None,
                 actions=(), sorting=None, grouping=None, redirect=None,
                 check=None, cleanup=None, on_new_record=None,
                 on_edit_record=None, on_delete_record=None,
                 on_line_commit=None, focus_field=None, description=None,
                 help=None, row_style=FIELD_STYLE_DEFAULT):
        
        """Inicializuj instanci.

        Argumenty:

          title -- název náhledu (øetìzec).  Název je pou¾íván jako titulek
            záhlaví seznamových formuláøù a na dal¹ích místech, kde je
            odkazováno na náhled jako celek, tedy celou mno¾ninu záznamù, proto
            by mìlo být pou¾ito mno¾né èíslo, napø. Faktury.
            
          singular -- název náhledu jedné polo¾ky (øetìzec).  Tento název je
            pou¾íván v¹ude tam, kde jde o jednu polo¾ku náhledu (napø záhlaví
            editaèního fotmuláøe), proto by mìl být v jednotném èísle,
            napø. Faktura.  Pokud je None, bude pou¾it název daná argumentem
            'title'.
            
          fields -- specifikace políèek jako sekvence instancí tøídy
            'FieldSpec'.
            
          layout -- specifikace rozlo¾ení políèek v editaèním formuláøi,
            instance tøídy 'GroupSpec'.  Je mo¾né pøedat také sekvenci
            identifikátorù políèek -- v tom pøípadì bude vytvoøena horizontální
            skupina obsahující vyjmenovaná políèka.  Pokud je None, bude
            výchozí rozlo¾ení sestaveno poskládáním v¹ech políèek definovaných
            ve fields.  Pro zpìtnou kompatibilitu je mo¾né pou¾ít také
            'LayoutSpec', ale tento zpùsob definice je pova¾ován za nevhodný a
            v budoucnu nebude podporován.
            
          columns -- specifikace sloupcù tabulkového formuláøe, sekvence
            indentifikátorù políèek z 'fields'.  Pokud není urèeno, bude
            výchozí seznam sloupcù obsahovat v¹echna políèka z fields, která
            nemají 'column_width' nastaveno na nulu.
            
          actions -- specifikace dostupných u¾ivatelských akcí jako sekvence
            instancí 'Action', vnoøených sekvencí, nebo instancí 'ActionGroup'.
            V nejjednodu¹¹ím pøípadì jde o prostý seznam instancí 'Action'.
            Pokud chceme ovlivnit reprezentaci seznamu dostupných akcí v
            u¾ivatelském rozhraní, je mo¾né akce seskupit do vnoøenách tuplù èi
            listù.  Takto vytvoøené skupiny akcí budou oddìleny separátorem.
            Dále je mo¾né vytvoøit vnoøenou pojmenovanou skupinu
            (reprezentovanou jako samostatné podmenu) pou¾itím instance
            'ActionGroup'.  Prvky v rámci ka¾dé 'ActionGroup' lze dále
            seskupovat stejným zpùsobem.
                        
          sorting -- výchozí seøazení tabulky.  Specifikace øazení ve formátu
            odpovídajícím argumentu 'sort' metody 'pytis.data.select()', nebo
            None.  Potom je výchozí seøazení tabulky podle klíèového sloupce
            datového objektu vzestupnì.
            
          grouping -- výchozí vizuální seskupování tabulky.  Mù¾e být None,
            idendifikátor sloupce, nebo tuple idendifikátorù.  Vizuální
            seskupování umo¾òuje graficky odli¹it skupiny øádkù, které
            následují bezprostøednì po sobì a pøitom mají stejnou hodnotu v¹ech
            seskupovacích sloupcù.  To má význam pouze u sloupcù, podle kterých
            je zároveò øazeno.
            
          redirect -- pøesmìrování formuløe pro zobrazení/editaci jednoho
            záznamu.  Jedná se o funkci jednoho argumentu, jím¾ je instance
            'PresentedRow' reprezentující øádek dat, pro který je
            pøesmìrování po¾adováno.  Vrácenou hodnotou musí být název
            specifikace, nad kterou bude vytváøený formuláø sestaven.  Pokud
            funkce vrátí None, nebo není ¾ádná funkce specifikována, k ¾ádnému
            pøesmìrování nedojde.
            
          check -- funkce pro ovìøení integrity dat celého záznamu.  Jedná se o
            funkci jednoho argumentu, jím¾ je instance tøídy `PresentedRow',
            reprezentující aktuální hodnoty v¹ech políèek formuláøe.  Na rozdíl
            od validace hodnot políèek, která závisí na datovém typu a má k
            dispozici pouze vlastní obsah políèka, má tato funkce k dispozici i
            hodnoty ostatních políèek, tak¾e je vhodná pro ovìøení vzájemné
            sluèitelnosti tìchto hodnot.  Tato funkce vrací None, pokud je
            v¹e v poøádku a formuláø mù¾e být v tomto stavu odeslán, nebo
            id políèka, jeho¾ hodnota zpùsobila neplatnost záznamu.  Formuláø
            by potom mìl u¾ivatele vrátit do editace daného polèka.
            
          cleanup -- funkce provádìjící závìreèné akce pøi uzavøení formuláøe.
            Jedná se o funkci dvou argumentù.  Prvním je výsledný ulo¾ený øádek
            odpovídající koneènému stavu databáze a druhým je pùvodní øádek z
            formuláøe pøed ulo¾ením (na úrovni databáze mohou být nìkteré
            hodnoty zmìnìny èi doplnìny ``default'' hodnoty apod.).  Druhý
            øádek obsahuje hodnoty po editaci u¾ivatelem, ale pomocí jeho
            metody `original_row' je mo¾né také získat pùvodní hodnoty pøed
            editací.  Oba argumenty jsou instance 'PresentedRow'.  Funkce je
            spou¹tìna v¾dy pøi pøi uzavøení editaèního formuláøe tlaèítkem
            ``Ok'' (potvrzením) a to i v pøípadì, ¾e ¾ádná data nebyla zmìnìna.
            
          on_new_record -- akce vlo¾ení nového záznamu.  Pokud je None, bude
            provedena výchozí akce (otevøení PopupEditForm nad danou
            specifikací).  Pøedáním funkce lze pøedefinovat pøidání nového
            záznamu v daném náhledu libovolnou vlastní funkcionalitou.  Funkce
            musí akceptovat klíèový argument 'prefill' (viz.
            'pytis.form.new_record()').
            
          on_edit_record -- akce editace záznamu.  Pokud je None, bude
            provedena výchozí akce (otevøení PopupEditForm nad danou
            specifikací).  Pøedáním funkce jednoho klíèového argumentu,
            jím¾ je instance 'PresentedRow', lze pøedefinovat editaci záznamu
            libovolnou vlastní funkcionalitou.
            
          on_delete_record -- akce vymazání záznamu.  Pokud je None, bude
            provedena výchozí akce (vymazání záznamu).  Pøedáním funkce
            jednoho klíèového argumentu, jím¾ je instance 'PresentedRow', lze
            pøedefinovat vymazání záznamu libovolnou vlastní
            funkcionalitou. Pokud tato funkce vrací None, nedojde k ¾ádným
            dal¹ím akcím, pokud vrací instancí 'pytis.data.Operator', bude
            provedeno 'pytis.data.delete_many()' s pøíslu¹nou podmínkou.
            
          on_line_commit -- akce volaná po ulo¾ení øádku v inline editaci.
            Pøedáním funkce jednoho argumentu, jím¾ je instance
            `PresentedRow', lze vyvolat doplòující akce po editaci inline
            záznamu.
             
          focus_field -- øetìzcová hodnota identifikátoru políèka urèující,
            které políèko má po otevøení formuláøe fokus, nebo funkce jednoho
            argumentu, kterým je PresentedRow pro otevíraný formuláø, a která
            vrací pøíslu¹ný identifikátor políèka.
            
          description -- popis formuláøe.  Krátký text rozsahu jedné a¾ dvou
            vìt.  Více také viz poznámka ní¾e.
          
          help -- podrobnìj¹í nápovìda formuláøe formátovaná jako strukturovaný
            text (wiki).  Více také viz poznámka ní¾e.

          row_style -- instance tøídy 'FieldStyle' urèující vizuální styl
            spoleèný pro v¹echna políèka, nebo funkce jednoho argumentu
            (instance 'PresentedRow') vracející instanci tøídy 'FieldStyle'.
           
        Pokud není argument 'layout' nebo 'columns' uveden, bude vygenerován
        implicitní layout a seznam sloupcù, odpovídající poøadí políèek ve
        'fields'.
        
        Klíèové atributy 'layout' a 'columns' mohou být uvádìny bez
        identifikátoru a tudí¾ by mìlo být zaruèeno, ¾e budou v budoucnu
        zachovány vèetnì poøadí.

	Argument `help' nech» je vyu¾íván pro rozsáhlej¹í popis formuláøe,
	který vy¾aduje formátování.  Jednoduchý popis v rozsahu jedné a¾ dvou
	vìt nech» je uvádìn jako `description'.  Proto¾e se oba popisy
	pou¾ívají v jiných situacích, není pravda, ¾e staèí uvést jeden z nich.
	Description by mìl být uveden prakticky v¾dy.  Help slou¾í pro
	generování nápovìdy a namísto nìho je mo¾né vytvoøit odpovídající
	soubor ve zdrojovém adresáøi nápovìdy (viz tutoriál Help).

        """
        assert isinstance(title, (str, unicode))
        if singular is None:
            if isinstance(layout, LayoutSpec):
                singular = layout.caption()
            else:
                singular = title
        else:
            assert isinstance(singular, (str, unicode))
        assert is_sequence(fields)
        self._field_dict = dict([(f.id(), f) for f in fields])
        self._fields = tuple(fields)
        # Initialize the layout
        if layout is None:
            layout = LayoutSpec(singular,
                                GroupSpec([f.id() for f in self._fields],
                                          orientation=Orientation.VERTICAL))
        elif isinstance(layout, GroupSpec):
            layout = LayoutSpec(singular, layout)
        elif isinstance(layout, (list, tuple)):
            layout = LayoutSpec(singular,
                                GroupSpec(layout,
                                          orientation=Orientation.VERTICAL))
        if __debug__:
            assert isinstance(layout, LayoutSpec)
            def recourse_group(group):
                for item in group.items():
                    if isinstance(item, GroupSpec):
                        recourse_group(item)
                    elif not isinstance(item, Button):
                        assert self._field_dict.has_key(item), \
                               (_("Unknown field id in 'layout' spec.:"), item)
                        if self._field_dict[item].width() == 0:
                            log(OPERATIONAL, "Zero width field in layout:",item)
            recourse_group(layout.group())
            for f in fields:
                assert isinstance(f, FieldSpec)
                assert not isinstance(f.computer(), CbComputer) \
                       or f.computer().field() in self._field_dict.keys()
                for (s, c) in (('computer', f.computer()),
                               ('editable', f.editable())):
                    if isinstance(c, Computer):
                        for dep in c.depends():
                            assert self._field_dict.has_key(dep), \
                              ("Unknown field id '%s' in dependencies for " + \
                               "'%s' specification of '%s'.") % (dep, s, f.id())
        # Initialize `columns' specification parameter
        if columns is None:
            columns = tuple([f.id() for f in self._fields if f.column_width()])
        else:
            if __debug__:
                assert is_sequence(columns)
                for id in columns:
                    assert is_string(id)
                    assert self._field_dict.has_key(id), \
                       (_("Unknown column id in 'columns' specification:"), id)
        # Initialize other specification parameters
        if __debug__:
            for x in actions:
                if isinstance(x, (types.TupleType, types.ListType)):
                    for y in x:
                        assert isinstance(y, (Action, ActionGroup))
                else:
                    assert isinstance(x, (Action, ActionGroup))
        if sorting is not None:
            assert is_sequence(sorting)
            if __debug__:
                for id, dir in sorting:
                    assert self.field(id) is not None
                    assert dir in (pytis.data.ASCENDENT,
                                   pytis.data.DESCENDANT)
        if grouping is None:
            grouping = ()
        else:
            grouping = xtuple(grouping)
            if __debug__:
                for id in grouping:
                    assert self.field(id) is not None
        assert redirect is None or callable(redirect)
        assert check is None or callable(check)
        assert cleanup is None or callable(cleanup)
        assert on_new_record is None or callable(on_new_record)
        assert on_edit_record is None or callable(on_edit_record)
        assert on_delete_record is None or callable(on_delete_record)
        assert on_line_commit is None or callable(on_line_commit)
        assert focus_field is None or callable(focus_field) or \
               isinstance(focus_field, types.StringTypes)
        assert isinstance(row_style, FieldStyle) or callable(row_style)
        assert description is None or isinstance(description, types.StringTypes)
        assert help is None or isinstance(help, types.StringTypes)
        self._title = title
        self._singular = singular
        self._columns = columns
        self._layout = layout
        self._actions = actions
        self._sorting = sorting
        self._grouping = grouping
        self._redirect = redirect
        self._check = check
        self._cleanup = cleanup
        self._on_new_record = on_new_record
        self._on_edit_record = on_edit_record
        self._on_delete_record = on_delete_record
        self._on_line_commit = on_line_commit
        self._focus_field = focus_field
        self._description = description
        self._help = help
        self._row_style = row_style

    def title(self):
        """Vra» název náhledu jako øetìzec."""
        return self._title

    def singular(self):
        """Vra» název pro jednu polo¾ku náhledu jako øetìzec."""
        return self._singular

    def fields(self):
        """Vra» tuple specifikací v¹ech políèek v layoutu."""
        return self._fields
        
    def field(self, id):
        """Vra» specifikaci políèka daného 'id' jako instanci 'FieldSpec'.

        Pokud takové políèko neexistuje, vra» 'None'.
        
        """
        return self._field_dict.get(id)
        
    def layout(self):
        """Vra» specifikaci rozvr¾ení editaèního formuláøe."""
        return self._layout

    def columns(self):
        """Vra» tuple identifikátorù sloupcù pro tabulkový formuláø."""
        return self._columns

    def actions(self, linear=False):
        """Vra» specifikaci akcí."""
        def linearize(spec):
            actions = []
            for x in spec:
                if isinstance(x, Action):
                    actions.append(x)
                elif isinstance(x, ActionGroup):
                    actions.extend(linearize(x.actions()))
                elif isinstance(x, (types.TupleType, types.ListType)):
                    actions.extend(linearize(x))
                else:
                    raise ProgramError("Invalid action specification: %s" % x)
            return actions
        if linear:
            return linearize(self._actions)
        else:
            return self._actions

    def sorting(self):
        """Vra» specifikaci výchozího øazení."""
        return self._sorting

    def grouping(self):
        """Vra» tuple id sloupcù výchozího vizuálního seskupování."""
        return self._grouping

    def redirect(self):
        """Vra» funkci zaji¹»ující pøesmìrování na jiný název specifikace."""
        return self._redirect
        
    def cleanup(self):
        """Vra» funkci provádìjící akce pøi uzavøení formuláøe."""
        return self._cleanup

    def check(self):
        """Vra» funkci provádìjící kontrolu integrity záznamu."""
        return self._check

    def on_new_record(self):
        """Vra» funkci provádìjící vlo¾ení nového záznamu, nebo None."""
        return self._on_new_record

    def on_edit_record(self):
        """Vra» funkci provádìjící editaci záznamu, nebo None."""
        return self._on_edit_record

    def on_delete_record(self):
        """Vra» funkci provádìjící mazání záznamu, nebo None."""
        return self._on_delete_record

    def on_line_commit(self):
        """Vra» funkci volanou po ulo¾ení inline øádku."""
        return self._on_line_commit

    def focus_field(self):
        """Vra» øetìzec nebo funkci, urèující políèko formuláøe s fokusem."""
        return self._focus_field

    def description(self):
        """Vra» struèný popis náhledu."""
        return self._description

    def help(self):
        """Vra» podrobnou nápovìdu."""
        return self._help
    
    def row_style(self):
        """Vra» výchozí styl øádku, nebo funkci, která jej vypoète."""
        return self._row_style

    
class BindingSpec(object):
    """Specifikace vazby dvou náhledù pøi propojení do duálního formuláøe.

    Tato specifikace definuje vlastnosti napojení dvou formuláøù pøi jejich
    spojení do duálního formuláøe.  Definována je jak datová vazba, tak nìkteré
    prezentaèní vlastnosti spojení.

    Pou¾ití je následující:

    Funkce 'binding_spec' ve specifikaci libovolného náhledu vrací slovník
    v¹ech mo¾ných spojení tohoto náhledu s dal¹ími jinými náhledy.  Slovník je
    klíèován názvy specifikací a hodnotou je právì instance 'BindingSpec'.

    Kdy¾ je tedy napøíklad vytváøen duální formuláø 'A::B', bude ve specifikaci
    náhledu 'A' (v roli hlavního formuláøe) získána z 'binding_spec' polo¾ka
    pro náhled 'B' (v roli vedlej¹ího formuláøe).
    

    """
    
    def __init__(self, title, binding_column, side_binding_column=None,
                 hide_binding_column=True, description=None,
                 append_condition=None, sash_ratio=0.5,
                 orientation=Orientation.HORIZONTAL):
        
        """Inicializuj instanci.

        Argumenty:

          title -- titulek tohoto duálního spojení formuláøù jako øetìzec.
                        
          binding_column -- identifikátor vazebního sloupce.  Tento sloupec
            bude pou¾it pro filtrování vedlej¹ího formuláøe pøi pohybu po
            záznamech v hlavním formuláøi.  Filtrovací podmínka je implicitnì
            rovnost hodnot zvolených sloupcù hlavního a vedlej¹ího formuláøe.

          side_binding_column -- identifikátor vazebního sloupce ve vedlej¹ím
            formuláøi, pokud je jiný, ne¾ `binding_column'.  Výchozí hodnota
            `None' znamená, ¾e název vazebního sloupce je ve vedlej¹ím
            formuláøi stejný, jako v hlavním formuláøi.
            
          hide_binding_column -- vazební sloupec mù¾e být (a implicitnì je)
            ve vedlej¹ím formuláøi vypu¹tìn (jeho hodnota je pro v¹echny
            vyfiltrované záznamy shodná -- odpovídá hodnotì z hlavního
            formuláøe).

          description -- textový popis daného duálního spojení formuláøù.
            
          append_condition -- None nebo funkce jednoho argumentu, kterým je
            aktuální øádek hlavního formuláøe. V tomto pøípadì musí funkce
            vrátit instanci Operator, která se pøipojí k implicitní
            podmínce provazující vazební sloupce.

          sash_ratio -- pomìr rozdìlení plochy formuláøù jako desetinné èíslo v
            rozsahu od nuly do jedné.  Výchozí hodnota 0.5 znamená, ¾e
            rozdìlení bude pøesnì v polovinì a obìma formuláøùm tedy pøipadne
            stejná plocha.  Men¹i hodnota znamená men¹í horní formuláø, vìt¹í
            naopak.  Uplatní se pouze pøi zobrazení dvou øádkových formuláøù v
            horizontálním rozdìlení.  Pøi pøítomnosti editaèního formuláøe je
            poloha oddìlovaèe øízena jeho ¹íøkou/vý¹kou.
            
          orientation -- výchozí orientace duálního formuláøe jako konstanta
            'Orientation'.  V horizonálním rozdìlení jsou formuláøe nad sebou,
            ve vertikálním vedle sebe.

        """
        assert isinstance(title, types.StringTypes)
        assert isinstance(binding_column, types.StringTypes)
        assert description is None or isinstance(description, types.StringTypes)
        assert side_binding_column is None or \
               isinstance(side_binding_column, types.StringTypes)
        assert isinstance(hide_binding_column, types.BooleanType)
        assert append_condition is None or callable(append_condition)
        assert orientation in public_attributes(Orientation)
        assert isinstance(sash_ratio, types.FloatType) and 0 < sash_ratio < 1
        self._title = title
        self._binding_column = binding_column
        if side_binding_column is None:
            side_binding_column = binding_column
        self._side_binding_column = side_binding_column
        self._hide_binding_column = hide_binding_column
        self._description = description
        self._append_condition = append_condition
        self._sash_ratio = sash_ratio
        self._orientation = orientation
        

        
    def title(self):
        """Vra» titulek duálního formuláøe jako øetìzec."""
        return self._title

    def description(self):
        """Vra» nápovìdu pro formuláø."""
        return self._description
    
    def binding_column(self):
        """Vra» id vazebního sloupce hlavního formuláøe jako øetìzec."""
        return self._binding_column

    def side_binding_column(self):
        """Vra» id vazebního sloupce vedlej¹ího formuláøe jako øetìzec."""
        return self._side_binding_column

    def hide_binding_column(self):
        """Vra» pravdu, pokud má být vazební sloupec skryt ve vedlej¹ím fm."""
        return self._hide_binding_column

    def append_condition(self):
        """Vra» doplòující podmínku."""
        return self._append_condition
    
    def sash_ratio(self):
        return self._sash_ratio
    
    def orientation(self):
        return self._orientation

    
class DualSpec(BindingSpec):
    """Specifikace duálního formuláøe.
    
    POZOR: Tato tøída by ji¾ nemìla být pou¾ívána.  Namísto specifikaèní
    funkce 'dual_spec' samostatné duální specifikaci nech» je nyní
    pou¾ívána funkce 'binding_spec' ve specifikaci hlavního formuláøe.
    Více také viz 'BindingSpec'.
    
    """
    def __init__(self, main_name, side_name, binding_column, title="",
                 side_title=None, side_columns=None, **kwargs):
        """Inicializuj instanci.

        Argumenty:

          main_name -- jméno specifikace hlavního formuláøe; øetìzec.

          side_name -- jméno specifikace vedlej¹ího formuláøe; øetìzec.

          side_title -- titulek vedlej¹ího formuláøe jako øetìzec.  Pokud není
            None, bude v duálním formuløi pou¾it tento titulek, namísto titulku
            ze specifikace vedlej¹ího formuláøe.

          side_columns -- sekvence identifikátorù sloupcù vedlej¹ího formuláøe.
            Pokud je None, budou ve vedlej¹ím formuláøi zobrazeny v¹echny
            sloupce dané jeho specifikací.
            
        V¹echny ostatní argumenty jsou shodné jako u 'BindingSpec', pouze
        argument 'title' zde není povinný.

        """
        assert is_anystring(main_name)
        assert is_anystring(side_name)
        assert side_title is None or is_anystring(side_title)
        assert side_columns is None or is_sequence(side_columns)
        self._main_name = main_name
        self._side_name = side_name
        self._side_title = side_title
        self._side_columns = side_columns
        super(DualSpec, self).__init__(title, binding_column, **kwargs)

    def main_name(self):
        """Vra» název specifikace hlavního formuláøe jako øetìzec."""
        return self._main_name
        
    def side_name(self):
        """Vra» název specifikace vedlej¹ího formuláøe jako øetìzec."""
        return self._side_name
        
    def side_title(self):
        """Vra» titulek vedlej¹ího formuláøe jako øetìzec."""
        return self._side_title

    def side_columns(self):
        """Vra» seznam id sloupcù, vedlej¹ího formuláøe."""
        return self._side_columns


    

class Editable(object):
    """Výètová tøída definující konstanty urèující editovatelnost políèka."""
    ALWAYS = 'ALWAYS'
    """Políèko je editovatelné v¾dy."""
    ONCE = 'ONCE'
    """Políèko je editovatelné pouze jednou, pøi vytváøení nového záznamu."""
    NEVER = 'NEVER'
    """Políèko není editovatelné nikdy."""

    
class SelectionType(object):
    """Výètová tøída definující konstanty zpùsobu výbìru z mno¾iny hodnot."""
    CHOICE = 'CHOICE'
    """Výbìr z menu.  Viditelná je jen právì vybraná hodnota."""
    RADIO_BOX = 'RADIO_BOX'
    """Pro ka¾dou hodnotu je zobrazeno za¹krtávací políèko."""
    LIST_BOX = 'LIST_BOX'
    """Viditelná je vybraná hodnota a \"nìkolik\" kolem."""
    CODEBOOK = 'CODEBOOK'
    """Je mo¾ný pøímý zápis hodnoty nebo vyvolání èíselníkového formuláøe."""
    LIST = 'LIST'
    """Vícesloupcové/víceøádkové výbìrové políèko pro èíselníky."""

   
class PostProcess(object):
    "Výètová tøída definující konstanty pro zpùsob zpracování u¾iv. vstupu."
    UPPER = 'UPPER'
    """Pøeveï ve¹kerá písmena na velká."""
    LOWER = 'LOWER'
    """Pøeveï ve¹kerá písmena na malá."""

    
class TextFilter(object):
    """Výètová tøída definující konstanty pro zpùsob filtrování u¾iv. vstupu.
    """
    ASCII = 'ASCII'
    """Non-ASCII characters are filtered out."""
    ALPHA = 'ALPHA'
    """Non-alpha characters are filtered out."""
    FLOAT = 'FLOAT'
    """Non-alpha characters exclude '.' are filtered out."""    
    ALPHANUMERIC = 'ALPHANUMERIC'
    """Non-alphanumeric characters are filtered out."""
    NUMERIC = 'NUMERIC'
    """Non-numeric characters are filtered out."""
    INCLUDE_LIST = 'INCLUDE_LIST'
    """Use an include list.

    The validator checks if the user input is on the list, complaining if
    not.
    """
    EXCLUDE_LIST = 'EXCLUDE_LIST'
    """Use an exclude list.

    The validator checks if the user input is on the list, complaining if it
    is.
    """


class Computer(object):
    """Specifikace funkce pro dopoèítání hodnoty sloupce."""
    
    def __init__(self, function, depends=None):
        """Inicializuj specifikaci.

        Argumenty:

          function -- libovolná funkce vracející hodnotu kompatibilní s vnitøní
            hodnotou datového typu odpovídajícího sloupci, pro který je
            pou¾ita.
            
          depends -- seznam sloupcù, na kterých dané poèítané políèko závisí.
            Mìl by obsahovat v¹echny sloupce, které poèítací funkce pou¾ívá pro
            urèení výsledné hodnoty.  Hodnota potom bude pøepoèítána pouze
            pøi zmìnì v uvedených políèkách. Pokud je uveden prázdný seznam,
            nebude hodnota pøepoèítána nikdy (stále v¹ak bude vypoèítána pøi
            inicializaci formuláøe). Jedná se o seznam identifikátorù sloupcù
            jako øetìzcù.

        """
        import re
        assert callable(function)
        self._function = function
        if depends is None:
            raise ProgramError("Computer has no dependency specification!")
        assert is_sequence(depends)
        self._depends = depends

    def __call__(self, *args, **kwargs):
        return apply(self._function, args, kwargs)

    def function(self):
        """Vra» funkci zadanou v konstruktoru."""
        return self._function

    def depends(self):
        """Vra» seznam id sloupcù, ne kterých poèítaná hodnota závisí."""
        return self._depends    


class CbComputer(Computer):
    """Specializovaný computer, který získává hodnotu z èíselníku.
    
    Tento computer automaticky poskytuje dopoèítávací funkci, která získává
    hodnotu z nìkterého sloupce èíselníku navázaného na jiné políèko stejného
    náhledu.  Toho lze vyu¾ít u políèek, která ve skuteènosti jen zobrazují
    doplòující informace z èíselníku.

    Stejného efektu by sice ¹lo dosáhnout i pou¾itím standardního computeru s
    pøíslu¹nou dopoèítávací funkcí, ale tím by se u¾ivatelské rozhraní
    nedozvìdìlo nic o vazbì dopoèítávaného políèka na políèko s enumerátorem a
    nebylo by schopno poskytnout dal¹í u¾iteèné funkce, jako napøíklad otevøení
    náhledu èíselníku jako akce kontextového menu buòky, zobrazení klíèe
    èíselníku pøi aktivaci buòky, automatické urèení datového typu virtuálního
    políèka apod.

    """
    def __init__(self, field, column, default=None):
        """Inicializuj instanci.

        Argumenty:
        
          field -- identifikátor políèka ve stejném náhledu, které je spojeno s
            èíselníkem (jeho datový typ má enumerátor typu DataEnumerator).

          column -- sloupeèek datového objektu enumerátoru, který udává
            výslednou hodnotu dopoèítávací funkce.
        
        """
        assert isinstance(field, types.StringType)
        assert column is None or isinstance(column, types.StringType)
        self._field = field
        self._column = column
        self._default = default
        super(CbComputer, self).__init__(self._compute, depends=(field,))
        
    def _compute(self, row):
        cbvalue = row[self._field]
        if cbvalue.value() is not None:
            e = cbvalue.type().enumerator()
            assert e is not None, \
                   "CbComputer refers to '%s', which has no enumerator." \
                   % self._field
            value = e.get(cbvalue.value(), self._column)
            if value:
                return value.value()
        return self._default

    def field(self):
        """Vra» id políèka, jeho¾ enumerátor je pou¾it."""
        return self._field
    
    def column(self):
        """Vra» id sloupce datového objektu enumerátoru, který udává hodnotu."""
        return self._column
    
    
class CodebookSpec(object):
    """Specifikace vlastností náhledu pro jeho pou¾ití jako èíselníku.

    Nepovinná specifikaèní funkce 'cb_spec' mù¾e pomocí instance této tøídy
    upøesnit vlastnosti daného náhledu pro jeho pou¾ití v kontextu èíselníku.

    """
    def __init__(self, columns=None, sorting=None, display=None,
                 display_size=20, begin_search=None):
        
        """Inicializace a doplnìní výchozích hodnot atributù.

        Argumenty:
        
          columns -- sekvence identifikátorù sloupcù, které mají být zobrazeny
            v èíselníkovém formuláøi (tøída 'CodebookForm').  Pokud je 'None',
            bude èíselník zobrazovat v¹echny sloupce ze specifikace dané
            tabulky.
            
          sorting -- sekvence identifikátorù sloupcù, podle kterých mají být
            záznamy èíselníkového formuláøe setøídìny.  Pokud je 'None',
            bude pou¾ito tøídìní z ViewSpec.
            
          display -- pokud není 'None', urèuje zpùsob zístání u¾ivatelské
            hodnoty èíselníku (více o jejím vyu¾ití viz ní¾e).  Hodnotou mù¾e
            být buïto identifikátor sloupeèku v datovém objektu enumerátoru
            (bude zobrazena hodnota tohoto sloupeèku), nebo funkce jednoho
            argumentu (vnitøní Pythonová hodnota enumerátoru), která vrací
            u¾ivatelskou hodnotu (øetìzec).  Mù¾e být pødána také dvojice
            (funkce, identifikátor sloupeèku).  V tom pøípadì bude argumentem
            funkce hodnota daného sloupce, namísto sloupce vnitøní hodnoty.

          display_size -- ¹íøka políèka displeje ve znacích.  Lze také
            pøedefinovat stejnojmeným argumentem 'FieldSpec' pro konkrétní
            èíselníkové políèko.
          
          begin_search -- None nebo identifikátor sloupce, nad ním¾ se má
            spustit automatické inkrementální vyhledávání.

        U¾ivatelská hodnota èíselníku je vyu¾ívána v nìkolika situacích.  U
        bì¾ného èíselníkového plíèka typu `SelectionType.CODEBOOK' je pro její
        zobrazení vytvoøen displej.  U ostatních èíselníkových políèek
        (napø. CHOICE, RADIO apod.)  jsou u¾ivatelské hodnoty zobrazeny pøímo
        ve výbìru.  U¾ivatel v tomto pøípadì vnitøní hodnotu vùbec nevidí, ta
        je pou¾ívána pouze internì.  Dal¹ím pou¾itím u¾ivatelské hodnoty je
        zobrazení související èíselníkové hodnoty ve stavové øádce gridu (pøi
        aktivaci buòky její¾ hodnota pochází z èíselníku).
                    
        """
        assert columns is None or is_sequence(columns)
        assert sorting is None or is_sequence(sorting)
        assert display is None or isinstance(display, str) \
               or callable(display) or isinstance(display, tuple) \
               and callable(display[0]) and isinstance(display[1], str)
        assert display_size is None or isinstance(display_size, types.IntType)
        assert begin_search is None or isinstance(begin_search,types.StringType)
        self._columns = columns
        self._sorting = sorting
        self._display = display
        self._display_size = display_size
        self._begin_search = begin_search

    def columns(self):
        """Vra» seznam id sloupcù, zobrazených ve výbìrovém formuláøi."""
        return self._columns
        
    def sorting(self):
        """Vra» seznam id sloupcù, podle kterých má být èíselník setøídìn."""
        return self._sorting
        
    def display(self):
        """Vra» id sloupce zobrazovaného v displeji."""
        return self._display
        
    def display_size(self):
        """Vra» velikost displeje (poèet znakù)."""
        return self._display_size
        
    def begin_search(self):
        """Vra» identifikátor sloupce pro inkrementální vyhledávání."""
        return self._begin_search


class FormType(object):
    """Specifikace abstraktního typu formuláøe podle úèelu jeho otevøení.

    Tyto konstanty slou¾í k urèení zpùsobu otevøení náhledu.  Díky této
    abstrakci je specifikace nezávislá na pou¾itých tøídách u¾ivatelského
    rozhraní.  Definujeme pouze úèel, za kterým je formuláø otevírán a necháme
    u¾ivatelské rozhraní rozhodnout, který konkrétní formuláø je v dané situaci
    nejvhodnìj¹í.

    """
    
    BROWSE = 'BROWSE'
    """Otevøení øádkového náhledu v podobì tabulky."""
    
    VIEW = 'VIEW'
    """Otevøení needitovatelného náhledu jednoho záznamu."""
    
    EDIT = 'EDIT'
    """Otevøení editaèního formuláøe jednoho záznamu."""
    
    INSERT = 'INSERT'
    """Otevøení editaèního formuláøe pro vlo¾ení nového záznamu."""


class Link(object):
    """Specifikace odkazu políèka do jiného náhledu.

    Pou¾ívá se jako hodnota argumentu 'link' ve 'FieldSpec'.

    """
    
    def __init__(self, name, column, type=FormType.BROWSE, label=None):
        """Inicializuj instanci.

        Argumenty:

          name -- název specifikace odkazovaného náhledu jako øetìzec.

          column -- identifikátor sloupce v odkazovaném náhledu.  Slou¾í k
            vyhledání záznamu v odkazovaném náhledu, který odpovídá aktuální
            hodnotì odkazujícího políèka.

          type -- typ formuláøe, ve kterám bude odkazovaný náhled otevøen.
            Jedna z konstant 'FormType'.  Výchozím typem je 'FormType.BROWSE'.

          label -- titulek odkazu v menu.  Pokud není uveden, bude odkaz
            pojmenován automaticky a zaøazen mezi automaticky generované
            odkazy.  Pokud je titulek uveden, bude v u¾ivatelském rozhraní
            odkaz uveden samostatnì pøed v¹emi automaticky generovanými odkazy.
            
        """
        assert isinstance(name, types.StringType)
        assert isinstance(column, types.StringType)
        assert type in public_attributes(FormType)
        assert label is None or isinstance(label, types.StringTypes)
        self._name = name
        self._column = column
        self._type = type
        self._label = label
                
    def name(self):
        """Vra» název specifikace odkazovaného náhledu."""
        return self._name

    def column(self):
        """Vra» id odpovídajícího sloupce v odkazovaném náhledu."""
        return self._column

    def type(self):
        """Vra» konstantu typu formuláøe, který má být otevøen."""
        return self._type

    def label(self):
        """Vra» typ formuláøe, který má být otevøen."""
        return self._label

    
class FieldSpec(object):
    """Specifikace abstraktního políèka zobrazujícího datovou hodnotu.

    Tato specifikace je pou¾itelná pro v¹echny druhy práce s políèky
    zobrazujícími hodnoty, zejména v obrazovkových formuláøích, øádkových
    formuláøích a výstupních sestavách.

    Ka¾dý modul pracující s políèky si z této ponìkud komplexní specifikace
    vybírá pouze pro nìj relevantní informace.  Pøesný zpùsob interpretace
    tìchto specifikací závisí na tøídách implemenujících prvky u¾ivatelské
    rozhraní.  Detailní popis je proto v pøípadì této tøídy tøeba hledat v
    dokumentaci tøíd 'EditForm', 'ListForm', 'InputField' apod.

    """
    def __init__(self, id, label='', column_label=None, descr=None,
                 virtual=False, dbcolumn=None, type=None, type_=None,
                 width=None, column_width=None, fixed=False, height=None,
                 editable=None, compact=False, default=None,
                 computer=None, line_separator='; ', codebook=None,
                 display=None, display_size=None, allow_codebook_insert=False,
                 codebook_insert_spec=None, codebook_runtime_filter=None,
                 selection_type=None, orientation=Orientation.VERTICAL,
                 post_process=None, filter=None, filter_list=None, style=None,
                 link=(), **kwargs):
        """Inicializace a doplnìní výchozích hodnot atributù.

        Argumenty:

          id -- textový identifikátor pole; neprázdný øetìzec.  Pod tímto
            identifikátorem je potom pole pøístupné ve v¹ech operacích.
          
          label -- text nápisu u vstupního pole jako øetìzec.  Smí být uvádìn
            té¾ jako pozièní argument.  Poøadí je zaruèeno.
          
          column_label -- nadpis sloupce, je-li políèko ve sloupci, jako
            string.  Je-li 'None', je pou¾ita hodnota 'label'.
            
          descr -- podrobnìj¹í popis v rozsahu cca jedné vìty vhodný napøíklad
            pro zobrazení bublinové nápovìdy.

          virtual -- boolovský pøíznak.  Pokud je pravdivý, jde o virtuální
            políèko bez vazby na datový objekt.  Hodnota virtuálního políèka je
            nejèastìji vypoètena pomocí computeru (viz specifikaèní parametr
            'computer'.  Vzhledem k tomu, ¾e datový typ virtuálního políèka
            nelze urèit automaticky (z datového objektu), je výchozí typ
            stanoven napevno na 'pytis.data.String()'.  Pokud to nevyhovuje, je
            tøeba typ urèit explicitnì (viz specifikaèní parametr 'type').

          dbcolumn -- název pøíslu¹ného databázového sloupce.  Pokud není
            urèen, je název databázového sloupce shodný s identifikátorem
            políèka.  Toho je také doporuèováno vyu¾ívat pokud není nìjaký
            záva¾ný dùvod, aby byl název sloupce jiný, ne¾ identifikáor
            políèka.
          
          type -- explicitní urèení typu hodnoty, se kterou pracuje toto
            políèko; instance 'pytis.data.Type'.  Výchozí datový typ je urèen
            podle odpovídajícího sloupeèku datového objektu.  Pokud je v¹ak
            políèko virtuální (viz ní¾e), je nutné typ urèit explicitnì (s
            výjimkou virtuálních políèek pou¾ívajících 'CbComputer').  Typ
            mù¾eme také explicitnì pøedefinovat, pokud chceme pro prezentaci
            hodnot pou¾ít jiný typ, ne¾ výchozí typ datového rozhraní (ten v¹ak
            *musí* být kompatibilní s typem datového rozhraní).  Viz také
            metoda 'type()'.
            
          width -- ¹íøka pole ve znacích; kladné celé èíslo, nebo 0,
            v kterém¾to pøípadì je pole skryté.  Je-li 'None', bude pou¾ita
            implicitní ¹íøka.  U nìkterých typù vstupních políèek mù¾e mít
            speciální význam (viz jejich dokumentace).
            
          height -- vý¹ka pole ve znacích, kladné reálné èíslo.  U nìkterých
            typù vstupních políèek mù¾e mít speciální význam (viz jejich
            dokumentace).
          
          column_width -- ¹íøka sloupce v tabulce ve znacích, kladné celé
            èíslo.  Je-li 'None', je pou¾ita hodnota 'width'.
            
          fixed -- pokud bude pøadána pravdivá hodnota, nebude ¹íøka sloupce
            automaticky pøepoèítávána pøi zmìnì velikosti tabulkového
            formuláøe.  Implicitnì jsou sloupce automaticky
            roztahovány/zu¾ovány tak, aby byla rovnomìrnì vyu¾ita plocha
            formuláøe.  Hodnota 'width/column_width' tak slou¾í pouze jako
            výchozí hodnota.  Pro 'fixed' sloupce v¹ak bude v¾dy dodr¾ována.
            
          editable -- instance Computer nebo jedna z konstant tøídy 'Editable',
            urèující za jakých okolností je políèko editovatelné.  Je-li 'None',
            bude pou¾ita implicitní hodnota, kterou je obvykle
            'Editable.ALWAYS', ale pro nìkteré kombinace ostatních parametrù
            (napø. 'computer') mù¾e být implicitní hodnota jiná.
            Pokud je editable instancí tøídy `Computer', budou jeho funkci
            pøedány dva argumenty: instance PresentedRow a identifikátor
            políèka.
            
          compact -- pravdivá hodnota znamená, ¾e bude textový popisek políèka
            v editaèním formuláøi pøimknut k hornímu okraji vstupního prvku
            (bude tedy nad políèkem).  V opaèném pøípadì (výchozí chování) je
            popisek vlevo od políèka.
            
          default -- funkce pro výpoèet výchozí hodnoty políèka.  Callable
            object vracející hodnotu kompatibilní s vnitøní hodnotou
            odpovídajícího datového typu (viz argument 'type').
            
          computer -- 'instance tøídy 'Computer', nebo None.  Specifikuje
            dopoèítávané políèko (viz. také ní¾e).
            
          line_separator -- oddìlovaè øádkù v jednoøádkovém zobrazení
            víceøádkové hodnoty.  Tento argument smí být vyu¾íván pouze pro
            read-only políèka.
            
          codebook -- název specifikace èíselníku (øetìzec), nebo None.  Název
            specifikace èíselníku je normálnì pøebírán ze specifikace
            enumerátoru datového typu odpovídajícího sloupce v 'DataSpec'.
            Pokud v¹ak z nìjakého dùvodu datová specifikace není definována
            pomocí tøídy DataSpec, ale pøímo pomocí tøíd datového rozhraní,
            není tato informace aplikaci dostupná.  Potom je nutné název
            èíselníku urèit zde.
            
          display -- umo¾òuje definovat vlastní hodnotu displeje pro konkrétní
            pou¾ití èíselníku.  Pokud je None, bude pou¾ita hodnota z 'cb_spec'
            ve specifikaci èíselníku (co¾ by mìlo být také upøednostòováno).
            Pokud je pou¾ito, je význam stejný jako u stejnojmenného argumentu
            `CodebookSpec'.  Relevantní jen pro políèka výètových typù (datový
            typ má definován enumerátor).

          display_size -- velikost displeje èíselníku ve znacích.  Relevantní
            jen pro èíselníková políèka.  Pokud je None, bude pou¾ita hodnota z
            'cb_spec' ve specifikaci èíselníku.

          allow_codebook_insert -- Pravdivá hodnota povolí zobrazení tlaèítka
            pro pøidání nové hodnoty do èíselníku.  Relevantní jen pro
            èíselníková políèka.
            
          codebook_insert_spec -- Název specifikace, která má být pou¾ita pro
            vkládání nových záznamù (viz 'allow_codebook_insert').  Pokud je
            None, bude pou¾ita hodnota 'codebook', nebo její výchozí hodnota.
            Relevantní jen pro èíselníková políèka, kde 'allow_codebook_insert'
            je pravdivé.
            
          codebook_runtime_filter -- dopoèítávaè run-time filtrovací podmínky
            èíselníku; instance `Computer'.  Tím je umo¾nìno mìnit mno¾inu
            hodnot navázaného èíselníku za bìhu.  Navázaná dopoèítávací funkce
            dostane jako argument aktuální data formuláøe jako instanci
            'PresentedRow' a vrací filtrovací podmínku typu
            'pytis.data.Operator'.  Èíselník bude po zmìnì závislých políèek
            aktualizován tak, aby obsahoval pouze øádku vyhovující dané
            podmínce.
            
          selection_type -- zpùsob výbìru z mno¾iny hodnot, jedna z konstant
            tøídy 'SelectionType'.  Relevantní jen pro vstupní pole výètových
            typù (datový typ má urèen enumerátor).
            
          orientation -- orientace políèka, jedna z konstant tøídy
            'Orientation'; relevantní jen u nìkterých typù vstupních polí, jako
            napø. 'inputfield.RadioBoxInputField'.
            
          post_process -- funkce upravující vkládaný text bìhem psaní.  Jedná
            se o funkci jednoho argumentu, kterým je øetìzcová hodnota políèka.
            Vrácená hodnota je potom nastavena jako nová hodnota políèka.  Tato
            funkce je volána pøi ka¾dé zmìnì hodnoty textového políèka.
            Pøíkladem postprocessingu mù¾e být zmìna velikosti písmen, pokud
            chceme, aby textové políèko mohlo obsahovat jen velká písmena.
            Hodnotou tohoto argumentu mù¾e být také nìkterá z konstant tøídy
            'PostProcess', èím¾ je u¹etøeno psaní nìkterých èasto pou¾ívaných
            funkcí.
            
          filter -- specifikace jednoho z pøednastavených filtrù znakù
            propou¹tìných do textového políèka z u¾ivatelského vstupu.  Jedna
            z konstant tøídy 'TextFilter'.
            
          filter_list -- sekvence povolených, nebo zakázaných znakù.
            Relevantní jen pro 'filter' typu 'INCLUDE_LIST' nebo
            'EXCLUDE_LIST'.
            
          style -- instance tøídy 'FieldStyle' urèující vizuální styl políèka
            nebo funkce dvou argumentù vracející instanci tøídy 'FieldStyle'.
            Jedná-li se o funkci, jsou jejími argumenty id sloupce jako string
            a aktuální datový øádek jako instance 'PresentedRow'.  Pokud je
            None, bude pou¾it výchozí styl øádku (viz. argument 'row_style'
            konstruktoru 'ViewSpec').

          link -- specifikace odkazu/odkazù do jiného náhledu souvisejícího s
            hodnotou políèka.  Instance 'Link' nebo jejich sekvence.  V
            kontextovém menu øádku bude pro ka¾dý odkaz vytvoøena jedna polo¾ka
            umo¾òující odskok do odkazovaného náhledu s vyhledáním záznamu
            odpovídajícího aktuální hodnotì políèka.

        V¹echny dal¹í argumenty, které budou konstruktoru pøedány jsou
        pova¾ovány za argumenty konstruktoru datového typu.  Pøedání argumentù
        konstruktoru tímto zpùsobem je preferováno pøed pøedáním instance typu.
        Nìkteré argumenty takto ani pøedat nelze, jako napøíklad `enumerator'
        který je vytváøen automaticky podle argumentu `codebook'.  To v¹ak
        platí jen pøi pou¾ití tøídy `Specification' pro sestavení datové
        specifikace.
            
        Je-li specifikován argument 'computer' a jeho hodnota není 'None', pak
        hodnota sloupce, pokud ji nelze pøevzít z datového objektu, je
        poèítána.  Takový sloupec mù¾e být plnì \"virtuální\", tj. není
        pøítomen v datovém objektu a jeho hodnota je v¾dy poèítána, nebo mù¾e
        být v datovém objektu, av¹ak hodnota je dopoèítávána v prùbìhu editace
        (i novì vytvoøeného) záznamu.  Pou¾ití plnì virtuálních sloupcù není
        doporuèováno z dùvodu výkonnostních problémù v rozsáhlej¹ích
        tabulkových náhledech.  U plnì virtuálních políèek je také nutné urèit
        explicitnì datový typ pomocí specifikátoru 'type', proto¾e není mo¾né
        jej pøevzít automaticky z datového objektu.  Jedinou výjimkou jsou
        dopoèítávaná virtuální políèka typu 'CbComputer', kde je typ pøevzat z
        datového objektu enumerátoru.

        Dopoèítávání pomocí 'computer' nelze zamìòovat s výpoètem výchozí
        hodnoty (specifikátor 'default').  Výpoèet výchozí hodnoty je proveden
        pouze jednou pøi vytváøení nového øádku.  Funkce pro výpoèet výchozí
        hodnoty nezná hodnotu ostatních políèek a v prùbìhu editace se ji¾
        neuplatòuje.  Computer naproti tomu pøepoèítává hodnotu políèka v¾dy,
        kdy¾ dojde ke zmìnì hodnoty políèka, na kterém je závislý (viz
        dokumentace tøídy 'Computer').

        Závislosti poèítaných políèek mohou být i tranzitivní (poèítaná políèka
        mohou záviset na jiných poèítaných políèkách), ale graf závislostí musí
        tvoøit strom (nesmí vzniknout cyklus).
        
        V ka¾dém pøípadì je poèítaný sloupec implicitnì needitovatelný
        ('Editable.NEVER'), pokud není explicitnì nastaven jako editovatelný
        pomocí specifikátoru 'editable'.

        """
        assert isinstance(id, str)
        assert dbcolumn is None or isinstance(dbcolumn, str)
        self._id = id
        self._dbcolumn = dbcolumn or id
        if type_ is not None:
            assert type is None
            type = type_
        assert label is None or is_anystring(label)
        assert descr is None or is_anystring(descr)
        assert type is None or isinstance(type, pytis.data.Type)
        assert isinstance(virtual, bool)
        assert isinstance(fixed, bool)
        assert default is None or callable(default)
        assert computer is None or isinstance(computer, Computer)
        assert codebook is None or isinstance(codebook, str)
        assert display is None or isinstance(display, str) \
               or callable(display) or isinstance(display, tuple) \
               and len(display) == 2 and callable(display[0]) \
               and isinstance(display[1], str)
        assert display_size is None or isinstance(display_size, int)
        assert isinstance(allow_codebook_insert, bool)
        assert codebook_insert_spec is None \
               or isinstance(codebook_insert_spec, str)
        assert width is None or isinstance(width, int)
        assert codebook_runtime_filter is None \
               or isinstance(codebook_runtime_filter, Computer)
        assert selection_type is None \
               or selection_type in public_attributes(SelectionType)
        assert orientation in public_attributes(Orientation)
        assert post_process is None or callable(post_process) \
               or post_process in public_attributes(PostProcess)
        assert filter is None or filter in public_attributes(TextFilter)
        assert filter not in ('INCLUDE_LIST','EXCLUDE_LIST') \
               or is_sequence(filter_list)
        if editable is None:
            if width == 0 or computer: editable = Editable.NEVER
            else: editable = Editable.ALWAYS
        assert editable in public_attributes(Editable) \
               or isinstance(editable, Computer)
        assert style is None or isinstance(style, FieldStyle) \
               or callable(style), ('Invalid field style', id, style)
        links = xtuple(link)
        if __debug__:
            for lnk in links:
                assert isinstance(lnk, Link)
            for arg in kwargs.keys():
                assert arg in ('not_null', 'value_column', 'validity_column',
                               'validity_condition', 'constraints',
                               'validation_messages', 'precision', 'maxlen',
                               'format', 'mindate', 'maxdate'), arg
        self._label = label
        self._descr = descr
        self._width = width
        if column_width is None:
            column_width = width
        self._column_width = column_width
        self._column_label = column_label
        if virtual and type is None:
            type = pytis.data.String()
        self._virtual = virtual
        self._fixed = fixed
        self._type = type
        self._compact = compact
        self._default = default
        self._computer = computer
        self._height = height
        self._editable = editable
        self._line_separator = line_separator
        self._codebook = codebook
        self._display = display
        self._display_size = display_size
        self._allow_codebook_insert = allow_codebook_insert
        self._codebook_insert_spec = codebook_insert_spec
        self._codebook_runtime_filter = codebook_runtime_filter
        self._orientation = orientation
        self._selection_type = selection_type
        self._post_process = post_process
        self._filter = filter
        self._filter_list = filter_list
        self._style = style
        self._links = links
        self._type_kwargs = kwargs
        
    def __str__(self):
        return "<FieldSpec for '%s'>" % self.id()
        
    def id(self):
        """Vra» id pole zadané v konstruktoru jako string."""
        return self._id

    def dbcolumn(self):
        return self._dbcolumn
    
    def type(self, data=None):
        """Vra» datový typ ze specifikace, nebo z datového sloupce.

        Pokud byl typ explicitnì urèen v konstruktoru, bude vrácen tento typ,
        jinak bude vrácen typ urèený sloupeèkem datového objektu pøedaného jako
        argument.
        
        """
        type = self._type
        if data:
            column = data.find_column(self.id())
            if type is not None:
                assert column is None or \
                       isinstance(type, column.type().__class__)
            elif column is not None:
                type = column.type()
            elif isinstance(self._computer, CbComputer):
                cb_column = data.find_column(self._computer.field())
                enumerator = cb_column.type().enumerator()
                type = enumerator.type(self._computer.column())
                assert type is not None, \
                     "Invalid enumerator column '%s' in CbComputer for '%s'." \
                     % (self._computer.column(), self.id())
                    
            else:
                raise ProgramError("Data type not specified "
                                   "for virtual column '%s'." % self.id())
        return type

    def virtual(self):
        return self._virtual
    
    def label(self):
        """Vra» textový popisek tohoto pole jako string."""
        return self._label

    def column_label(self):
        """Vra» textový popisek pro nadpis sloupce v tabulkovém zobrazení.

        Pokud nebyl nadpis sloupce (`column_width') v konstruktoru
        specifikován, bude vrácen popisek políèka (metoda `label()').
            
        """
        if self._column_label is None:
            return self.label()
        else:
            return self._column_label

    def descr(self):
        """Vra» podrobnìj¹í popis (nápovìdu) tohoto pole jako string."""
        return self._descr

    def width(self, default=12):
        """Vra» ¹íøku pole ve znacích; kladné celé èíslo.

        Argumenty:

          default -- hodnota, která má být doplnìna v pøípadì, ¾e ¹íøka nebyla
            v konstruktoru specifikována; integer.

        """
        if self._width is None:
            return default
        else:
            return self._width

    def column_width(self, default=10):
        """Vra» ¹íøku sloupce ve znacích; kladné celé èíslo.

        Argumenty:

          default -- hodnota, která má být doplnìna v pøípadì, ¾e v
            konstruktoru nebyla specifikována ani ¹íøka sloupce, ani ¹íøka
            políèka.

        Pokud nebyla ¹íøka sloupce (`column_width') v konstruktoru
        specifikována, bude vrácena obecná ¹íøka políèka (výsledek metody
        `width()').
            
        """
        if self._column_width is None:
            return self.width(default)
        else:
            return self._column_width

    def fixed(self):
        """Vra» pravdu, pokud jde o sloupec s fixní ¹íøkou."""
        return self._fixed
        
    def height(self, default=1):
        """Vra» vý¹ku políèka ve znacích

        Argumenty:

          default -- hodnota, která má být doplnìna v pøípadì, ¾e vý¹ka nebyla
            v konstruktoru specifikována; integer.
            
        """
        if self._height is None:
            return default
        else:
            return self._height

    def editable(self):
        """Vra» jednu z konstant 'Editable' dle editovatelnosti políèka."""
        return self._editable

    def compact(self):
        """Vra» pravdu, má li být popisek pøimknut k hornímu okraji políèka."""
        return self._compact

    def default(self):
        """Vra» funkci pro výpoèet výchozí hodnoty."""
        return self._default

    def computer(self):
        """Vra» instanci 'Computer' pro dopoèítávání hodnoty."""
        return self._computer

    def line_separator(self):
        """Vra» odddìlovaè øádkù zadaný v konstruktoru."""
        return self._line_separator
    
    def codebook(self, data=None):
        """Vra» název specifikace navázaného èíselníku."""
        if data is not None:
            enumerator = self.type(data).enumerator()
            if isinstance(enumerator, pytis.data.DataEnumerator) and \
                   isinstance(enumerator.data_factory(), DataSpec):
                return enumerator.data_factory().origin() or self._codebook
        return self._codebook

    def display_size(self):
        """Vra» velikost displeje èíselníku (poèet znakù)."""
        return self._display_size

    def display(self):
        """Vra» hodnotu `display' zadanou v konstruktoru."""
        return self._display

    def allow_codebook_insert(self):
        """Vra» pravdu, má-li být  zobrazeno tlaèítko pøidání do èíselníku."""
        return self._allow_codebook_insert
    
    def codebook_insert_spec(self):
        """Vra» název specifikace pro vkládání do èíselníku, nebo None."""
        return self._codebook_insert_spec
    
    def codebook_runtime_filter(self):
        """Vra» specifikaci computeru run-time podmínky pro èíselník."""
        return self._codebook_runtime_filter

    def selection_type(self):
        """Vra» zpùsob výbìru z mno¾iny hodnot jako konstantu 'SelectionType'.
        """
        return self._selection_type

    def orientation(self):
        """Vra» orientaci políèka jako konstantu 'Orientation'."""
        return self._orientation

    def post_process(self):
        """Vra» funkci zpracovávající u¾ivatelský vstup."""
        return self._post_process

    def filter(self):
        """Vra» typ filtru jako konstantu tøídy TextFilter."""
        return self._filter

    def filter_list(self):
        """Vra» seznam povolených/zakázaných znakù pro filter."""
        return self._filter_list

    def style(self):
        """Vra» specifikaci stylu políèka zadanou v konstruktoru."""
        return self._style

    def links(self):
        """Vra» specifikaci odkazu zadanou v konstruktoru."""
        return self._links

    def type_kwargs(self):
        return self._type_kwargs



class DataSpec(pytis.data.DataFactory):
    """Tøída zjednodu¹ující tvorbu datové specifikace.

    Konstruktor této tøídy pøijímá argumenty ve zjednodu¹ené formì a schovává
    tak nìkteré nízkoúrovòové detaily pøed tvùrcem specifikace.  Oproti
    rodièovské tøídì je podstatnì omezena obecnost, ale v typickém pøípadì
    pou¾ití datového rozhraní v Pytis aplikaci je specifikace pøi pou¾ití této
    tøídy nejen pøehlednìj¹í, ale také flexibilnìj¹í.

    Podrobný popis rozhraní viz. konstruktor tøídy.

    POZOR: Namísto této tøídy je vhodnìj¹í pou¾ívat tøídu 'Specification' ní¾e.
    Ta zajistí sestavení datové specifikace zcela automaticky, tak¾e samostatné
    udr¾ování datových specifikací ji¾ není potøeba.  Pokud se tøída
    'Specification' osvìdèí, je mo¾né ¾e tato tøída bude v budouvnu zru¹ena.

    """
    
    def __init__(self, table, columns, key, oid=None, access_rights=None,
                 data_class_=pytis.data.DBDataDefault):
        """Inicializuj specifikaci.

        Argumenty:

          table -- název datové tabulky jako øetìzec.
          
          columns -- sekvence specifikací sloupcù jako instancí 'Column'.
            Jedná se v¾dy o sloupce z tabulky 'table'.
            
          key -- název klíèového sloupce jako øetìzec.  Sloupec s tímto
            identifikátorem musí být pøítomný v 'columns'.
            
          oid -- seznam názvù OID sloupcù (tuple).  Pokud je None (výchozí
            hodnota), bude doplnìn jeden sloupec s názvem 'oid'.  Pro v¹echny
            uvedené sloupce budou automaticky pøidány pøíslu¹né vazby.  Pokud
            tabulka nemá ¾ádný mít ¾ádný oid sloupec, uvedeme prázdný seznam.
            Pokud je sloupec jen jeden, není nutno jej obalovat do tuplu.
            
          access_rights -- práva jako instance 'pytis.data.AccessRights' nebo
            None, pokud mají být práva neomezená.
            
          data_class_ -- tøída datového objektu, odvozená od `Data'.
            
        Pokud 'columns' neobsahují sloupec s identifikátorem 'oid', bude
        automaticky doplnìn sloupec 'oid' typu 'pytis.data.Oid'.

        """
        assert isinstance(table, types.StringType)
        assert isinstance(columns, (types.ListType, types.TupleType))
        assert isinstance(key, types.StringType)
        assert isinstance(key, (types.StringType, types.ListType,
                                types.TupleType)) or oid is None
        assert isinstance(access_rights, pytis.data.AccessRights) \
               or access_rights is None
        assert find(key, columns, key=lambda c: c.id()) is not None
        if __debug__:
            for c in columns:
                assert isinstance(c, Column)
        if oid is None:
            if find('oid', columns, key=lambda c: c.id()):
                oid = ()
            else:    
                oid = ('oid',)
        else:
            oid = xtuple(oid)
            for c in oid:
                assert isinstance(c, types.StringType)
        if access_rights is None:
            perm = pytis.data.Permission.ALL
            access_rights = pytis.data.AccessRights((None, (None, perm)))
        columns += tuple([Column(c, type=pytis.data.Oid()) for c in oid])
        bindings = []
        for c in columns:
            e = c.enumerator()
            if e:
                enumerator = resolver().get(e, 'data_spec')
                if isinstance(enumerator, DataSpec):
                    enumerator.set_origin(e)
            else:
                enumerator = None
            bindings.append(pytis.data.DBColumnBinding(c.id(), table,
                                                       c.column(),
                                                       enumerator=enumerator,
                                                       type_=c.type(),
                                                       **c.kwargs()))
        key = find(key, bindings, key=lambda b: b.column())
        super(DataSpec, self).__init__(data_class_, bindings, key,
                                       access_rights=access_rights)
        self._origin = None
        
    def set_origin(self, name):
        """Nastav pùvodce této specifikace.

          Argumentem je název specifikace pro resolver.

        Instance si takto mù¾e pamatovat ze které specifikace pochází a tato
        infomace mù¾e být v aplikaci dále vyu¾ita.  Je to trochu hack, ale
        umo¾ní to velké zjednodu¹ení
        
        """
        # TODO: Je to trochu hack, ale umo¾òuje to velké zjednodu¹ení ve
        # specifikacích.  Pokud by ¹el název specifikace zjistit nìjak èistìji,
        # tak by to urèitì nebylo na ¹kodu.  Takto jsme omezeni na pou¾ití této
        # tøídy (s DataFactory tuto informaci nemáme).  Mo¾ná nìjaké roz¹íøení
        # na úrovni resloveru?
        self._origin = name
        
    def origin(self):
        """Vra» název specifikace, ze které tato instance pochází.

        Pokud je pùvod znám, je vrácen název pro resolver, jinak None.
 
        """
        return self._origin

    
class Column(object):
    """Specifikace sloupce pro datovou specifikaci 'DataSpec'."""
    
    def __init__(self, id, column=None, enumerator=None, type=None, **kwargs):
        """Inicializuj specifikaci.

        Argumenty:
        
          id -- identifikátor sloupce (øetìzec).  Pod tímto identifikátorem
            bude sloubec vystupovat v aplikaci.
            
          column -- název databázového sloupce (øetìzec nebo None).  Implicitnì
            je doplnìna hodnota 'id', tak¾e pokud se název sloupce
            shoduje s identifikátorem, není jej tøeba definovat.
            
          enumerator -- název specifikace pro resolver (øetìzec nebo None).  Z
            této specifikace bude získán datový objekt a pou¾it jako enumerátor
            hodnot datového typu.
            
          type -- explicitní urèení datového typu sloupce (instance
            'pytis.data.Type', nebo None).  Tento argument by mìl být pou¾it
            pouze pokud chceme urèit vlastní (odvozený) datový typ, nikoliv
            pokud chceme mìnit parametry standardních typù.  Ty je mo¾no
            nastavit pøedáním klíèovách argumentù (viz ní¾e).
            
          **kwargs -- pokud jsou uvedeny jakékoliv dal¹í klíèové argumenty,
            budou tyto pøedány konstruktoru datového typu sloupce.  Tento
            postup by mìl být preferován pøed explicitní definicí instance typu
            argumentem 'type', pokud je to mo¾né.

        """
        assert isinstance(id, types.StringType), \
               "Invalid value for argument 'id': %s" % id
        assert isinstance(column, types.StringType) or column is None, \
               "Invalid value for argument 'column': %s" % column
        assert isinstance(enumerator, types.StringType) or enumerator is None, \
               "Invalid value for argument 'enumerator': %s" % enumerator
        assert isinstance(type, pytis.data.Type) or type is None, \
               "Invalid value for argument 'type': %s" % type
        assert enumerator is None or type is None \
               or isinstance(type, pytis.data.Codebook), \
               "Invalid codebook type: %s" % type
        assert type is None or kwargs == {}, \
               "When the 'type' is defined explicitly, " + \
               "using kwargs makes no sense: %s" % kwargs
        self._id = id
        if column is None:
            column = id
        self._column = column
        self._enumerator = enumerator
        self._type = type
        self._kwargs = kwargs
    
    def id(self):
        """Vra» identifikátor sloupce jako øetìzec."""
        return self._id
    
    def column(self):
        """Vra» název sloupce v datovém zdroji jako øetìzec."""
        return self._column

    def enumerator(self):
        """Vra» název specifikace enumerátoru jako øetìzec nebo None."""
        return self._enumerator

    def type(self):
        """Vra» datový typ sloupce jako instanci 'pytis.data.Type' nebo None."""
        return self._type
    
    def kwargs(self):
        """Vra» slovník klíèových argumentù konstruktoru datového typu."""
        return self._kwargs


class Specification(object):
    """Souhrnná specifikaèní tøída sestavující specifikace automaticky.

    Tato tøída zjednodu¹uje vytváøení specifikací tím, ¾e definuje vlastní
    pravidla pro sestavování jak prezentaèní tak datové specifikace pouze na
    základì jediné specifikace políèek a nìkterých dal¹ích vlastností.

    Pou¾ití: Specifikaci vytvoøíme odvozením specifikaèní tøídy náhledu od této
    tøídy a pøedefinováním jejich veøejných atributù.  To ulehèuje tvorbu
    variant náhledù s vyu¾itím dìdiènosti.

    Význam atributù: Nìkteré atrubuty jsou definovány pøímo touto tøídou --
    jejich význam je zdokumentován v rámci jejich dokumentaèních øetìzcù.
    V¹echny ostatní veøejné atributy, které odvozená tøída definuje budou
    pøedány jako stejnojmenné argumenty konstruktoru 'ViewSpec'.

    """
    
    table = None
    """Název datové tabulky jako øetìzec.

    Pokud název není urèen, bude odvozen automaticky z názvu specifikaèní
    tøídy.  Kapitálky jsou pøevedeny na slova oddìlená podtr¾ítkem, tak¾e
    napø. pro specifikaèní tøídu 'UcetniOsnova' bude název tabulky
    'ucetni_osnova'.  Z hlediska pøehlednosti je doporuèováno volit toto jmenné
    schéma a vyhnout se tak explicitnímu urèování názvù tabulek.

    """

    key = None
    """Identifikátor klíèového sloupce jako øetìzec, nebo jejich sekvence.

    Pokud má tabulka vícenásobný klíè, udáme sekvenci identifikátorù
    pøíslu¹ných sloupcù.  Vyjmenované sloupce se musí nacházet ve specifikaci
    'fields'.  Pokud klíè není definován, bude automaticky za klíèový pova¾ován
    první sloupec z 'fields'.

    """

    oid = None
    """Specifikace názvù OID sloupcù (tuple).

    Pokud je None (výchozí hodnota), bude doplnìn jeden sloupec s názvem 'oid'.
    Pro v¹echny uvedené sloupce budou automaticky pøidány pøíslu¹né vazby.
    Pokud tabulka nemá ¾ádný mít ¾ádný oid sloupec, uvedeme prázdný seznam.
    Pokud je sloupec jen jeden, není nutno jej obalovat do tuplu.
    """

    access_rights = None
    """Pøístupová práva náhledu jako instance 'AccessRights'."""

    data_cls = pytis.data.DBDataDefault
    """Datová tøída pou¾itá pro vytvoøení datového objektu."""

    fields = ()
    """Specifikace políèek jako sekvence instancí 'FieldSpec'.
    
    Pokud nejde o sekvenci, ale o metodu, je tato metoda v okam¾ik sestavování
    specifikace zavolána a sekvence políøèek je oèekávána jako její návratová
    hodnota.
    
    """
    
    bindings = {}
    """Specifikace vazeb pro pou¾ití v duálních formuláøích.
    
    Slovník, kde klíèem je název specifikace vedlej¹ího formuláøe a hodnotou je
    instance 'BindingSpec' urèující jak se tento náhled vá¾e s danám vedlej¹ím
    náhledem.
    
    """
    
    cb = CodebookSpec()
    """Specifikace vlastností náhledu pøi jeho pou¾ití jako èíselkíku.
    
    Instance CodebookSpec.
    """
    
    prints = None
    """Specifikace tiskových náhledù.
    
    Sekvence dvojic (titulek, název tiskové specifikace).
    
    """
    
    def __init__(self, resolver):
        self._resolver = resolver
        if callable(self.fields):
            self.fields = self.fields()
        assert self.fields, 'No fields defined for %s.' % str(self)
        assert isinstance(self.fields, (list, tuple))
        self._view_spec_kwargs = {}
        for attr in dir(self):
            if not (attr.startswith('_') or attr.endswith('_spec') or \
                    attr in ('table', 'key', 'access_rights', 'oid',
                             'data_cls', 'bindings', 'cb', 'prints')):
                self._view_spec_kwargs[attr] = getattr(self, attr)
        for arg in ('layout', 'actions'):
            try:
                value = self._view_spec_kwargs[arg]
            except:
                continue
            if callable(value):
                self._view_spec_kwargs[arg] = value()

    def _create_data_spec(self):
        def e(name):
            return name and self._resolver.get(name, 'data_spec')
        if issubclass(self.data_cls, pytis.data.DBData):
            table = self.table or \
                    camel_case_to_lower(self.__class__.__name__, '_')
            bindings = [pytis.data.DBColumnBinding(f.id(), table, f.dbcolumn(),
                                                   enumerator=e(f.codebook()),
                                                   type_=f.type(),
                                                   **f.type_kwargs())
                        for f in self.fields if not f.virtual()]
            if self.oid is None:
                oid = ('oid',)
            else:
                oid = xtuple(oid)
                for c in oid:
                    assert isinstance(c, types.StringType)
            for o in oid:
                oidcol = pytis.data.DBColumnBinding(o, table, o,
                                                    type_=pytis.data.Oid()
                                                    )
                bindings.append(oidcol)
            if self.key:
                bdict = dict([(b.column(), b) for b in bindings])
                key = [bdict[k] for k in self.key]
            else:
                key = bindings[0]
            args = (bindings, key,)
        else:
            # TODO: Pøevod datových typù má mnohá omezení, ale zaènìme
            # nìèím jednodu¹¹ím a dodìlejme co bude potøeba a¾ se uká¾e,
            # ¾e je to skuteènì potøeba...
            columns = []
            for f in self.fields:
                if not f.virtual():
                    type = f.type() or pytis.data.String()
                    kwargs = copy.copy(f.type_kwargs())
                    enum = e(f.codebook())
                    assert f.type() is None or not kwargs and not enum, \
                           ("Nelze urèit zároveò typ a jeho argumenty.",
                            f.id(), kwargs, enum)
                    if enum:
                        df_kwargs = {'dbconnection_spec': config.dbconnection}
                        e_kwargs = {'data_factory_kwargs': df_kwargs}
                        for a in ('value_column', 'validity_column',
                                  'validity_condition'):
                            if kwargs.has_key(a):
                                e_kwargs[a] = kwargs[a]
                                del kwargs[a]
                        enumerator = pytis.data.DataEnumerator(enum, **e_kwargs)
                        kwargs['enumerator'] = enumerator
                    if kwargs:
                        type = type.__class__(**kwargs)
                    columns.append(pytis.data.ColumnSpec(f.id(), type))
            args = (columns,)
        access_rights = self.access_rights
        if access_rights is None:
            perm = pytis.data.Permission.ALL
            access_rights = pytis.data.AccessRights((None, (None, perm)))
        return pytis.data.DataFactory(self.data_cls, *args, 
                                      **dict(access_rights=access_rights))

    def _create_view_spec(self, title=None, **kwargs):
        if not title:
            title = ' '.join(split_camel_case(self.__name__))
        return ViewSpec(title, **kwargs)

    def view_spec(self):
        """Vra» prezentaèní specifikaci jako instanci 'ViewSpec'."""
        try:
            spec = self._view_spec
        except AttributeError:
            kwargs = self._view_spec_kwargs
            spec = self._view_spec = self._create_view_spec(**kwargs)
        return spec
        
    def data_spec(self):
        """Vra» datovou specifikaci jako instanci datové tøídy."""
        try:
            spec = self._data_spec
        except AttributeError:
            spec = self._data_spec = self._create_data_spec()
        return spec
        
    def cb_spec(self):
        """Vra» specifikaci èíselníku jako instanci 'CodebookSpec'."""
        return self.cb
    
    def binding_spec(self):
        """Vra» specifikaci navázání v duálním formuláøi jako slovník."""
        return self.bindings

    def print_spec(self):
        """Vra» sekvenci specifikací tiskových náhledù."""
        return self.prints


