# -*- coding: iso-8859-2 -*-
#
# Copyright (C) 2009, 2010, 2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Pytis CMS specifications.

Pytis CMS is a fat client application for management of database structures, which define the
behavior of a web application.

Wiking modules which implement a Wiking application, which reads these database structures and
behaves according to them can be found in the 'web' submodule of this module.

"""

import socket
import lcg
import config
import pytis.data as pd, pytis.presentation as pp
from pytis.presentation import Field, Fields, HGroup, VGroup, Binding, Action, CodebookSpec, \
     Computer, CbComputer, computer

ASC = pd.ASCENDENT
DESC = pd.DESCENDANT
ALWAYS = pp.Editable.ALWAYS
ONCE = pp.Editable.ONCE
NEVER = pp.Editable.NEVER

def nextval(seq):
    def conn_spec():
        return config.dbconnection
    counter = pd.DBCounterDefault(seq, conn_spec)
    return lambda transaction=None: counter.next(transaction=transaction)


class _TreeOrder(pp.PrettyFoldable, pd.String):
    def __init__(self, **kwargs):
        super(_TreeOrder, self).__init__(tree_column_id='tree_order',
                                         subcount_column_id='tree_order_nsub',
                                         **kwargs)


class Specification(pp.Specification):
    access_rights = pd.AccessRights((None, (('cms_user', 'cms_admin'), pd.Permission.ALL)))
    public = True
    def _spec_name(self, name, needed_in_wiking=True):
        # Hack to allow namespaced spec names in wx app and plain module names in Wiking (the
        # specification is inherited by the Wiking Module).
        return 'cms.'+ name


class Languages(Specification):
    title = _("Jazyky")
    help = _("Správa jazykù dostupných v CMS.")
    table = 'cms_languages'
    def fields(self): return (
        Field('lang_id', default=nextval('cms_languages_lang_id_seq')),
        Field('lang', _("Kód"), width=2, column_width=6, fixed=True,
              filter=pp.TextFilter.ALPHANUMERIC, post_process=pp.PostProcess.LOWER),
        Field('name', _("Název"), virtual=True,
              computer=computer(lambda record, lang: self._language_name(lang))),
        )
    def _language_name(self, lang):
        import os
        lcg_dir = os.environ.get('LCGDIR', '/usr/local/share/lcg')
        translation_dir = os.path.join(lcg_dir, 'translations')
        t = lcg.GettextTranslator('cs', path=(translation_dir,), fallback=True)
        return t.translate(lcg.language_name(lang))
    def cb(self):
        return CodebookSpec(display=lambda lang: self._language_name(lang), prefer_display=True)
    sorting = ('lang', ASC),
    layout = ('lang',)
    columns = ('lang', 'name')


class Modules(Specification):
    title = _("Moduly")
    help = _("Správa roz¹iøujících modulù pou¾itelných ve stránkách.")
    table = 'cms_modules'
    access_rights = pd.AccessRights((None, ('cms_admin', pd.Permission.ALL)),
                                    (None, ('cms_user', pd.Permission.VIEW)))
    def fields(self): return (
        Field('mod_id', default=nextval('cms_modules_mod_id_seq')),
        Field('modname', _("Název"), width=32),
        Field('descr', _("Popis"), width=64, virtual=True, computer=computer(self._descr)),
        )
    def _module(self, modname):
        if modname:
            for python_module_name in self._SEARCH_MODULES:
                python_module = __import__(python_module_name)
                if hasattr(python_module, modname):
                    module = getattr(python_module, modname)
                    import wiking
                    if type(module) == type(wiking.Module) and issubclass(module, wiking.Module):
                        return module
        return None
    def _descr(self, rrecord, modname):
        module = self._module(modname)
        if module:
            return module.descr() or module.title()
        else:
            return None
    sorting = ('modname', ASC),
    cb = CodebookSpec(display='modname', prefer_display=True)
    layout = ('modname', 'descr')
    columns = ('modname', 'descr')
    def bindings(self):
        return (Binding('actions', _("Dostupné akce tohoto modulu"), self._spec_name('Actions'),
                        'mod_id'),)
    def actions(self):
        return (Action('reload', _("Pøenaèíst dostupné akce"), self._reload_actions),)
    def on_delete_record(self, record):
        import pytis.form
        data = pytis.form.create_data_object(self._spec_name('Menu'))
        count = data.select(condition=pd.EQ('mod_id', record['mod_id']))
        data.close()
        if count:
            return _("Modul je pou¾íván v existujících stránkách.\n"
                     "Pokud jej chcete vymazat, zru¹te nejprve v¹echny navázané stránky.")
        else:
            return True
    #def on_new_record(self, prefill, transaction=None):
    #    import pytis.form
    #    record = pytis.form.new_record(self._spec_name('Modules'), prefill=prefill,
    #                                   block_on_new_record=True, transaction=transaction)
    #    if record:
    #    
    #    return record
    def _reload_actions(self, record):
        import wiking
        def action_descr(module, action):
            if issubclass(module, wiking.PytisModule):
                for a in module.Spec.actions:
                    if a.name() == action:
                        return a.descr() or a.title()
            try:
                return dict(self._DEFAULT_ACTIONS)[action]
            except KeyError:
                method = getattr(module, 'action_'+action)
                docstring = method.__doc__
                return docstring and docstring.splitlines()[0] or _(u"Neuvedeno")
        module = self._module(record['modname'].value())
        if module:
            from pytis.form import run_dialog, CheckListDialog, create_data_object
            data = create_data_object(self._spec_name('Actions'))
            data.select(condition=pd.EQ('mod_id', record['mod_id']))
            existing_actions = {}
            while True:
                row = data.fetchone()
                if row is None:
                    break
                else:
                    existing_actions[row['name'].value()] = row['action_id']
            data.close()
            actions = [attr[7:] for attr in dir(module)
                       if attr.startswith('action_') and callable(getattr(module, attr))]
            default_actions = [a[0] for a in self._DEFAULT_ACTIONS]
            # Order default actions first and in the order of self._DEFAULT_ACTIONS.
            order = lambda a: a in default_actions and (default_actions.index(a)+1) or a
            actions.sort(lambda a, b: cmp(order(a), order(b)))
            descriptions = [action_descr(module, action) for action in actions] 
            result = run_dialog(CheckListDialog, title=_("Nalezené akce"),
                                message=_("Za¹krtnìte akce, které chcete zpøístupnit webovým "
                                          "u¾ivatelùm:"),
                                items=zip([a in existing_actions for a in actions],
                                          actions, descriptions),
                                columns=(_("Akce"), _("Popis")))
            if result is not None:
                # TODO: Use a transaction.  Respect existing actions.
                for i, action in enumerate(actions):
                    if result[i]:
                        description_value = pd.Value(pd.String(), descriptions[i] or None)
                        try:
                            key = existing_actions[action]
                        except KeyError:
                            rowdata = [('mod_id', record['mod_id']),
                                       ('name', pd.Value(pd.String(), action)),
                                       ('description', description_value)]
                            data.insert(pd.Row(rowdata))
                        else:
                            data.update((key,), pd.Row((('description', description_value),)))
                        
    _DEFAULT_ACTIONS = (
        ('view',    _(u"Zobrazení záznamu")),
        ('list',    _(u"Výpis v¹ech záznamù")),
        ('export',  _(u"Export tabulky do CSV formátu")),
        ('rss',     _(u"Zobrazení RSS kanálù")),
        ('insert',  _(u"Vlo¾ení nového záznamu")),
        ('update',  _(u"Editace stávajícího záznamu")),
        ('delete',  _(u"Smazání záznamu")),
        ('print_field', _(u"Export tisknutelných políèek do PDF")),
        )
    _SEARCH_MODULES = ()
    """Defines list of names python modules which should be searched for available Wiking modules.

    Should be defined in the derived class to make module descriptions work.
    
    """


class MenuParents(Specification):
    # Codebook of parent items for Menu (to prevent recursion).
    title = _("Menu")
    table = 'cms_menu'
    def fields(self): return (
        Field('menu_id'),
        Field('menu_item_id'),
        Field('tree_order'),
        Field('lang'),
        Field('title_or_identifier', _("Název"), width=32, type=_TreeOrder),
        Field('identifier', _("Identifikátor"), width=20),
        Field('modname', _("Modul")),
        #Field('description', _("Popis"), width=64),
        )
    sorting = ('tree_order', ASC),
    columns = ('title_or_identifier', 'identifier', 'modname')
    cb = CodebookSpec(display='title_or_identifier', prefer_display=True)


class Menu(Specification):
    title = _("Menu")
    help = _("Správa polo¾ek hlavního menu, jejich hierarchie a obsahu.")
    table = 'cms_menu'
    def _parent_filter(self, record, lang):
        return pd.EQ('lang', pd.Value(pd.String(), lang))
    def fields(self): return (
        Field('menu_id'),
        Field('menu_item_id'),
        Field('tree_order'),
        Field('tree_order_nsub'),
        Field('identifier', _("Identifikátor"), width=20, fixed=True, editable=ONCE,
              type=pd.RegexString(maxlen=32, not_null=True, regex='^[a-zA-Z][0-9a-zA-Z_-]*$'),
              descr=_("Identifikátor bude vystupovat jako vnìj¹í adresa stránky.  Mù¾e být pou¾it "
                      "v odkazech na tuto stránku v rámci textu jiných stránek. Platný "
                      "identifikátor mù¾e obsahovat pouze písmena bez diakritiky, èíslice, "
                      "pomlèky a podtr¾ítka a musí zaèínat písmenem.")),
        Field('lang', _("Jazyk"), editable=ONCE, codebook=self._spec_name('Languages'),
              value_column='lang', selection_type=pp.SelectionType.CHOICE),
        Field('title_or_identifier', _("Název"), width=30, type=_TreeOrder),
        Field('title', _("Název"), width=20, not_null=True, maxlen=32,
              descr=_("Název polo¾ky menu - krátký a výsti¾ný.")),
        Field('heading', _("Nadpis"), width=32, maxlen=40,
              descr=_("Hlavní nadpis pøi zobrazení stránky.  Pokud ponecháte nevyplnìné, "
                      "pou¾ije se název polo¾ky.  Ten je ale nìkdy kvùli pou¾ití v menu pøíli¹ "
                      "krátký, tak¾e zde je mo¾né urèit jeho del¹í variantu.")),
        Field('description', _("Popis"), width=72,
              descr=_("Struèný popis stránky (zobrazen v menu jako tooltip).")),
        Field('content', _("Obsah"), type=pd.StructuredText(), compact=True, height=20, width=80,
              descr=_("Text stránky formátovaný jako LCG strukturovaný text (wiki)")),
        Field('mod_id', _("Modul"), not_null=False,
              codebook=self._spec_name('Modules', False), allow_codebook_insert=True,
              descr=_("Vyberte roz¹iøující modul zobrazený uvnitø stránky.  Ponechte prázdné pro "
                      "prostou textovou stránku.")),
        Field('modname', _("Modul")),
        Field('parent', _("Nadøízená polo¾ka"), not_null=False,
              codebook=self._spec_name('MenuParents', False), value_column='menu_item_id',
              runtime_filter=computer(self._parent_filter),
              descr=_("Vyberte bezprostøednì nadøízenou polo¾ku v hierarchii menu.  Ponechte "
                      "prázdné pro stránky na nejvy¹¹í úrovni menu.")),
        Field('published', _("Zveøejnìno"), width=6, default=True, fixed=True, 
              descr=_("Umo¾òuje øídit dostupnost dané polo¾ky nezávisle pro ka¾ou jazykovou "
                      "verzi.")),
        Field('ord', _("Poøadí"), width=8, editable=ALWAYS, fixed=True, 
              descr=_("Zadejte èíslo urèující poøadí polo¾ky v menu (mezi stránkami na stejné "
                      "úrovni hierarchie.  Pokud nevyplníte, stránka bude automaticky zaøazena "
                      "na konec.")),
        )
    def _check_menu_order_condition(self, record):
        # Return a list of 'pd.Operator' instances to find menu items with duplicate order at the
        # same level.  The returned operators will be applied in conjunction.  Designed to allow
        # overriding in a derived class with more complicated menu structure.
        return [pd.EQ('parent', record['parent']),
                pd.EQ('ord', record['ord']),
                pd.NE('menu_item_id', record['menu_item_id'])]
    def check(self, record):
        data = record.data()
        if record['parent'].value() is not None:
            if record['parent'].value() == record['menu_item_id'].value():
                return ('parent', _("Polo¾ka nemù¾e být nadøízená sama sobì."))
            if not record.new():
                # A new record can't be a parent of existing records.
                condition = pd.AND(pd.EQ('menu_item_id', record['parent']),
                                   pd.LTreeDescendant('tree_order', record['tree_order']))
                count = data.select(condition=condition)
                data.close()
                if count:
                    return ('parent', _("Nelze pøiøadit podøízenou polo¾ku jako nadøízenou "
                                        "(cyklus v hierarchii)."))
        count = data.select(condition=pd.AND(*self._check_menu_order_condition(record)))
        data.close()
        if count:
            return ('ord', _("Stejné poøadové èíslo u¾ má jiná polo¾ka na této úrovni menu."))

        
    def on_delete_record(self, record):
        data = record.data()
        count = data.select(condition=pd.EQ('parent', record['menu_item_id']))
        data.close()
        if count:
            return _("Polo¾ka má podøízené polo¾ky.\n"
                     "Pokud ji chcete vymazat, vyma¾te nejprve v¹echny podpolo¾ky.")
        else:
            return True
    def row_style(self, record):
        if not record['published'].value():
            return pp.Style(foreground='#777', background='#eee')
        else:
            return None
    sorting = ('tree_order', ASC),
    layout = (VGroup('identifier', 'parent', 'mod_id', 'ord',
                     label=_("Globální vlastnosti (spoleèné pro v¹echny jazyky)")),
              VGroup('lang', 'title', 'heading', 'description', 'content', 'published',
                     label=_("Text stránky (pro aktuální jazykovou verzi)")))
    columns = ('title_or_identifier', 'identifier', 'modname', 'ord', 'published')
    def bindings(self):
        return (
            Binding('rights', _("Pøístupová práva"), self._spec_name('Rights'),
                    condition=lambda r: pd.EQ('menu_item_id', r['menu_item_id']),
                    prefill=lambda r: {'menu_item_id': r['menu_item_id'].value(),
                                       'mod_id': r['mod_id'].value()}),
            )


class Users(Specification):
    title = _("U¾ivatelé")
    help = _("Správa u¾ivatelských úètù, které je poté mo¾no zaøazovat do rolí.")
    table = 'cms_users'
    def fields(self): return (
        Field('uid', _("UID"), width=5, default=nextval('cms_users_uid_seq')),
        Field('login', _("Pøihla¹ovací jméno"), width=16),
        Field('fullname', _("Celé jméno"), width=40),
        Field('passwd', _("Heslo"),
              type=pd.Password(not_null=True, minlen=4, md5=True)),
        )
    layout = ('login', 'fullname', 'passwd')
    columns = ('uid', 'login', 'fullname')
    cb = CodebookSpec(display='fullname')
    sorting = (('login', ASC),)
    def bindings(self):
        return (Binding('roles', _("U¾ivatelské role"), self._spec_name('UserRoles'), 'uid'),
                Binding('sessions', _("Historie pøihlá¹ení"), self._spec_name('UserSessionLog'),
                        'uid'),
                )


class Roles(Specification):
    title = _("U¾ivatelské role")
    help = _("Správa dostupných u¾ivatelských rolí, které je mo¾né pøiøazovat u¾ivatelùm.")
    table = 'cms_roles'
    def fields(self): return (
        Field('role_id', default=nextval('cms_roles_role_id_seq')),
        Field('name', _("Název"), width=16),
        Field('system_role', _("Systémová role"), width=16, not_null=True),
        Field('description', _("Popis"), width=64),
        )
    layout = ('name', 'description')
    columns = ('name', 'description')
    condition = pd.EQ('system_role', pd.Value(pd.String(), None))
    def bindings(self): return (
        Binding('users', _("U¾ivatelé zaøazení do této role"), self._spec_name('RoleUsers'),
                'role_id'),
        )
    cb = CodebookSpec(display='name')

class SystemRoles(Roles):
    title = _("Systémové role")
    help = _("Systémové role jsou u¾ivatelùm pøiøazeny automaticky.")
    layout = columns = ('name', 'system_role', 'description')
    condition = pd.NE('system_role', pd.Value(pd.String(), None))
    bindings = ()
    access_rights = pd.AccessRights((None, ('cms_admin', pd.Permission.ALL)),
                                    (None, ('cms_user', pd.Permission.VIEW)))


class AllRoles(Roles):
    title = _("Role")
    help = _("Role dostupné pro pøiøazování práv akcím (obsahuje systémové i u¾ivatelsky definované role).")
    condition = None

    
class UserRoles(Specification):
    title = _("Pøiøazení u¾ivatelských rolí")
    help = _("Správa pøiøazení u¾ivatelských rolí jednotlivým u¾ivatelùm.")
    table = 'cms_user_roles'
    def fields(self): return (
        Field('user_role_id', default=nextval('cms_user_role_assignment_user_role_id_seq')),
        Field('role_id', _("Role"), codebook=self._spec_name('Roles', False)),
        Field('system_role'),
        Field('uid', _('UID'), codebook=self._spec_name('Users', False), width=5),
        Field('login', _("Pøihla¹ovací jméno"), width=16),
        Field('fullname', _("Celé jméno"), width=50),
        Field('name', _("Název role"), width=16),
        Field('description', _("Popis"), width=50))
    layout = ('role_id',)
    columns = ('name', 'description')


class RoleUsers(UserRoles):
    help = _("Správa pøiøazení u¾ivatelù jednotlivým u¾ivatelským rolím.")
    layout = ('uid',)
    columns = ('uid', 'login', 'fullname')


class Actions(Specification):
    title = _("Dostupné akce")
    help = _("Výèet podporovaných akcí pro jednotlivé moduly.")
    table = 'cms_actions'
    access_rights = pd.AccessRights((None, ('cms_admin', pd.Permission.ALL)),
                                    (None, ('cms_user', pd.Permission.VIEW)))
    def fields(self): return (
        Field('action_id', default=nextval('cms_actions_action_id_seq')),
        Field('mod_id', _("Modul"), codebook=self._spec_name('Modules', False)),
        Field('name', _("Název"), width=16),
        Field('description', _("Popis"), width=64))
    sorting = (('action_id', ASC),)
    layout = ('name', 'description')
    columns = ('name', 'description')
    cb = CodebookSpec(display='name')

    
class GenericActions(Actions):
    title = _("Akce spoleèné pro v¹echny polo¾ky menu")
    help = _("Výèet podporovaných akcí spoleèných pro v¹echny polo¾ky menu.")
    condition = pd.EQ('mod_id', pd.Value(pd.Integer(), None))
    access_rights = pd.AccessRights((None, ('cms_admin', pd.Permission.ALL)),
                                    (None, ('cms_user', pd.Permission.VIEW)))

    
class Rights(Specification):
    title = _("Pøístupová práva")
    help = _("Pøiøazení práv k akcím modulù pro jednotlivé u¾ivatelské role.")
    table = 'cms_rights'
    def fields(self): return (
        Field('rights_assignment_id',
              default=nextval('cms_rights_assignment_rights_assignment_id_seq')),
        Field('menu_item_id'),
        Field('role_id', _("Role"), codebook=self._spec_name('AllRoles', False)),
        Field('role_name', _("Role")),
        Field('system_role'),
        Field('mod_id'),
        Field('action_id', _("Akce"), codebook=self._spec_name('Actions', False),
              runtime_filter=computer(self._action_filter)),
        Field('action_name', _("Akce")),
        Field('action_description', _("Popis"), width=30, editable=NEVER),
        )
    grouping = 'role_id'
    sorting = (('role_name', ASC), ('mod_id', DESC), ('action_id', ASC))
    columns = ('role_name', 'action_name', 'action_description')
    layout = ('role_id', 'action_id')
    def _action_filter(self, record, mod_id):
        return pd.OR(pd.EQ('mod_id', record['mod_id']),
                     pd.EQ('mod_id', pd.Value(pd.Integer(), None)))
    def row_style(self, record):
        if not record['mod_id'].value():
            return None
        else:
            return pp.Style(background='#ffd')
        

class _Log(Specification):
    public = False
    def fields(self): return (
        Field('ip_address', _("IP adresa"), width=12, editable=NEVER),
        Field('hostname', _("Hostname"), virtual=True, computer=computer(self._hostname),
              column_width=15, width=40),
        Field('user_agent', _("User agent"), column_width=25, width=80),
        Field('referer', _("Referer"), column_width=25, width=80))
    def _hostname(self, row, ip_address):
        try:
            hostname = socket.gethostbyaddr(ip_address)[0]
        except:
            hostname = _("Neznámý")
        return hostname
        
class SessionLog(_Log):
    title = _("Log pøihlá¹ení")
    help = _("Záznam informací o pøihlá¹ení u¾ivatelù k webu.")
    table = 'cms_session_log'
    public = True
    def fields(self): return (
        Field('log_id'),
        Field('session_id'),
        Field('uid', codebook=self._spec_name('Users')),
        Field('login', _("Login"), width=8),
        Field('fullname', _("Jméno"), width=15),
        Field('success', _("Úspìch"), width=3),
        Field('start_time', _("Zaèátek"), width=17),
        Field('duration', _("Trvání"), width=17),
        Field('active', _("Aktivní")),
        ) + super(SessionLog, self).fields()
    def row_style(self, row):
        if row['success'].value():
            return None
        else:
            return pp.Style(foreground='#f00')
    layout = ('start_time', 'duration', 'active', 'success', 'fullname', 'login',
              'ip_address', 'hostname', 'user_agent', 'referer')
    columns = ('start_time', 'duration', 'active', 'success', 'fullname', 'login',
               'ip_address', 'user_agent')
    sorting = (('start_time', DESC),)

    
class UserSessionLog(SessionLog):
    """Login log customization for user sideform."""
    public = True
    layout = ('start_time', 'duration', 'active', 'success', 'ip_address', 'hostname',
              'user_agent', 'referer')
    columns = ('start_time', 'duration', 'active', 'success', 'ip_address', 'user_agent')


class AccessLog(_Log):
    title = _("Log pøístupù")
    help = _("Záznam informací o pøístupu u¾ivatelù k jednotlivým stránkám/modulùm webu.")
    table = 'cms_access_log_data'
    public = True
    def fields(self): return (
        Field('log_id'),
        Field('timestamp', _("Datum a èas"), width=17),
        Field('uri', _("Cesta"), width=17),
        Field('uid', _("U¾ivatel"), codebook=self._spec_name('Users')),
        Field('modname', _("Modul"), width=17),
        Field('action', _("Akce"), width=17),
        ) + super(AccessLog, self).fields()
    layout = ('timestamp', 'uri', 'uid', 'modname', 'action',
              'ip_address', 'hostname', 'user_agent', 'referer')
    columns = ('timestamp', 'uri', 'uid', 'modname', 'action',
               'ip_address', 'user_agent', 'referer')
    sorting = (('timestamp', DESC),)

    
class Themes(Specification):
    class _Field(Field):
        def __init__(self, id, label, descr=None):
            Field.__init__(self, id, label, descr=descr, type=pd.Color(),
                           dbcolumn=id.replace('-','_'))
    title = _("Barevné Motivy")
    help = _("Správa barevných motivù.")
    table = 'cms_themes'
    fields = (
        Field('theme_id'),
        Field('name', _("Název"), nocopy=True),
        _Field('foreground', _("Text"),
               descr=("Barva popøedí hlavních obsahových ploch.")),
        _Field('background', _("Pozadí"),
               descr=("Barva pozadí hlavních obsahových ploch (vlastní text stránky, panely).")),
        _Field('highlight-bg', _("Zvýraznìné pozadí"),
               descr=_("Zvýraznìní pomocí barvy pozadí mù¾e být pou¾ito na rùzných místech, "
                       "napø. pro odli¹ení aktuální polo¾ky menu, aktuálního jazyka, nalezeného "
                       "záznamu ve formuláøi apod.")),
        _Field('link', _("Odkaz"),
               descr=_("Barva textu nenav¹tíveného odkazu.")),
        _Field('link-visited', _("Nav¹tívený odkaz"),
               descr=_("Barva textu nav¹tíveného odkazu.  Pokud ponecháte prázdné, bude "
                       "pou¾ita stejná barva jako u nenav¹tíveného odkazu.")),
        _Field('link-hover', _("Aktivní odkaz"),
               descr=_("Obarvení odkazu pøi pøi pohybu my¹í nad ním.  Pokud ponecháte "
                       "prázdné, nebude odkaz na pohyb my¹i reagovat.")),
        _Field('border', _("Orámování")),
        _Field('heading-fg', _("Text"),
               descr=_("Barvy nadpisù jsou pou¾ívány pro zvýrazenìní názvù kapitol, panelù a "
                       "jiných elementù majících povahu nadpisu èi záhlaví.  V závislosti na "
                       "pou¾itých stylech mohou nìkteré typy nadpisù pou¾ívat odli¹nou barvu "
                       "pozadí, jiné mohou být pouze podtr¾eny (viz dále).  Barva textu je "
                       "v¹ak spoleèná pro oba typy nadpisù.")),
        _Field('heading-bg', _("Pozadí"),
               descr=_("Barva pozadí pro nadpisy, které pou¾ívají zvýraznìní barvou pozadí."
                       "Typicky jsou to záhlaví èástí stránky (menu, panely apod.) a nadpisy "
                       "vy¹¹ích úrovní.")),
        _Field('heading-line', _("Podtr¾ení"),
               descr=_("Barva podtr¾ení pro nadpisy, které pou¾ívají zvýraznìní podtr¾ením."
                       "Typicky jsou to nadpisy ni¾¹ích úrovní.")),
        _Field('frame-fg', _("Text"),
               descr=_("Rámy jsou obecnì vyu¾ívány pro odli¹ení samostatných prvkù stránky, "
                       "jako jsou napøíklad formuláøe, nástrojové li¹ty, rejstøíky apod. "
                       "Rámy v tomto smyslu nemají nic spleèného s HTML rámy (frame).  Pokud "
                       "barvu textu nevyplníte, bude pou¾ita standardní barva textu (èasto u "
                       "rámù budete chtít nastavit pouze barvu pozadí a orámování).")),
        _Field('frame-bg', _("Pozadí"),
               descr=_("Barva pozadí rámù pro jejich vizuální odli¹ení od ostatního obsahu "
                       "stránky.")),
        _Field('frame-border', _("Orámování"),
               descr=_("Barva orámování okrajù plochy rámu na pøechodu mezi barvou pozadí rámu "
                       "a jeho podkladem.")),
        _Field('top-fg', _("Text"),
               descr=_("Na podkladových plochách se vìt¹inou text pøímo nevyskytuje, ale "
                       "nìkteré styly to mohou pøedepisovat.")),
        _Field('top-bg', _("Pozadí"),
               descr=_("Podkladové plochy tvoøí okolí hlavního obsahu stránky a panelù.")),
        _Field('top-border', _("Orámování"),
               descr=_("Urèuje barvu rámeèku na pøechodu mezi podkladovou plochou a obsahovými "
                       "èástmi stránky")),
        _Field('error-fg', _("Text")),
        _Field('error-bg', _("Pozadí")),
        _Field('error-border', _("Orámování")),
        _Field('message-fg', _("Text")),
        _Field('message-bg', _("Pozadí")),
        _Field('message-border', _("Orámování")),
        _Field('meta-fg', _("Text")),
        _Field('meta-bg', _("Pozadí"),
               descr=_("Odli¹ení informaèního øádku v detailních výpisech, jako napø. "
                       "informace o datu a autorovi v seznamu èlánkù")),
        _Field('table-cell', _("Standardní pozadí buòky")),
        _Field('table-cell2', _("Stínované pozadí buòky")),
        _Field('help', _("Nápovìda formuláøe")),
        _Field('inactive-folder', _("Neaktivní zálo¾ka")),
        )
    layout = pp.HGroup(pp.VGroup(
        'name',
        pp.LVGroup(_("Standardní barvy stránky"),
                   ('foreground', 'background', 'highlight-bg', 'link', 'link-visited',
                    'link-hover', 'border')),
        pp.LVGroup(_("Tabulky"),
                   ('table-cell', 'table-cell2')),
        pp.LVGroup(_("Rùzné"),
                   ('help', 'inactive-folder')),
        ), pp.VGroup(
        pp.LVGroup(_("Barvy nadpisù"),
                   ('heading-fg', 'heading-bg', 'heading-line')),
        pp.LVGroup(_("Rámy"),
                   ('frame-fg', 'frame-bg', 'frame-border')),
        pp.LVGroup(_("Meta data záznamu"),
                   ('meta-fg', 'meta-bg')),
        pp.LVGroup(_("Barvy podkladových ploch"),
                   ('top-bg', 'top-border')),
        ), pp.VGroup(
        pp.LVGroup(_("Chybové zprávy"),
                   ('error-fg', 'error-bg', 'error-border')),
        pp.LVGroup(_("Informaèní zprávy"),
                   ('message-fg', 'message-bg', 'message-border')),
        ))
    columns = ('name',)
    cb = CodebookSpec(display='name', prefer_display=True)

