# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001-2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""Tøídy pro zpøístupnìní tabulkových dat z rùzných zdrojù.

Základem pøístupu k datùm je tøída 'Data' definující obecné rozhraní pøístupu
k tabulkovým datùm.  Pøedpokládá se, ¾e právì s touto tøídou budou schopny
pracovat ostatní moduly programu, které potøebují získávat nebo pøedávat vìt¹í
mno¾ství tabulkových dat, zejména z objektù jako jsou databáze.  Specializované
podtøídy umo¾òují pøístup k rùzným zdrojùm dat, viz napøíklad tøída
'dbdata.DBData'.

Kromì tøídy 'Data' modul definuje je¹tì pomocnou tøídu 'Row' reprezentující
jeden øádek dat a pomocnou tøídu 'ColumnSpec' pou¾ívanou pro specifikaci
sloupcù instancí tøídy 'Data'.

K dispozici jsou také abstraktní tøídy pro pokroèilej¹í databázové funkce, viz
napøíklad tøídy 'Counter' a 'Function'.  Tyto tøídy je nutno chápat jako
volitelné, konkrétní databázový backend nemusí nabízet ¾ádnou jejich konkrétní
implementaci.

"""

import copy
import string
import types

import pytis.util
from pytis.data import *


FORWARD = 'FORWARD'
"""Konstanta pro dopøedný posun v 'Data.fetchone'."""
BACKWARD = 'BACKWARD'
"""Konstanta pro zpìtný posun v 'Data.fetchone'."""

def opposite_direction(direction):
    """Vra» smìr opaèný k 'direction'.

    'direction' i vrácený výsledek jsou nìkteré z konstant 'FORWARD' a
    'BACKWARD'.

    """
    if direction == FORWARD:
        return BACKWARD
    elif direction == BACKWARD:
        return FORWARD
    else:
        raise ProgramError('Invalid direction', direction)


ASCENDENT = 'ASCENDENT'
"""Konstanta pro vzestupné tøídìní."""
DESCENDANT = 'DESCENDANT'
"""Konstanta pro sestupné tøídìní."""



### Datové tøídy


class Operator:
    """Conditional operator for the 'select()' method.

    The instances of this class define a data filtering condition.  An operator
    is given by its name, operands (constructor arguments) and parameters
    (keyword arguments).  See the functions 'AND', 'OR', 'NOT', 'EQ', 'NE',
    'LE', 'GT', 'WM' and others for convenient constructors of some well known
    operators.

    The instances of this class are immutable and hashable.
    
    When the operators are compared or hashed, the data type of all operands
    (arguments passed to the constructor) which are 'Value' instances are
    ignored.  Thus two operators are considered equal if just the inner python
    values of their operands match.  This is because they represent the same
    condition even if the data types of the operands differ in their parameters
    (for example one is String(not_null=True) and the other is
    String(not_null=False)).

    """
    def __init__(self, name, *args, **kwargs):
        """Vytvoø operátor 'name' s argumenty 'args' a 'kwargs'.

        Argumenty:

          name -- jméno operátoru jako øetìzec
          args -- argumenty operátoru
          translation -- pøeklad operátoru na primitivní operátory, instance
            'Operator'
          kwargs -- pojmenované (klíèové) argumenty operátoru

        """
        self._name = name
        self._translation = kwargs.pop('translation', None)
        self._args = args
        self._kwargs = kwargs

    def name(self):
        """Vra» jméno operátoru zadané v konstruktoru."""
        return self._name

    def translation(self):
        """Vra» pøeklad operátoru zadaný v konstruktoru."""
        return self._translation

    def args(self):
        """Vra» tuple argumentù operátoru zadaných v konstruktoru."""
        return self._args

    def kwargs(self):
        """Vra» dictionary klíèových argumentù zadaných v konstruktoru."""
        return self._kwargs

    def logical(self):
        """Vra» pravdu, právì kdy¾ se jedná o logický operátor.

        Logické operátory jsou 'AND', 'OR' a 'NOT'.  Ostatní operátory jsou
        relaèní.
        
        """
        return self._name in ('AND', 'OR', 'NOT')
    
    def _relaxed_args(self):
        """Return self._args, with Value instances transformed to ignore their type attributes.

        So the attributes of data type instances don't figure in the result.
        Only their class is taken into account.  This is necessary to avoid the
        influence of data types attributes on the results of __cmp__ and
        __hash__.

        """
        def relax(arg):
            if isinstance(arg, (Value, WMValue)):
                return (arg.type().__class__, arg.value())
            else:
                return arg
        return [relax(arg) for arg in self._args]

    def __str__(self):
        args = string.join(map(str, self.args()), ', ')
        return '%s (%s)' % (self.name(), args)

    def __cmp__(self, other):
        if sameclass(self, other):
            return cmp(self._name, other._name) or \
                   cmp(self._relaxed_args(), other._relaxed_args()) or \
                   cmp(self._kwargs, other._kwargs)
        else:
            return compare_objects(self, other)

    def __hash__(self):
        return (hash(self._name) ^
                hash(tuple(self._relaxed_args())) ^
                hash(tuple(self._kwargs.items())))


class Data(object_2_5):
    """Základní abstrakce pøístupu k tabulkovým datùm.

    Tabulková data jsou rozdìlena do sloupcù a øádkù.  Tøída umo¾òuje pracovat
    s øádky dat zpùsobem analogickým práci s daty nad relaèní databází.
    Specifikace sloupcù je fixní vzhledem k dané instanci tøídy.  Jeden nebo
    více sloupcù tøídy jsou definovány jako klíèové, hodnoty tìchto sloupcù
    v jednotlivých øádcích tyto øádky jednoznaènì identifikují.  Obsah øádkù je
    dynamický, získávaný ze zdroje dat, poèet øádkù se mù¾e bìhem existence
    instance tøídy mìnit.

    Tøída definuje následující skupiny metod pro pøístup k datùm:

    - Metodu pro výbìr konkrétního øádku: 'row()'.  Øádek je vybrán podle
      zadaného klíèe.

    - Metody pro výbìr v¹ech øádkù: 'select()', 'fetchone()', 'skip()' a
      'close()'.  Po zavolání metody 'select()' je mo¾no postupnì získávat
      jednotlivé øádky pomocí metody 'fetchone()'.  Tento zpùsob umo¾òuje
      pøedávání i vìt¹ího mno¾ství dat z externích zdrojù bez nutnosti je
      v¹echna najednou dr¾et v pamìti.  Metoda 'select' umo¾òuje kdykoliv
      zpøístupnìní dat reinicializovat (\"rewind\").

    - Metody pro modifikaci dat: 'insert()', 'update()' a 'delete()'.

    - Metody pro získání informací o tabulce: 'columns()' a 'key()'.

    - Metody pro nastavení callbackù pøi modifikaci dat:
      'add_callback_on_change()', 'remove_callback_on_change()'.

    Tato tøída má charakter abstraktní tøídy a chová se jako prázdná tabulka,
    tj. jako read-only tabulka s definovanými sloupci, av¹ak ¾ádnými øádky.
    
    """
    AGG_MIN = 'AGG_MIN'
    """Konstanta získání minimální hodnoty pro metodu 'select()'."""
    AGG_MAX = 'AGG_MAX'
    """Konstanta získání maximální hodnoty pro metodu 'select()'."""
    AGG_COUNT = 'AGG_COUNT'
    """Konstanta získání poètu polo¾ek pro metodu 'select()'."""
    AGG_SUM = 'AGG_SUM'
    """Konstanta získání souètu polo¾ek pro metodu 'select()'."""
    AGG_AVG = 'AGG_AVG'
    """Konstanta získání prùmìrné hodnoty polo¾ek pro metodu 'select()'."""

    _CACHEABLE = True
    
    class UnsupportedOperation(Exception):
        """Signalizuje, ¾e byla ¾ádána nepodporovaná operace."""
    
    def __init__(self, columns, key, ordering=None, condition=None, full_init=True, **kwargs):
        """
        Arguments:

          columns -- sequence of 'ColumnSpec' instances, it uniquely identifies
            table columns and their order (by their ordering in 'columns')
          key -- key column or a list of key columns uniquely identifying table
            rows; all those columns must be present in 'columns'
          ordering -- specification of automatically retained sorting, it is a
            column id or a tuple of column ids or 'None'.  If it is not 'None',
            rows are automatically ordered by the given column (or the first of
            the given columns) in 'select*' operations.  This ordering column
            must be of type 'types_.Integer'.  If the argument is a tuple, only
            rows with the same values in the second and following columns of
            the tuple are mutually ordered.
          condition -- condition limiting selection of lines in all 'select*'
            and 'row' operations; 'Operator' instance or 'None'
          full_init -- iff true, call the 'after_init' method in the constructor
          kwargs -- given to the ancestor constructor
            
        """
        super(Data,self).__init__(columns=columns, key=key, ordering=ordering,
                                  **kwargs)
        assert not filter(lambda c: not isinstance(c, ColumnSpec),
                          columns), \
                          'Invalid column specification'
        key = xtuple(key)
        if ordering:
            ordering = xtuple(ordering)
        if __debug__:
            for k in key:
                assert k in columns, ('Key not among columns', k, columns)
        self._columns = tuple(columns)
        self._key = key
        self._ordering = ordering
        self._condition = condition
        self._change_number = pytis.util.Counter()
        self._on_change_callbacks = []
        self._select_last_row_number = None
        if full_init:
            self.after_init()

    def after_init(self):
        """Method called after all initializations.

        The purpose of this method is to allow instance completion after it is
        copied from its template in the data object cache.

        """
        pass
        
    def columns(self):
        """Return 'columns' specification given to constructor."""
        return self._columns

    def condition(self):
        """Return 'condition' specification given to constructor."""
        return self._condition

    def find_column(self, id):
        """Vra» 'ColumnSpec' identifikovanou 'id'.

        Pokud taková specifikace neexistuje, vra» 'None'.
        
        """
        return find(id, self.columns(), key=ColumnSpec.id)
        
    def key(self):
        """Vra» klíèové sloupce zadané v konstruktoru, jako tuple."""
        return self._key

    def row_key(self, row):
        """Vra» hodnoty klíèe z 'row' jako tuple instancí 'Value'."""
        return row.columns([c.id() for c in self.key()])
        
    def row(self, key, columns=None, transaction=None, arguments={}):
        """Return row instance 'Row' identified by 'key'.

        If there is no such row, return 'None'.

        Arguments:

          key -- instance or a sequence of instances of the class
            'types_.Value' corresponding to the columns of the key,
            representing key values of the row being looked for
          columns -- sequence of names of the columns to retrieve; if not
            given, all columns are retrieved; if given, all key columns must be
            included
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)
          arguments -- dictionary of table function call arguments, with
            function argument identifiers as keys and 'pytis.data.Value'
            instances as values.  Useful only when the table is actually a row
            returning database function, otherwise ignored.

        Length of 'key' must correspond to the number of key columns.

        The method always returns 'None' in this class.
        
        """
        return None
    
    def select(self, condition=None, reuse=False, sort=(), columns=None, transaction=None,
               arguments={}, async_count=False):
        """Initialize selection of records from the data source.
        
        The method itself does not necessarily load any data, the selection is only initialized if
        necessary.  The actual data may be obtained by repetitive calls to 'fetchone()' after
        calling this method.  Rows can also be skipped using the 'skip()' method.  The number of
        corresponding rows is returned if possible, but None may be returned if this feature is not
        implemented.

        Repeated calls to this method may not result in the same data if the data source changes in
        the meanwhile.

        Arguments:

          condition -- condition limiting the set of resulting rows as an 'Operator' instance or
            'None'
          reuse -- boolean flag indicating, that the data of the previous select may be reused if
            the condition matches
          sort -- sequence of sorting specifiers.  Each specifier is a column identifier or a pair
            (ID, DIRECTION).  DIRECTION os one of module constants 'ASCENDENT' or 'DESCENDANT'.
            The default value is 'ASCENDENT'.
          columns -- sequence of IDs of columns to select; if not given, all
            columns are selected
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)
          async_count -- if true, try to count result lines asynchronously
          
        Je-li 'condition' rùzné od 'None', specifikuje podmínku pro výbìr
        øádkù.  Podtøídy nejsou povinny podmínky implementovat (mohou je
        neimplementovat vùbec nebo mohou implementovat pouze nìkteré podmínky),
        v takovém pøípadì to musí být uvedeno v dokumentaci a pøi zadání
        nepodporované podmínky musí metoda vyvolat výjimku
        'UnsupportedOperation'.

        Tøídìní výbìru se provádí podle sloupcù uvedených v argumentu 'sort',
        s prioritou dle jejich poøadí.  Tøídìní je takté¾ nepovinná operace a
        podtøídy nejsou povinny je implementovat; pokud je neimplementují, musí
        to být uvedeno v jejich dokumentaci.
        
        The method always returns 0 in this class.
        
        """
        self._select_last_row_number = -1
        return 0
    
    def select_map(self, function, transaction=None, **kwargs):
        """Aplikuj 'function' na v¹echny øádky výbìru a vra» výsledky.

        Zavolej metodu 'select()' s argumenty 'kwargs' a na v¹echny vrácené
        øádky zavolej funkci 'function'.  Výsledky v¹ech volání 'function' vra»
        jako seznam s poètem a poøadím prvkù odpovídajících vráceným datovým
        øádkùm.

        Argumenty:

          function -- function of one argument -- the 'Row' instance
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)
          kwargs -- remaining arguments passed to 'select()'
          
        """
        result = []
        try:
            self.select(transaction=transaction, **kwargs)
            while True:
                row = self.fetchone(transaction=transaction)
                if row is None:
                    break
                result.append(function(row))
        finally:
            try:
                self.close()
            except:
                pass
        return result

    def select_aggregate(self, operation, condition=None, transaction=None):
        """Vra» výslednou hodnotu agregaèní funkce.

        Metoda provádí select, jeho¾ hodnotou je výsledek agregaèní funkce
        kompletnì vybraných dat.  Je-li vyvolána bìhem neuzavøeného select,
        tento select nepøeru¹uje a je-li podmínka její a aktuálního select
        shodná, vrací výsledek odpovídající obsahu onoho selectu (napøíklad
        zpracováním v jediné transakci).

        Argumenty:

          operation -- dvojice (OPERATION, COLUMN), kde OPERATION je jednou
            z 'AGG_*' konstant tøídy a COLUMN je id sloupce, nad kterým má být
            operace provedena.
          condition -- shodné se stejnojmenným argumentem metody 'select()'
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        Vrací: Instanci 'Value' odpovídající po¾adované agregaèní funkci.

        Podtøídy nejsou povinny tuto metodu implementovat (mohou ji
        neimplementovat vùbec nebo mohou implementovat pouze nìkteré podmínky),
        v takovém pøípadì to musí být uvedeno v dokumentaci a pøi zadání
        nepodporované podmínky musí metoda vyvolat výjimku
        'UnsupportedOperation'.
        
        V této tøídì metoda v¾dy vyvolává výjimku 'UnsupportedOperation'.

        """
        raise self.UnsupportedOperation()
    
    def select_and_aggregate(self, operation, condition=None, reuse=False, sort=(),
                             columns=None, transaction=None):
        """Combination of 'select' and 'select_aggregate' methods.

        The method returns a pair (SELECT_RESULT, AGGREGATE_RESULT) where:

        - SELECT_RESULT is a result of `select' call with the same arguments
          (except for 'operation').

        - AGGREGATE_RESULT is a 'Row' instance containing the same columns as
          the corresponding select.  Row values of columns with the type
          corresponding to the type of the 'operation' are results of the
          aggregate function defined by the 'operation' argument that must be
          one of the 'AGG_*' class constants.  Other row values are 'None'.

        If 'select_aggregate' is unsupported in the given class then
        'select_and_aggregate' is unsupported as well.
        
        """
        if columns is None:
            columns = [c.id() for c in self.columns()]
        try:
            select_result = self.select(condition=condition, reuse=reuse,
                                        sort=sort, columns=columns, transaction=transaction)
            def aggregate_value(cid):
                if (operation == self.AGG_COUNT or
                    isinstance(self.find_column(cid).type(), Number)):
                    number = self.select_aggregate((operation, cid,), condition=condition,
                                                   transaction=transaction)
                    result = (cid, number,)
                else:
                    result = (cid, Value(Type(), None),)
                return result
            aggregates = [aggregate_value(cid) for cid in columns]
        finally:
            try:
                self.close()
            except:
                pass
        return select_result, Row(aggregates)
        
    def fetchone(self, direction=FORWARD, transaction=None):
        """Vra» dal¹í øádek dat.

        Opakovaným voláním této metody je mo¾no získat v¹echny øádky tabulky.
        Pokud ji¾ ¾ádný dal¹í øádek dat k dispozici není, vra» 'None'.

        Argumenty:

          direction -- jedna z konstant 'FORWARD' a 'BACKWARD', urèuje, zda
            má být vrácen pøedchozí nebo následující øádek
          transaction -- deprecated, don't use anymore

        Ne v¹echny podtøídy jsou povinny implementovat vrácení pøedchozího
        øádku (tj. situaci, kdy 'direction==BACKWARD').  Pokud je
        neimplementují, musí to být uvedeno v dokumentaci a metoda musí
        v pøípadì odpovídajícího po¾adavku vyvolat výjimku
        'UnsupportedOperation'.

        Smìr je vztahován k poslednì vrácenému øádku.  Má-li tabulka _n_ øádkù
        a poslednì vrácený øádek byl _k_-tý, kde 0 < _k_ < n+1, znamená
        'FORWARD' vrácení _k+1_ního øádku (pokud existuje) a 'BACKWARD'
        _k-1_ního øádku (pokud existuje).  Dojde-li k pøekroèení prvního øádku,
        nejblí¾e následující 'FORWARD' vrátí první øádek (pokud existuje),
        a dojde-li k pøekroèení posledního øádku, nejblí¾e následující
        'BACKWARD' vrátí poslední øádek (pokud existuje).

        Prvnímu volání této metody musí pøedcházet volání metody 'select()'.
        Pokud se tak nestane, je chování metody nespecifikováno.  Následující
        volání metody 'select()' provede reinicializaci natahování dat,
        tj. následné volání 'fetchone()' zaène vracet nová data, opìt od
        zaèátku.

        Ka¾dému volání 'fetchone()' musí pøedcházet volání 'select()',
        'fetchone()' nebo 'skip()'.  Je-li bìhem provádìní výbìru volána jiná
        veøejná (nebo nesouvisející neveøejná) metoda tøídy, je chování
        následného volání metody 'fetchone()' bez bezprostøednì
        pøedcházejícího volání 'select()' nedefinováno.

        Po posledním volání této metody by mìla být zavolána metoda 'close()'.

        V této tøídì metoda v¾dy pouze vrací 'None'.
        
        """
        return None

    def last_row_number(self):
        """Vra» poøadí øádku poslednì vráceného metodou 'fetchone()'.

        Øádky jsou èíslovány od 0.  Pokud v aktuálním selectu dosud nebyl ¾ádný
        øádek pøes 'fetchone()' získán, vra» -1.

        """
        return self._select_last_row_number
        
    def skip(self, count, direction=FORWARD):
        """Pøeskoè 'count' øádkù ve smìru 'direction'.

        Argumenty:

          count -- poèet øádkù, které mají být pøeskoèeny; musí to být
            nezáporný integer
          direction -- jedna z konstant 'FORWARD' a 'BACKWARD', urèuje smìr
            pohybu pøi pøeskakování

        Vrací: Poèet skuteènì pøeskoèených øádkù (mù¾e být ni¾¹í, dojde-li
        k pøekroèení hranic dat) nebo 'None', pokud tento údaj není znám.

        Pokud pøi skákání dojde k pøekroèení hranic dat, nadbyteèné
        pøeskakování øádkù se ignoruje.

        Metodu je mo¾no pou¾ít pouze bìhem otevøeného selectu (viz metody
        'select()' a 'close()').

        V této tøídì metoda pøeskakuje øádky prostøednictvím volání metody
        'fetchone()' a vrací poèet øádkù, pro které tato volání nevrátila
        'None'.
        
        """
        for i in range(count):
            if self.fetchone(direction) == None:
                return i
        return count

    def rewind(self):
        """Vra» se pøed zaèátek dat aktuálního selectu.

        Metodu je mo¾no pou¾ít pouze bìhem otevøeného selectu (viz metody
        'select()' a 'close()').

        """
        while self.fetchone(BACKWARD) != None:
            pass

    def search(self, condition, direction=FORWARD, transaction=None):
        """Vyhledej nejbli¾¹í výskyt øádku splòujícího 'condition'.

        Argumenty:

          condition -- podmínkový výraz, který musí hledaný prvek splòovat,
            instance tøídy 'Operator'
          direction -- smìr vyhledávání, jedna z konstant 'FORWARD' a
            'BACKWARD'
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        Vrací: Vzdálenost hledaného øádku od aktuálního øádku v poètu øádkù
        jako kladný integer.  Pokud øádek nebyl nalezen, je vrácena 0.

        Aktuální øádek je øádek, na který ukazuje ukazovátko.  Tj. napøíklad
        øádek bezprostøednì pøedtím vyta¾ený metodou 'fetchone()'.

        Metodu je mo¾no pou¾ít pouze bìhem otevøeného selectu (viz metody
        'select()' a 'close()'), vyhledávání se provádí pouze mezi øádky
        tohoto selectu.  Pozice ukazovátka selectu není touto metodou zmìnìna.
        
        Podtøídy nejsou povinny tuto metodu implementovat (mohou ji
        neimplementovat vùbec nebo mohou implementovat pouze nìkteré podmínky),
        v takovém pøípadì to musí být uvedeno v dokumentaci a pøi zadání
        nepodporované podmínky musí metoda vyvolat výjimku
        'UnsupportedOperation'.
        
        V této tøídì metoda v¾dy vyvolává výjimku 'UnsupportedOperation'.

        """
        raise self.UnsupportedOperation()

    def search_key(self, key, direction=FORWARD):
        """Stejné jako 'search()', ale hledá podle 'key' místo podmínky.

        Argumenty:

          key -- sekvence hodnot klíèe
          direction -- stejné jako v 'search()'

        """
        eqs = map(lambda c, k: EQ(c.id(), k), self.key(), key)
        condition = apply(AND, eqs)
        return self.search(condition, direction=direction)

    def close(self):
        """Ukonèi aktuální select.

        Tato metoda umo¾òuje explicitnì uzavøít aktuální ètení dat pomocí
        'select()' + 'fetchone()' a uvolnit tak ji¾ pøípadné dále nepotøebné
        datové struktury nebo prostøedky systému.

        Metoda mù¾e být volána pouze kdy¾ je aktivní 'select()' spojení.
        Pokud tomu tak není, je její chování nedefinováno.

        V této tøídì tato metoda nedìlá nic.
        
        """
        self._select_last_row_number = None
    
    def insert(self, row, after=None, before=None, transaction=None):
        """Vlo¾ 'row' do tabulky.

        Argumenty:
        
          row -- instance tøídy 'Row'
          after -- 'None' nebo klíè øádku, za který má být nový øádek vlo¾en
          before -- 'None' nebo klíè øádku, pøed který má být nový øádek vlo¾en
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        Argumenty 'after' a 'before' mají smysl pouze tehdy, pokud byl
        v konstruktoru specifikován argument 'ordering'.  Nesmí být
        specifikovány oba souèasnì.  Pokud øádek urèený nìkterým z tìchto
        argumentù neexistuje, není nový øádek vlo¾en.  Pokud je v novém øádku
        uvedena hodnota poøadového sloupce, je tato ignorována.  Pokud má
        datový objekt ordering a oba argumenty 'after' a 'before' jsou 'None',
        nový øádek mù¾e být vlo¾en na kteroukoliv pozici.
        
        'row' nemusí obsahovat obsahovat hodnoty pro v¹echny sloupce tabulky a
        mù¾e obsahovat i dal¹í sloupce, které tabulka neobsahuje.  Zále¾í na
        implementaci tabulkové tøídy, jak s takovým sloupcem nalo¾í -- mù¾e
        napøíklad chybìjící sloupce doplnit implicitními hodnotami nebo je
        dopoèítat nebo také mù¾e sloupec odmítnout do tabulky vlo¾it.  V ka¾dém
        pøípadì platí, ¾e poøadí sloupcù v 'row' je z hlediska této metody
        nepodstatné, sloupce jsou rozeznávány svými názvy.

        Pokud 'row' obsahuje klíè a øádek s takovým klíèem ji¾ v tabulce
        existuje, neprovádìj nic.  Pakli¾e 'row' obsahuje pouze nìkteré a ne
        v¹echny sloupce klíèe, zále¾í na konkrétní implementaci, zda jej vlo¾í
        èi nikoliv.
        
        Není specifikováno, na které místo tabulky má být øádek vlo¾en, obvykle
        je to konec tabulky, není to v¹ak vy¾adováno.

        Je-li sloupec do tabulky úspì¹nì vlo¾en, vra» dvojici (ROW, 'True'),
        kde ROW je skuteèný nový øádek tabulky, který na základì vlo¾ení 'row'
        vzniknul.  Pokud nemù¾e být obsah nového øádku zji¹tìn, vra» dvojici
        ('None', 'True').  Pokud øádek nebyl do tabulky úspì¹nì vlo¾en, vra»
        dvojici ('None', 'False') v pøípadì, ¾e popis chyby není definován,
        pøíp. dvojici (text, 'False'), kde text je popis pøíèiny neúspìchu.

        V této tøídì metoda v¾dy pouze vrací ('None', 'False').
        
        """
        return None, False

    def update(self, key, row, transaction=None):
        """Nahraï øádek identifikovaný klíèem 'key' øádkem 'row'.

        Argumenty:
        
          key -- instance nebo seznam instancí tøídy 'types._Value', musí
            odpovídat v¹em sloupcùm klíèe tabulky
          row -- instance tøídy 'Row'
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        'row' nemusí obsahovat hodnoty pro v¹echny sloupce tabulky a mù¾e
        obsahovat i dal¹í sloupce, které tabulka neobsahuje.  Zále¾í na
        implementaci tabulkové tøídy, jak s takovým sloupcem nalo¾í -- mù¾e
        napøíklad chybìjící sloupce doplnit implicitními hodnotami nebo je
        dopoèítat nebo také mù¾e sloupec odmítnout do tabulky vlo¾it.  V ka¾dém
        pøípadì platí, ¾e poøadí sloupcù v 'row' je z hlediska této metody
        nepodstatné, sloupce jsou rozeznávány svými názvy.

        Pokud 'key' v tabulce neidentifikuje ¾ádný existující øádek, neprovádìj
        nic a vra» 'None'.  Pokud 'row' obsahuje klíè rùzný od 'key' a øádek
        s takovým klíèem ji¾ v tabulce existuje, neprovádìj nic a vra» 'None'.
        Pakli¾e 'row' obsahuje pouze nìkteré a ne v¹echny sloupce klíèe, zále¾í
        na konkrétní implementaci, jak s tím nalo¾í.

        Byl-li pro datový objekt v konstruktoru specifikován argument
        'ordering', není poøadí øádku updatem zmìnìno.  Pøípadná novì zadaná
        hodnota kteréhokoliv \"ordering\" sloupce je ignorována a je nahrazena
        starou hodnotou.  Z toho plyne, ¾e updatem není mo¾no zmìnit hodnotu
        ¾ádného sloupce uvedeného v 'ordering'.

        Je-li sloupec úspì¹nì updatován, vra» dvojici (ROW, 'True'), kde ROW
        je skuteèný updatovaný øádek tabulky, který na základì vlo¾ení 'row'
        vzniknul.  Pokud takový øádek nelze zjistit, vra» ('None', 'True').
        V opaèném pøípadì (tj. pokud øádek s 'key' neexistuje nebo pokud je
        problematický klíè 'row', jak je uvedeno vý¹e) vra» dvojici
        ('None', 'False') v pøípadì, ¾e popis chyby není definován,
        pøíp. dvojici (text, 'False'), kde text je popis pøíèiny neúspìchu.
        
        V této tøídì metoda v¾dy pouze vrací dvojici ('None', 'False').
        
        """
        return None, False

    def update_many(self, condition, row, transaction=None):
        """Nahraï øádky identifikované 'condition' daty 'row'.

        Argumenty:
        
          key -- instance nebo seznam instancí tøídy 'types._Value', musí
            odpovídat v¹em sloupcùm klíèe tabulky; urèuje øádek, který má být
            smazán
          row -- instance tøídy 'Row'
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        'row' nemusí obsahovat hodnoty pro v¹echny sloupce tabulky a mù¾e
        obsahovat i dal¹í sloupce, které tabulka neobsahuje.  Zále¾í na
        implementaci tabulkové tøídy, jak s takovým sloupcem nalo¾í -- mù¾e
        napøíklad chybìjící sloupce doplnit implicitními hodnotami nebo je
        dopoèítat nebo také mù¾e sloupec odmítnout do tabulky vlo¾it.  V ka¾dém
        pøípadì platí, ¾e poøadí sloupcù v 'row' je z hlediska této metody
        nepodstatné, sloupce jsou rozeznávány svými názvy.

        Pokud by zmìna øádkù mìla mít za následek zmìnu klíèe nìkterého øádku
        na klíè po updatu existující v jiném øádku, je vyvolána výjimka a data
        nejsou zmìnìna.

        Byl-li pro datový objekt v konstruktoru specifikován argument
        'ordering', není poøadí øádku updatem zmìnìno.  Pøípadná novì zadaná
        hodnota kteréhokoliv \"ordering\" sloupce je ignorována.  Z toho plyne,
        ¾e updatem není mo¾no zmìnit hodnotu ¾ádného sloupce uvedeného
        v 'ordering'.

        Vrací: Poèet updatovaných øádkù.
        
        V této tøídì metoda v¾dy pouze vrací '0'.
        
        """
        return 0
    
    def delete(self, key, transaction=None):
        """Sma¾ øádek identifikovaný 'key'.

        Argumenty:
        
          key -- instance nebo seznam instancí tøídy 'types._Value', musí
            odpovídat v¹em sloupcùm klíèe tabulky; urèuje øádek, který má být
            smazán
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        Pokud je øádek smazán, vra» 1.
        Pokud takový øádek nelze smazat (vèetnì situace, kdy neexistuje),
        nedìlej nic a vra» 0.

        V této tøídì metoda v¾dy pouze vrací 0.
        
        """
        return 0

    def delete_many(self, condition, transaction=None):
        """Sma¾ øádky identifikované 'condition'.
        
        Argumenty:
        
          condition -- podmínka odpovídající øádkùm, které mají být
            smazány; instance tøídy 'Operator'
          transaction -- transaction object encapsulating the database
            operation environment or 'None' (meaning default environment)

        Vrací: Poèet smazaných øádkù.

        V této tøídì metoda v¾dy pouze vrací 0.

        """
        return 0

    def change_number(self):
        """Vra» poèet dosud zaregistrovaných zmìn dat.

        Tento poèet je vìt¹í nebo roven 0 a ka¾dá následující návratová hodnota
        je vìt¹í nebo rovna pøedchozí návratové hodnotì.  Nic jiného
        garantovaného není, zejména ne ¾e poèet odpovídá skuteènému poètu zmìn
        dat, jedná se pouze o orientaèní hodnotu.  Pro podrobnìj¹í diskusi
        spolehlivosti viz dokumentace metody `add_callback_on_change()'.
        
        """
        return self._change_number.current()
    
    def add_callback_on_change(self, function):
        """Zaregistruj 'function' do seznamu modifikaèních callbackù.

        Dojde-li k oznámení o modifikaci dat, mù¾e pak být 'function' zavolána,
        bez parametrù.  Zda je 'function' skuteènì zavolána, závisí na
        konkrétní implementaci datové tøídy.  Nìkteré implementace mohou toto
        volání garantovat, nìkteré mohou volání provádìt bez garance a nìkteré
        nemusí volání provádìt nikdy.  Tato zpìtná volání jsou tedy pouze
        pomocným mechanismem, který mù¾e být pro urèité úèely (napøíklad
        pøekreslení tabulky na obrazovce) u¾iteèný, nelze na nìj v¹ak spoléhat.

        **Pozor:** Vzhledem k tomu, ¾e se jedná o callbacky, bude 'function'
        obvykle volána v samostatném threadu, je v ní tedy tøeba dbát na
        pøípadné mo¾né kolize s hlavním threadem.

        V této tøídì k ¾ádným modifikacím dat nedochází a tudí¾ se ani
        neprovádí zpìtná volání.

        """
        self._on_change_callbacks.append(function)

    def remove_callback_on_change(self, function):
        """Odstraò 'function' ze seznamu modifikaèních callbackù.

        Pokud 'function' v seznamu modifikaèních callbackù není, nedìlej nic.
        
        """
        try:
            self._on_change_callbacks.remove(function)
        except ValueError:
            pass

    def _call_on_change_callbacks(self):
        self._change_number.next()
        for c in self._on_change_callbacks:
            c()

    @classmethod
    def cacheable(class_):
        """Return whether it is possible to cache instances of this class.

        This information is intended to be used in the 'DataFactory' class.

        """
        return class_._CACHEABLE


class Counter(object):
    """Abstrakce pøístupu ke generátoru tickets.

    Jedná se o jednoduchý èítaè vracející postupnì sekvenci unikátních
    vzestupných èísel, blí¾e viz metoda 'next()'.

    """    
    def next(self):
        """Vra» dal¹í hodnotu èítaèe jako integer.

        V této tøídì metoda pouze vyvolává 'NotImplementedException'.
        
        """
        raise NotImplementedException()


class Function(object):
    """Abstrakce databázových funkcí.

    Podporovány jsou pouze jednoduché funkce, pøijímající pevný (ale libovolný)
    poèet argumentù daných svojí pozicí a vracející seznam øádkù.

    """
    def call(self, row):
        """Zavolej funkci a vra» výsledek.

        Argumenty:

          row -- instance tøídy 'Row' odpovídající argumentùm funkce, je
            dùle¾ité poøadí prvkù v 'row'

        Vrací: Sekvenci instancí tøídy 'Row' odpovídající výsledku volání
        funkce.

        """
        raise NotImplementedException()



class MemData(Data):
    """Data dr¾ená v pamìti.

    Tøída slou¾í jako jednoduchý datový objekt, který øádky svých dat dr¾í
    v pamìti.  Je urèena pøedev¹ím pro ladìní a testování.

    Tøída není thread-safe.

    Modifikaèní metody nevolají ¾ádné callbacky.
    
    """

    _CACHEABLE = False

    def __init__(self, columns, data=(), **kwargs):
        """Inicializuj datový zdroj dle specifikace 'columns'.

        'columns' jsou stejné jako v pøedkovi.  Klíèem je v¾dy první sloupec
        'columns', z èeho¾ vyplývá, ¾e 'columns' nesmí být prázdné.

        Argument 'data' mù¾e obsahovat sekvenci instancí 'Row', kterými má být
        inicializován datový objekt.
        
        """
        super(MemData, self).__init__(columns, columns[0], **kwargs)
        self._mem_data = []
        self._mem_cursor = -1
        for row in data:
            self.insert(row)

    def _mem_find_index(self, key):
        if is_sequence(key):
            key = key[0]
        data = self._mem_data
        k = self.key()[0].id()
        condition = self._condition2pyfunc(self._condition)
        for i in range(len(data)):
            if data[i][k] == key and condition(data[i]):
                return i
        else:
            return None

    def _mem_create_row(self, row, index=None):
        try:
            key = row[self.key()[0].id()]
        except:
            return None
        i = self._mem_find_index(key) 
        if index != None and i != None and i != index:
            return None
        pairs = []
        for c in self.columns():
            id = c.id()
            try:
                val = row[id]
            except:
                val = None
            pairs.append((id, val))
        return Row(pairs)

    def _restrict_row_columns(self, row, columns):
        if columns is None:
            return row
        else:
            return Row([(cid, row[cid]) for cid in columns])

    def row(self, key, columns=None):
        index = self._mem_find_index(key)
        if index == None:
            return None
        return self._restrict_row_columns(self._mem_data[index], columns)

    def rewind(self):
        self._mem_cursor = -1

    def _condition2pyfunc(self, condition):
        if condition is None:
            return lambda row: True
        op_name = condition.name()
        relational_operators = {'EQ': operator.eq,
                                'LT': operator.lt}
        if op_name in relational_operators.keys():
            def relop(row, op, args, kwargs):
                def arg(a, ignore_case=False):
                    if isinstance(a, str):
                        v = row[a].value()
                    else:
                        v = a.value()
                    if ignore_case and isinstance(v, (str, unicode)):
                        v = v.lower()
                    return v
                return op(*[arg(a, **kwargs) for a in args])
            return lambda row: relop(row, relational_operators[op_name],
                                     condition.args(), condition.kwargs())
        elif op_name == 'NOT':
            func = self._condition2pyfunc(condition.args()[0])
            return lambda row: not func(row)
        elif op_name == 'AND':
            fctns = [self._condition2pyfunc(c) for c in condition.args()]
            return lambda row: reduce(lambda r, f: r and f(row), fctns, True)
        else:
            t = condition.translation()
            if t is not None:
                return self._condition2pyfunc(t)
            else:
                raise ProgramError("Operator not supported:", op_name)

    def select(self, condition=None, reuse=False, sort=None, columns=None, transaction=None,
               arguments={}, async_count=False):
        """Inicializace vytahování záznamù.

        Bli¾¹í popis viz nadtøída.  Argumenty 'condition', 'sort',
        'transaction' a 'arguments' jsou ignorovány.
        
        """
        if self._condition is not None:
            if condition is not None:
                condition = AND(condition, self._condition)
            else:
                condition = self._condition
        cond = self._condition2pyfunc(condition)
        self._mem_cursor = -1
        self._mem_select = [self._restrict_row_columns(row, columns)
                            for row in self._mem_data if cond(row)]
        return len(self._mem_select)

    def close(self):
        self._mem_select = []
        
    def fetchone(self, direction=FORWARD, transaction=None):
        cursor = self._mem_cursor
        data = self._mem_select
        if direction == FORWARD:
            if cursor >= len(data):
                return None
            elif cursor == len(data) - 1:
                self._mem_cursor = cursor + 1
                return None
            else:
                self._mem_cursor = cursor = cursor + 1
                return data[cursor]
        else:
            if cursor < 0:
                return None
            elif cursor == 0:
                self._mem_cursor = -1
                return None
            else:
                self._mem_cursor = cursor = cursor - 1
                return data[cursor]
            
    def last_row_number(self):
        return self._mem_cursor

    def insert(self, row, transaction=None):
        """Vlo¾ 'row' do tabulky.

        Pro bli¾¹í popis viz nadtøída.

        'row' je vlo¾en na konec tabulky.  Chybìjící sloupce jsou nastaveny na
        'None'.

        Argument 'transaction' je ignorován.
        
        """
        assert isinstance(row, Row)
        new_row = self._mem_create_row(row)
        if new_row == None:
            return None, False
        self._mem_data.append(new_row)
        return new_row, True

    def update(self, key, row, transaction=None):
        """Updatuj 'row' v tabulce.

        Pro bli¾¹í popis viz nadtøída.

        'row' je v tabulce vlo¾en na místo øádku identifikovaného 'key''.
        Chybìjící sloupce jsou nastaveny na 'None'.
        
        Argument 'transaction' je ignorován.

        """
        index = self._mem_find_index(key)
        if index == None:
            return None, False
        new_row = self._mem_create_row(row, index)
        if new_row == None:
            return None, False
        self._mem_data[index] = new_row
        return new_row, True
        
    def delete(self, key, transaction=None):
        """
        Argument 'transaction' is ignored.
        """
        index = self._mem_find_index(key)
        if index == None:
            return 0
        del self._mem_data[index]
        return 1


### Pomocné funkce


def EQ(x, y, ignore_case=False):
    """Podmínkový operátor 'EQ' relace rovnosti '='.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je primitivní.
      
    """
    return Operator('EQ', x, y, ignore_case=ignore_case)

def NE(x, y, ignore_case=False):
    """Podmínkový operátor nerovnosti.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je vyjádøený pomocí jiných operátorù.
      
    """
    t = NOT(EQ(x, y, ignore_case=ignore_case))
    return Operator('NE', x, y, ignore_case=ignore_case, translation=t)
    
def WM(x, y, ignore_case=True):
    """Podmínkový operátor 'WM' (\"wildcard matches\") porovnání dle vzoru.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- instance 'WMValue' definující vzor; její hodnota mù¾e jako wildcars
        obsahovat znaky '*' (lze substituovat èímkoliv) a '?' (lze substituovat
        libovolným znakem)
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je primitivní.
      
    """
    return Operator('WM', x, y, ignore_case=ignore_case)
    
def NW(x, y, ignore_case=True):
    """Podmínkový operátor negace porovnání dle vzoru.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- string definující vzor; jako wildcars mù¾e obsahovat znaky '*' (lze
        substituovat èímkoliv) a '?' (lze substituovat libovolným znakem)
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je vyjádøený pomocí jiných operátorù.
      
    """
    t = NOT(WM(x, y, ignore_case=ignore_case))
    return Operator('NW', x, y, ignore_case=ignore_case, translation=t)

def LT(x, y, ignore_case=False):
    """Podmínkový operátor 'LT' relace '<'.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je primitivní.
      
    """
    return Operator('LT', x, y, ignore_case=ignore_case)

def LE(x, y, ignore_case=False):
    """Podmínkový operátor relace '<='.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je vyjádøený pomocí jiných operátorù.
      
    """
    t = OR(LT(x, y, ignore_case=ignore_case),
           EQ(x, y, ignore_case=ignore_case))
    return Operator('LE', x, y, ignore_case=ignore_case, translation=t)
    

def GT(x, y, ignore_case=False):
    """Podmínkový operátor relace '>'.

    Argumenty:

      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je vyjádøený pomocí jiných operátorù.

    """
    t = AND(NOT(EQ(x, y, ignore_case=ignore_case)),
            NOT(LT(x, y, ignore_case=ignore_case)))
    return Operator('GT', x, y, ignore_case=ignore_case, translation=t)

def GE(x, y, ignore_case=False):
    """Podmínkový operátor relace '>='.

    Argumenty:
    
      x -- column identifier, string, or an 'OpFunction' value
      y -- hodnota sloupce, instance tøídy 'types._Value'
      ignore_case -- zda má být ignorována velikost písmen (má-li to pro daný
        typ smysl)

    Tento operátor je vyjádøený pomocí jiných operátorù.

    """
    t = OR(GT(x, y, ignore_case=ignore_case),
                     EQ(x, y, ignore_case=ignore_case))
    return Operator('GE', x, y, ignore_case=ignore_case, translation=t)

def NOT(x):
    """Logical operator 'NOT' for logical negation.

    Arguments:

      x -- operand as 'Operator' instance

    This operator is primitive.
      
    """
    return Operator('NOT', x)

def AND(*args):
    """Logical operator 'AND' for logical conjunction.

    Arguments:

      args -- sequence of operands as 'Operator' instances (may be also empty).
        The operands may also be None in which case they are ignored.

    The operator is commutative so the order of operands doesn't matter.

    This operator is primitive.
      
    """
    return Operator('AND', *[arg for arg in args if arg is not None])

def OR(*args):
    """Logical operator 'OR' for logical disjunction.

    Arguments:

      args -- sequence of operands as 'Operator' instances (may be also empty).

    The operator is commutative so the order of operands doesn't matter.

    This operator is not primitive - it may be expressed by a combination of
    other operators.
      
    """
    t = NOT(apply(AND, map(NOT, args)))
    return Operator('OR', *args, **{'translation': t})

def IN(column_id, data, table_column_id, table_condition):
    """Podmínkový operátor pøíslu¹nosti.

    Argumenty:

      column_id -- jméno sloupce (string), který má být prvkem mno¾iny
      data -- instance tøídy 'Data' odpovídající tabulce, ze které má být
        proveden výbìr mno¾iny
      table_column_id -- jméno sloupce (string) 'table', ze kterého má být
        proveden výbìr mno¾iny
      table_condition -- podmínka omezující výbìr z 'table'

    Tento operátor je primitivní.

    """
    return Operator('IN', column_id, data, table_column_id, table_condition)

_ft_query_id = None
def FT(column_id, query):
    """Full text search.

    Arguments:

      query -- string containing the PostgreSQL full text search expression

    Using this operator is limited only to search conditions and to one
    instance of this operator per one condition.
      
    This is a primitive operator.
    
    """
    global _ft_query_id
    if _ft_query_id is None:
        # This is not thread safe, but query id is not used for now anyway
        _ft_query_id = pytis.util.Counter()
    query_id = _ft_query_id.next()
    return Operator('FT', column_id, query, query_id)

def LTreeMatch(column_id, match):
    """ltree matching.

    Arguments:

      column_id -- column identifier, string
      match -- lquery, string

    """
    return Operator('LTreeMatch', column_id, match)

def LTreeAncestor(x, y):
    """ltree comparison: The left an ancestor or equal to the right.

    Arguments:

      x -- column identifier as a string
      y -- column identifier as a string, or a non-NULL ltree value as a
        'types._Value' instance

    """
    return Operator('LTreeAncestor', x, y)

def LTreeDescendant(x, y):
    """ltree comparison: The left a descendant or equal to the right.

    Arguments:

      x -- column identifier as a string
      y -- column identifier as a string, or a non-NULL ltree value as a
        'types._Value' instance

    """
    return Operator('LTreeDescendant', x, y)

def FunctionCondition(function, *args):
    """Function call.

    Arguments:

      function -- function name as a string
      args -- function arguments; each of the arguments is either a column
        identifier as a string or a 'types_.Value' instance.

    """
    return Operator('Function', function, *args)

def OpFunction(function, *args):
    """Function call to be used in relation operators.

    Arguments:

      function -- function name as a string
      args -- function arguments; each of the arguments is either a column
        identifier as a string or a 'types_.Value' instance.

    """
    return Operator('Function', function, *args)

def reversed_sorting(sorting):
    """Vra» specifikaci tøídìní reverzní ke specifikaci 'sorting'.

    Prvky setøídìné dle vrácené hodnoty mají pøesnì obrácené poøadí ne¾ prvky
    setøídìné dle 'sorting'.

    """
    def revspec(spec):
        if is_sequence(spec):
            id, dir = spec
        else:
            id, dir = spec, ASCENDENT
        if dir == ASCENDENT:
            result = DESCENDANT
        elif dir == DESCENDANT:
            result = ASCENDENT
        else:
            raise ProgramError('Invalid sorting direction', dir)
        return id, result
    reversed = map(revspec, sorting)
    return tuple(reversed)



# Pomocné tøídy


class ColumnSpec:
    """Specifikace sloupce tabulkových dat.

    Ka¾dý sloupec je identifikován svým názvem (string) a typem (instance tøídy
    'types_.Type').  Blí¾e viz metoda '__init__()'.

    Instance tøídy jsou pova¾ovány za immutable, tudí¾ je mo¾no je sdílet.
    
    """
    def __init__(self, id, type):
        """Inicializuj specifikaci sloupce.

        Argumenty:
        
          id -- string identifikující sloupec (název sloupce)
          type -- typ sloupce, instance tøídy 'types_.Type'

        Názvem sloupce mù¾e být libovolný øetìzec, nedoporuèuje se v¹ak
        pou¾ívat prázdný øetìzec jako regulérní název sloupce.

        """
        self._id = id
        self._type = type

    def __str__(self):
        return '<Column: id=%s, type=%s>' % (self.id(), self.type())
        
    def __cmp__(self, other):
        """Vra» 0, právì kdy¾ 'self' a 'other' jsou shodné.

        'self' a 'other' jsou shodné právì kdy¾ jsou té¾e tøídy a mají stejné
        id a typ.

        """
        if sameclass(self, other):
            res = compare_objects(self.id(), other.id())
            if res:
                return res
            else:
                return compare_objects(self.type(), other.type())
        else:
            return compare_objects(self, other)

    def __hash__(self):
        return hash(self._id)

    def id(self):
        """Vra» string identifikující sloupec zadaný v konstruktoru."""
        return self._id

    def type(self):
        """Vra» typ sloupce jako instanci tøídy 'types_.Type'."""
        return self._type


class Row:
    """Reprezentace jednoho øádku øádkových dat.

    V podstatì se jedná o uspoøádaný seznam sloupcù (polo¾ek) a jejich hodnot.
    Data jsou identifikována buïto svým poøadím, nebo názvem pøíslu¹ného
    sloupce.  V prvním pøípadì se na nì lze odkazovat èíselným odkazem tak jako
    u polo¾ek seznamù, v druhém pøípadì stringy, tak jako u hash tabulek.

    Hodnotami sloupcù jsou instance tøídy 'types_.Value'.
    
    Tøída emuluje sekvenci i hash tabulku.  Kromì této emulace tøída
    neposkytuje ¾ádné dal¹í metody.  Iniciální data musí být pøedána
    v konstruktoru, pozdìji lze modifikovat ji¾ jen existující sloupce.
    Mazání sloupcù není mo¾né.
    
    """
    def __init__(self, data=()):
        """Inicializuj øádek.

        Argumenty:
        
          data -- sekvence dvouprvkových sekvencí, ka¾dá dvouprvková sekvence
            obsahuje jako svùj první prvek identifikátor sloupce (string) a
            jako druhý prvek jeho hodnotu (instance tøídy 'Value'); argument
            není nutno klíèovat

        Pøíklad obsahu 'data':
        
          (('poradi', Value(Integer.make(), 1)),
           ('popis', Value(String.make(), 'prvni prvek')))
          
        """
        if __debug__:
            assert is_sequence(data), ("Argument must be a sequence", data)
            for item in data:
                assert is_sequence(item) and len(item) == 2, \
                       ('Column definition must be (ID, VALUE) pair', item)
                k, v = item
                assert is_string(k), ('Invalid column id', k)
                assert isinstance(v, Value), ('Invalid column value', v)
        self._data = list(data)

    def _index(self, key):
        if is_string(key):
            data = self._data
            for i in range(len(data)):
                if data[i][0] == key:
                    result = i
                    break
            else:
                raise KeyError(key)
        elif type(key) == type(0) or type(key) == type(0L):
            if key < 0:
                result = len(self) + key
                if result < 0:
                    raise IndexError('List index out of range', key)
            else:
                result = key
        else:
            raise KeyError('Illegal key type', key)
        return result

    def __getstate__(self):
        return self._data

    def __setstate__(self, state):
        if type(state) != types.ListType:
            raise InvalidAccessError('Invalid row data', state)
        for k, v in state:
            if type(k) != types.StringType:
                raise InvalidAccessError('Invalid row key', k)
            if not isinstance(v, Value):
                raise InvalidAccessError('Invalid row value', v)
        self._data = state
        
    def __unicode__(self):
        items = [self._data[i][0] + '==' + unicode(item)
                 for i, item in enumerate(self)]
        return '<Row: %s>' % ', '.join(items)

    def __cmp__(self, other):
        """Vra» 0, právì kdy¾ 'self' a 'other' obsahují stejné názvy a hodnoty.

        Hodnoty a názvy musí být stejné vèetnì svého poøadí.
        
        """
        if sameclass(self, other):
            l1 = len(self)
            l2 = len(other)
            if l1 < l2:
                return -1
            elif l1 > l2:
                return 1
            else:
                data1 = self._data
                data2 = other._data
                for i in range(l1):
                    k1, v1 = data1[i]
                    k2, v2 = data2[i]
                    x = cmp(k1, k2)
                    if x:
                        return x
                    y = cmp(v1, v2)
                    if y:
                        return y
                else:
                    return 0
        else:
            return compare_objects(self, other)
        
    def __len__(self):
        """Vra» poèet sloupcù v øádku."""
        return len(self._data)

    def __getitem__(self, key):
        """Vra» sloupec dle 'key'.

        Jestli¾e 'key' je string odpovídající názvu existujícího sloupce, vra»
        hodnotu daného sloupce.
        Jestli¾e 'key' je integer odpovídající sloupci analogicky jako
        u sekvencí, vra» hodnotu daného sloupce.
        Jinak vyvolej výjimku.
        
        """
        index = self._index(key)
        return self._data[index][1]

    def __setitem__(self, key, value):
        """Nastav hodnotu existujícího sloupce 'key' na 'value'.

        Argumenty:
        
          key -- musí být existující klíè, a» u¾ string jako název sloupce
            nebo integer jako poøadí sloupce
          value -- nová hodnota sloupce, instance tøídy 'types_.Value'

        Jestli¾e sloupec identifikovaný 'key' neexistuje, je chování metody
        nedefinováno.

        Zmìna sloupce se nepropaguje do instancí, je¾ jsou kopiemi této
        instance.
          
        """
        index = self._index(key)
        self._data = data = copy.copy(self._data)
        data[index] = (data[index][0], value)

    def __getslice__(self, i, j):
        """Vra» po¾adovaný slice jako instanci této tøídy."""
        return self.__class__(self._data[i:j])

    def __setslice__(self, i, j, data):
        """Nastav po¾adovaný slice na 'data'.

        'data' je ve stejném formátu jako argument metody '__init__()'.
        'data' musí mít stejnou délku jako pùvodní 'slice', jinak je
        vyvolána výjimka.
        
        """
        n = len(data)
        if n != j - i:
            raise IndexError("Sequence length doesn't match")
        for k in range(n):
            self[i+k] = data[k]

    def __contains__(self, key):
        """Vra» pravdu, právì kdy¾ øádek obsahuje sloupec jména 'key'."""
        return key in self.keys()
    
    def has_key(self, key):
        return self.__contains__(key)

    def keys(self):
        """Vra» seznam názvù v¹ech sloupcù jako strings.

        Poøadí polo¾ek vráceného seznamu je nedefinováno.
        
        """
        return [c[0] for c in self._data]

    def items(self):
        """Vra» seznam dvojic [ID, VALUE] odpovídajících v¹em sloupcùm.

        ID je øetìzec, VALUE je instance tøídy 'types_.Value'.

        Poøadí dvojic vráceného seznamu je nedefinováno.
        
        """
        return map(copy.copy, self._data)

    def columns(self, keys):
        """Vra» hodnoty sloupcù odpovídající 'keys'.

        Argumenty:

          keys -- sekvence klíèù sloupcù, viz té¾ metoda '__getitem__()'

        Vrací: tuple hodnot sloupcù, jejich¾ klíèe jsou dány argumentem 'keys',
        v odpovídajícím poøadí.

        """
        values = map(lambda k, self=self: self[k], keys)
        return tuple(values)

    def append(self, key, value):
        """Pøipoj na konec øádku sloupec 'key' s hodnotou 'value'.

        Argumenty:

          key -- id sloupce jako string, nesmí být shodné s id ¾ádného sloupce
            v instanci ji¾ pøítomného
          value -- hodnota sloupce jako instance tøídy 'types_.Value'

        """
        assert is_string(key)
        assert isinstance(value, Value)
        assert not some(lambda x, k=key: x[0] == k, self._data)
        self._data.append((key, value))
        
    def update(self, dict):
        """Updatuj hodnoty sloupcù hodnotami z 'dict'.

        Argumenty:

          dict -- slovník klíèovaný názvy sloupcù obsahující nové hodnoty pro
            tyto sloupce jako instance tøídy 'types_.Value'.

        Sloupcùm v 'dict' neobsa¾eným zùstanou zachovány jejich pùvodní
        hodnoty.
        
        """
        for k in dict.keys():
            assert isinstance(dict[k], Value), \
                   ('Invalid column value', dict[k])
            if k in self:
                self[k] = dict[k]


class DataFactory(object):
    """Factory na tvorbu datových objektù dle zadané specifikace.

    V konstruktoru tøídy jsou zadány parametry datového objektu, jeho¾ instance
    lze posléze vytváøet pomocí metody 'create()'.  Hlavní místo pou¾ití této
    tøídy jsou specifikaèní soubory naèítané resolverem.  Resolver získá ze
    statických specifikací instanci factory a s její pomocí pak na vy¾ádání, po
    pøípadném doplnìní dynamických specifikací, vytváøí instance datových
    objektù.

    """
    _data_object_cache = None

    def __init__(self, class_, *args, **kwargs):
        """Inicializuj instanci

        Argumenty:

          class_ -- tøída 'Data' nebo její podtøída
          args -- tuple argumentù, které mají být pøi vytváøení instance
            pøedány konstruktoru tøídy 'class_'
          kwargs -- dictionary klíèovaných argumentù, které mají být pøi
            vytváøení instance pøedány konstruktoru tøídy 'class_'

        """
        assert issubclass(class_, Data)
        self._class_ = class_
        def adjust(arg):
            if type(arg) == types.ListType:
                arg = tuple(arg)
            return arg
        self._args = tuple([adjust(a) for a in args])
        self._kwargs = kwargs
        self._kwargs_hashable = kwargs.items()
        if DataFactory._data_object_cache is None and class_.cacheable():
            DataFactory._data_object_cache = \
              LimitedCache(DataFactory._get_data_object)

    def class_(self):
        """Vra» tøídu datového objektu."""
        return self._class_
            
    def create(self, **kwargs):
        """Vytvoø a vra» novou instanci datového objektu.

        Instance je vytvoøena dle specifikace tøídy a argumentù jejího
        konstruktoru zadaných v '__init__()'.

        Argumenty:

          kwargs -- dictionary klíèovaných argumentù, které mají být dodateènì
            pøedány konstruktoru datové tøídy.  Je-li nìkterý argument zadán
            zde i v '__init__()', tak vy¹¹í prioritu má ten zdej¹í.

        Tato metoda vrací v¾dy zbrusu novou instanci datové tøídy.

        """
        _kwargs = copy.copy(self._kwargs)
        _kwargs.update(kwargs)
        cache = DataFactory._data_object_cache
        cacheable = cache is not None
        if cacheable:
            key = (self._class_, self._args, tuple(_kwargs.items()),)
            try:
                {key: True}
            except TypeError:
                cacheable = False
                log(EVENT, "Non-cacheable data object cache key: %s" % (key,))
        # TODO: Stále je¹tì máme problém, nyní u validity_condition
        # if cacheable:      
        if False: 
            data_object = cache[key]
            result = copy.copy(data_object)
            ftype = type(identity)
            for attr in result.__dict__.keys():
                try:
                    result.__dict__[attr] = copy.copy(result.__dict__[attr])
                except:
                    pass
            result.after_init()
        else:
            result = self._class_(*self._args, **_kwargs)
        return result
    
    def __str__(self):
        return '<DataFactory: class=%s, args=%s, kwargs=%s>' % \
               (self._class_, deepstr(self._args), self._kwargs)

    def _get_data_object(key):
        class_, args, kwargs = key
        kwargs = dict(kwargs)
        kwargs['full_init'] = False
        return class_(*args, **kwargs)
    _get_data_object = staticmethod(_get_data_object)

    def access_rights(self):
        return self._kwargs.get('access_rights', None)

    # "Podrobné" porovnávání data factories je pøíli¹ nároèné na CPU.
#     def __cmp__(self, other):
#         return compare_attr(self, other, ('_class_', '_args', '_kwargs'))
#     def __hash__(self):
#         return hash_attr(self, ('_class_', '_args', '_kwargs_hashable'))


def dbtable(table, columns, connection_data, arguments=None, connection_name=None, sql_logger=None):
    """Return 'DBDataDefault' instance corresponding to a 'table' with 'columns'.

    Arguments:

      table -- table name, string
      columns -- sequence of column ids (strings); instead of column ids pairs
        of the form (ID, TYPE,) may be used where ID is the column id and TYPE
        is 'Type' instance corresponding to the type of the column,
        specifying types is necessary in case of table functions
      arguments -- optional sequence of table function arguments in case the
        table is actually a database function returning rows; sequence items
        must be 'DBBinding' instances
      sql_logger -- if not 'None' all SQL commands are written to this object
        using its 'write' method (which the object must provide)
    
    """
    def binding(spec):
        if is_sequence(spec):
            id, type_ = spec
        else:
            id, type_ = spec, None
        return pytis.data.DBColumnBinding(id,  table, id, type_=type_)
    bindings = [binding(spec) for spec in columns]
    factory = pytis.data.DataFactory(pytis.data.DBDataDefault, bindings, bindings[0],
                                     arguments=arguments, sql_logger=sql_logger)
    data = factory.create(connection_data=connection_data, connection_name=connection_name)
    return data
