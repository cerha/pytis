# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001-2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""Implementace tabulkových dat pro relaèní databázové stroje.

Základem modulu je abstraktní tøída 'DBData'.  Ta je potomkem tøídy
'data.Data' a obohacuje ji o specifikaci napojení tabulkových dat do relaèní
databáze a roz¹iøuje nìkteré ji metody.

Jednotliví potomci tøídy 'DBData' implementují databázový pøístup pro
jednotlivé databázové stroje (na úrovni SQL) a jejich potomci pak pro
konkrétní pythonová rozhraní k tìmto strojùm.

Rùzné databázové tøídy plní následující role:

- Pøeklad po¾adavkù do SQL pøíslu¹ného databázového stroje.

- Implementace komunikace s databází pomocí pythonového modulu.

- Interpretace column bindings.

Ka¾dá z tìchto rolí je realizována samostatnou tøídou.

Kromì toho modul obsahuje pomocnou tøídu 'DBConnection' pro specifikaci
databázového spojení, pomocné tøídy zalo¾ené na 'DBBinding' pro specifikaci
napojení uvnitø 'DBData' a databázové výjimky odvozené ze tøídy
'DBException'.  Tøídì 'DBBinding' a jejím potomkùm je tøeba vìnovat
obzvlá¹tní pozornost, pomocí nich se definují nejdùle¾itìj¹í vìci týkající se
tabulky.

"""


# TODO: V implementaci se poèítá s tím, ¾e z databáze nedostaneme nesmysly
# (z dùvodu jiného ne¾ programátorské chyby).  Tyto situace sice obecnì
# o¹etøujeme metáním DBException, to ale nestaèí, proto¾e taková situace mù¾e
# vzniknout i nìjakým problémem na DB serveru.  Je tedy v budoucnu
# bezpodmíneènì nutno tyto situace øádnì o¹etøovat a pro¹etøovat.  Nejprve je
# ov¹em nutno definovat nìjaký mechanismus o¹etøování chyb.


import gc
import thread
import weakref

from pytis.data import *


### Obecné tøídy


class DBData(Data):
    """Tabulková data mapovaná do relaèní databáze.

    Tøída roz¹iøuje svého pøedka o specifikaci napojení sloupcù tabulkových dat
    do relaèní databáze (blí¾e viz metoda '__init__') a o nìkteré argumenty
    jeho veøejných metod.  Zavádí také veøejnou metodu 'sleep'.

    Tato tøída je nezávislá na konkrétním pou¾itém databázovém stroji a
    pythonovém modulu.  Závislé vìci jsou implementovány v potomcích této
    tøídy, pøièem¾ se doporuèuje v nejbli¾¹í podtøídì napsat potomky pro
    jednotlivé databázové stroje (tj. realizovat metody na úrovni SQL a jiných
    vlastností daného databázového stroje) a teprve nad nimi definovat tøídy
    odpovídajícím jednotlivým pythonovým modulùm.  Je té¾ mo¾né vyu¾ít
    vícenásobné dìdiènosti a definovat napøíklad \"odboèující\" tøídu pro
    DB-SIG API.

    V¹echny metody této tøídy pøístupující k datùm mohou metat 'DBException'.
    
    """
    def __init__(self, bindings, ordering=None, distinct_on=(), arguments=None,
                 **kwargs):
        """Inicializuj tabulku s napojením do databáze.

        Argumenty:
        
          bindings -- sekvence instancí tøídy 'DBBinding'
          ordering -- stejné jako v pøedkovi
          distinct_on -- sequence of column names to add as a DISTINCT TO part
            to SELECT commands
          arguments -- sequence of 'DBBinding' instances defining table
            arguments, when the table is actually a row returning function.
            Otherwise it must be 'None'.
          kwargs -- k pøedání pøedkovi

        Sloupce datové tabulky se urèí automaticky na základì 'bindings'.
        Jejich typy jsou urèeny typy odpovídajících dat v databázi(pøesné
        mapování závisí na potomcích tøídy a není zde specifikováno).  Klíèovým
        sloupcem tabulky je první sloupec z 'bindings', který je klíèovým
        sloupcem v databázi.

        ®ádné dva prvky 'bindings' by nemìly mít shodné id, s výjimkou skrytých
        bindings, která mají jako id prázdný øetìzec.
        
        """
        assert is_sequence(bindings), ('Invalid binding type', bindings)
        self._bindings = tuple(bindings)
        assert not filter(lambda b: not isinstance(b, DBBinding),
                          bindings), \
               ('Invalid binding type', bindings)
        assert arguments is None or is_sequence(arguments), ('Invalid binding type', arguments)
        if arguments is None:
            self._arguments = None
        else:
            self._arguments = tuple(arguments)
            assert not filter(lambda b: not isinstance(b, DBBinding),
                              arguments), \
                   ('Invalid "argument" type', arguments)
        if __debug__: log(DEBUG, 'Bindings databázové instance', self._bindings)
        columns, key = self._db_bindings_to_column_spec(self._bindings)
        if __debug__: log(DEBUG, 'Sloupce databázové instance:', columns)
        if __debug__: log(DEBUG, 'Klíè databázové instance:', key)
        self._distinct_on = distinct_on
        try:
            del kwargs['key']
        except:
            pass
        super(DBData, self).__init__(columns=columns, key=key, ordering=ordering, **kwargs)

    def _db_bindings_to_column_spec(self, bindings):
        """Vra» dvojici (COLUMNS, KEY) odpovídající argumentùm 'Data.__init__'.

        V této tøídì metoda vrátí jednodu¹e seznam sloupcù v podobì instancí
        'ColumnSpec' s názvy odpovídajícími identifikátorùm 'bindings' (i co
        se týèe jejich poøadí), pøièem¾ typ v¹ech sloupcù je nastaven na
        nejobecnìj¹í typ 'types_.Type'.  Jako KEY je vrácen první sloupec
        uvedený v 'bindings'; pokud jsou 'bindings' prázdné, je vráceno 'None'.

        Tato implementace metody je velmi hrubá a metoda je urèena
        k pøedefinování v potomcích tøídy.

        """
        columns = map(lambda b: ColumnSpec(b.id(), Type()), bindings)
        if columns:
            key = columns[0]
        else:
            key = None
        return columns, key

    def _db_column_binding(self, col_id):
        """Vra» binding sloupce 'col_id'.

        Pokud pro 'col_id' není ¾ádné binding definováno, vra» 'None'.

        Argumenty:
        
          col_id -- identifikace tabulkového sloupce jako string
          
        """
        for b in self._bindings:
            if b.id() == col_id:
                return b
        return None

    def table(self, col_id):
        """Vra» tabulku sloupce 'col_id'.

        Argumenty:

           viz metoda '_db_column_binding'.
        """
        b = self._db_column_binding(col_id)
        if b:
            return b.table()
        return None

    def sleep(self):
        """Uvolni systémové zdroje vyu¾ívané instancí a umo¾ni její zru¹ení.

        Pokud instance vyu¾ívá nìkteré nedostatkové systémové zdroje jako
        napøíklad spojení do databáze nebo procesy, tato metoda by je mìla
        uvolnit.  Druhou funkcí metody je uvolnit prostøedky (napøíklad hlídací
        procesy), které znemo¾òují zru¹ení instance.

        Tato metoda by mìla být volána v¾dy, kdy¾ je trvale nebo na del¹í dobu
        ukonèeno pou¾ívání instance.

        Zavoláním této metody se neznemo¾òuje dal¹í pou¾ití instance, lze
        nadále vyu¾ívat v¹echny její veøejné metody.  Je-li pak ov¹em tøeba
        opìt uvolnit zdroje, je nutno tuto metodu zavolat znovu.

        """
        if __debug__: log(DEBUG, 'Uspání')
        self.close()

    def arguments(self):
        """Return the value of argument 'arguments' passed to the constructor."""
        return self._arguments
        

class DBConnectionPool:

    def __init__(self, connection_creator, connection_closer):
        if __debug__: log(DEBUG, 'Vytváøím nový pool')
        self._lock = thread.allocate_lock()
        self._pool = {}
        self._connection_creator = connection_creator
        self._connection_closer = connection_closer
        self._allocated_connections = {}

    def __del__(self):
        # Pro jistotu uzavíráme v¹echna spojení, pøesto¾e by to mìlo být
        # zbyteèné a zaji¹tìno automaticky v pyPgSQL; tøeba to pomù¾e
        # problému pozùstalých spojení.  Navíc pro jistotu zamykáme, co
        # kdyby ...
        def lfunction():
            for c in flatten(self._pool.values()):
                try:
                    self._connection_closer(c)
                except:
                    pass
        with_lock(self._lock, lfunction)

    def _connection_spec_id(self, connection_spec):
        c = connection_spec
        schemas = c.schemas()
        if isinstance(schemas, list):
            schemas = tuple(schemas)
        return (c.database(), c.host(), c.port(), c.user(), c.password(), c.sslmode(), schemas,)

    def get(self, connection_spec):
        import config
        pool = self._pool
        spec_id = self._connection_spec_id(connection_spec)
        def lfunction():
            try:
                connections = pool[spec_id]
            except KeyError:
                pool[spec_id] = connections = []
            try:
                allocated_connections = self._allocated_connections[spec_id]
            except KeyError:
                allocated_connections = self._allocated_connections[spec_id] \
                    = weakref.WeakKeyDictionary()
            if connections:
                if __debug__: log(DEBUG, 'Spojení k dispozici', connections)
                c = connections.pop()
            else:
                gc.collect()
                if (config.connection_limit is not None and
                    len(allocated_connections) >= config.connection_limit):
                    if __debug__:
                        log(EVENT, "Pøehled evidovaných spojení:")
                        for c in allocated_connections.keys():
                            log(EVENT, "Spojení:", c.connection_info('last_access'))
                    raise DBSystemException(_("Pøíli¹ mnoho databázových spojení"))
                else:
                    c = self._connection_creator(connection_spec)
                    if __debug__: log(DEBUG, 'Vytvoøeno nové spojení:', c)
                    allocated_connections[c] = True
            return c
        c = with_lock(self._lock, lfunction)
        if __debug__: log(DEBUG, 'Pøedávám spojení:', c)
        return c

    def put_back(self, connection_spec, connection):
        pool = self._pool
        spec_id = self._connection_spec_id(connection_spec)
        def lfunction():
            try:
                connections = pool[spec_id]
            except KeyError:
                pool[spec_id] = connections = []
            import config
            if (config.max_pool_connections is None or
                len(connections) < config.max_pool_connections):
                connections.append(connection)
        with_lock(self._lock, lfunction)
        if __debug__: log(DEBUG, 'Do poolu vráceno spojení:', connection)


### Specifikaèní tøídy

    
class DBConnection:
    """Specifikace parametrù pro pøipojení do databáze.

    Jedná se èistì o specifikaci, tøída sama ¾ádné operace týkající se napojení
    do databáze neprovádí ani neudr¾uje skuteèný objekt spojení.  Pro popis
    parametrù spojení viz metoda '__init__'.

    Tato tøída je mínìna jako immutable a tudí¾ mù¾e být libovolnì sdílena.
    Pro malé úpravy specifikace lze vyu¾ít metodu 'modified()'.

    """
    _OPTIONS = ('user', 'password', 'host', 'port', 'database', 'sslmode', 'schemas',)
    
    def __init__(self, user=None, password=None, host=None, port=None,
                 database=None, sslmode='allow', schemas=None, alternatives={}, _name=None):
        """Initialize connection specification instance.

        Arguments:
        
          user -- database user as a string or 'None'
          password -- database password as a string or 'None'
          host -- database server name as a string or 'None'
          port -- database server port number as an int or 'None'
          database -- database name as a string or 'None'
          sslmode -- one of string constants accepted by PostgreSQL
          schemas -- non-empty sequence of schema identifiers (strings) to use
            in the database in the order of preference or 'None' (use default
            schemas)
          alternatives -- dictionary of alternative connection parameters.  Alternative
            database connections are identified by name and data object specifications may refer
            to these names to use connect to alternative data sources (thus the number and names
            of alternative connections is application specific).  The dictionary keys are
            connection names and the values are dictionaries of connection options ('user',
            'password', 'host', 'database', ...) with the same meaning as the corresponding
            arguments.

        Arguments with the value 'None' will be ignored when connecting to the database.

        """
        self._user = user
        self._password = password
        self._host = host
        self._port = port
        self._database = database
        self._sslmode = sslmode
        self._schemas = schemas
        if None not in alternatives:
            # Add the default connection to the alternatives if it is not already there, to be able
            # to `select()' back to it.
            alternatives[None] = self._options()
        self._alternatives = alternatives
        # Passing this private argument avoids unnecessay duplication of instances in `select()'.
        self._name = _name

    def _options(self, exclude=()):
        return dict([(option, self.__dict__['_'+option])
                     for option in self._OPTIONS
                     if option not in exclude and self.__dict__['_'+option] is not None])
    
    def __str__(self):
        options = ["%s='%s'" % item for item in self._options(exclude=('password',)).items()]
        return "<%s %s>" % (self.__class__.__name__, ", ".join(options))

    def user(self):
        """Vra» databázového u¾ivatele jako string nebo 'None'."""
        return self._user

    def password(self):
        """Vra» heslo databázového u¾ivatele jako string nebo 'None'."""
        return self._password

    def host(self):
        """Vra» jméno databázového serveru jako string nebo 'None'."""
        return self._host

    def port(self):
        """Vra» jméno portu na serveru jako integer nebo 'None'."""
        return self._port

    def database(self):
        """Vra» jméno databáze jako string nebo 'None'."""
        return self._database

    def sslmode(self):
        return self._sslmode

    def schemas(self):
        """Return schemas given in the constructor."""
        return self._schemas

    def __cmp__(self, other):
        """Vra» 0, právì kdy¾ 'self' a 'other' definují toté¾ spojení.

        Dvì instance této tøídy reprezentují toté¾ spojení, právì kdy¾ se
        rovnají odpovídající si parametry zadané jejich konstruktorùm.

        """
        return compare_attr(self, other, ['_'+option for option in self._OPTIONS])

    def __hash__(self):
        return hash_attr(self, ['_'+option for option in self._OPTIONS])

    def select(self, name):
        """Return the specification instance activated for given connection name.

        Available connection names are defined by the 'alternatives' constructor argument.  'None'
        is reserved for the default connection.  The list of alternative connections is kept, so it
        is possible to switch back to a previous connection using 'select()' again.
        
        """
        if name == self._name:
            return self
        else:
            options = dict(self._alternatives[name], alternatives=self._alternatives, _name=name)
            return self.__class__(**options)

    def modified(self, **kwargs):
        """Return the new specification instance updated by given arguments.

        The new instance is the same as 'self', except for the values of passed keyword arguments.

        Arguments:

          kwargs -- keyword arguments same as in constructor.

        """
        options = dict(self._options(), alternatives=self._alternatives, **kwargs)
        return self.__class__(**options)

    def update_login_data(self, user, password):
        """Set given login parameters in the instance.

        Arguments:

          user -- database user as a string or 'None'
          password -- database password as a string or 'None'

        """
        self._user = user
        self._password = password


class DBBinding:
    """Definice napojení dat do databáze.

    Tato definice je vyu¾ívána tøídou 'DBData' a jejími potomky.
    
    Tato tøída je pouze abstraktním základem, který definuje pouze stringový
    identifikátor instance napojení.  Mechanismy pro skuteèné definice
    databázových napojení poskytují a¾ potomci této tøídy.

    Tøída je specifikována jako immutable a jako taková mù¾e být libovolnì
    sdílena.
    
    """
    def __init__(self, id):
        """Definuj napojení.

        Argumenty:
        
          id -- identifikátor napojení, libovolný string
          
        """
        assert isinstance(id, str)
        self._id = id

    def id(self):
        """Vra» identifikátor napojení zadaný v konstruktoru."""
        return self._id


class DBColumnBinding(DBBinding):
    """Vazba 1-1 tabulkového sloupce na databázový sloupec.

    Tato vazba je dána jménem databázové tabulky a jejího sloupce, na který
    se tabulkový sloupec mapuje.
    
    Tøída je specifikována jako immutable a jako taková mù¾e být libovolnì
    sdílena.
    
    """
    def __init__(self, id, table, column, related_to=None, type_=None, **kwargs):
        """Define a column binding.

        Argumenty:
        
          id -- id sloupce
          table -- jméno databázové tabulky, do které má být tabulkový sloupec napojen, jako string
          column -- jméno sloupce databázové tabulky, na který má být tabulkový sloupec napojen,
            jako string nebo sekvence (viz ní¾e)
          related_to -- instance 'DBColumnBinding' specifikující, se kterým sloupcem jiné
            databázové tabulky je tento sloupec v relaci; pokud s ¾ádným, je hodnotou 'None'
          type_ -- explicitnì specifikovaný typ sloupce jako instance tøídy 'Type' nebo 'None'.
            Je-li 'None', bude typ sloupce urèen automaticky dle informací získaných pøímo
            z databáze.  V opaèném pøípadì bude typem hodnota tohoto argumentu, která musí
            odpovídat typu sloupce v databázi (být jeho specializací).
          **kwargs -- explicitnì definované klíèové argumenty typu.  Pokud jsou definovány
            libovolné klíèové argumenty, budou tyto pøedány konstruktoru implicitního datového
            typu.  Typ v takovém pøípadì nesmí být explicitnì urèen argumentem 'type_'.

        Napojení mù¾e být *skryté*, co¾ znamená, ¾e pøímo neodpovídá ¾ádnému sloupci datové
        tabulky.  To se mù¾e stát napøíklad v pøípadì, ¾e binding je definováno *pouze* kvùli
        specifikaci relace mezi tabulkami (prostøednictvím argumentu 'related_to').  U skrytého
        napojení nezále¾í na hodnotì pøíslu¹ného sloupce a tudí¾ k tìmto hodnotám ani nelze
        pøistupovat.  Napojení je pova¾ováno za skryté, právì kdy¾ øetìzec 'id' je prázdný.

        'related_to' je obecnì nesymetrická relace pøibli¾nì odpovídající specifikátoru REFERENCES.

        """
        DBBinding.__init__(self, id)
        assert isinstance(table, str), table
        assert isinstance(column, str), column
        assert isinstance(type_, Type) or type(type_) == type(Type) or type_ is None, type_
        if __debug__:
            if isinstance(type_, Type):
                kwargs_copy = copy.copy(kwargs)
                if type_.not_null() == kwargs_copy.get('not_null', type_.not_null()):
                    try:
                        del kwargs_copy['not_null']
                    except KeyError:
                        pass                        
                assert kwargs == {}, (type_, kwargs)
        self._table = table
        self._column = column
        self._related_to = related_to
        self._type = type_
        self._kwargs = kwargs
        self._is_hidden = not id

    def table(self):
        """Vra» jméno napojené databázové tabulky jako string."""
        return self._table

    def column(self):
        """Vra» jméno napojeného sloupce jako string."""
        return self._column

    def related_to(self):
        """Vra» instanci DBColumnBinding napojeného sloupce nebo 'None'."""
        return self._related_to

    def type(self):
        """Vra» instanci typu sloupce z konstruktoru nebo 'None'."""
        return self._type
    
    def kwargs(self):
        """Vra» slovník klíèových argumentù konstruktoru dat. typu sloupce."""
        return self._kwargs
    
    def is_hidden(self):
        """Vra» pravdu, právì kdy¾ sloupec není pøítomen v datové tabulce."""
        return self._is_hidden

    def __str__(self):
        return ('<DBCB: id=%s, table=%s, column=%s, related_to=%s, type=%s, is_hidden=%s>') % \
               (self._id, self._table, self._column, self._related_to, self._type, self._is_hidden)

    def __cmp__(self, other):
        return compare_attr(self, other,
                            ('_table', '_column', '_related_to', '_type', '_is_hidden'))
    
    def __hash__(self):
        return hash_attr(self, ('_table', '_column', '_related_to', '_type', '_is_hidden'))



### Databázové výjimky


class DBException(Exception):
    """Výjimka nahazovaná v pøípadì vzniku databázové chyby.

    V¹echny databázové výjimky metané ven ze tøídy 'DBData' jsou tohoto typu.

    Tøída ve svém konstruktoru automaticky zaloguje základní informace
    o výjimce.

    """
    def __init__(self, message, exception=None, *args):
        """Inicializuj výjimku a zaloguj informace o ní.

        Argumenty:

          message -- lidsky èitelné oznámení o chybì, string; mù¾e být té¾
            'None', v kterém¾to pøípadì se doplní standardní zpráva
            o databázové chybì, to je v¹ak vhodné pou¾ívat pouze v pøípadì, kdy
            nemá smysl u¾ivateli sdìlovat bli¾¹í popis chyby
          exception -- výjimka, která tuto výjimku zpùsobila, instance tøídy
            'Exception'; nebo 'None' (neznamená nutnì, ¾e chyba nebyla
            zpùsobena výjimkou, tato výjimka pouze nemusí být podstatná)
          args -- libovolné dal¹í argumenty, které mají být spolu s 'message' a
            'exception' pøedány konstruktoru nadtøídy

        """
        if message == None:
            message = _("Databázová chyba")
        super_(DBException).__init__(self, message, exception, *args)
        log(OPERATIONAL, 'Database exception', (message,) + args)
        if exception:
            log(OPERATIONAL, 'Wrapped database exception', (exception,) + exception.args)
        self._message = message
        self._exception = exception

    def message(self):
        """Vra» lidsky èitelnou zprávu zadanou v konstruktoru, jako string."""
        return self._message

    def exception(self):
        """Vra» databázovou výjimku zadanou v konstruktoru nebo 'None'."""
        return self._exception


class DBSystemException(DBException):
    """Výjimka nahazovaná v pøípadì vzniku systémové databázové chyby.

    Systémová chyba je chyba související se systémovými prostøedky, napøíklad
    chyba spojení do databáze.  Viz té¾ 'DBUserException'.

    Databázové rozhraní generuje v pøípadì databázových chyb
    'DBSystemException' pouze tehdy, je-li schopno rozpoznat, ¾e se jedná
    o systémovou chybu.  To znamená, ¾e systémová chyba mù¾e být signalizována
    i jako prostá 'DBException'.
    
    """


class DBUserException(DBException):
    """Výjimka nahazovaná v pøípadì vzniku u¾ivatelské databázové chyby.

    U¾ivatelská chyba je chyba zpùsobená syntakticky nebo sémanticky chybnou
    databázovou operací, napøíklad chybným pou¾itím SQL pøíkazu nebo pokusem
    o poru¹ení referenèní integrity.  Viz té¾ 'DBSystemException'.

    Databázové rozhraní generuje v pøípadì databázových chyb
    'DBUserException' pouze tehdy, je-li schopno rozpoznat, ¾e se jedná
    o u¾ivatelskou chybu.  To znamená, ¾e u¾ivatelská chyba mù¾e být
    signalizována i jako prostá 'DBException'.
    
    """


class DBLoginException(DBException):
    """Databázová výjimka zpùsobená chybnou autentizací jménem a heslem.

    Tato výjimka je vyvolávána pouze pøi uvedeném zpùsobu autentizace, jestli¾e
    u¾ivatel zadá chybné jméno nebo heslo.

    """
    def __init__(self):
        """Inicializuj databázovou výjimku s patøiènými argumenty."""
        super_(DBLoginException).__init__\
          (self, _("Chybné u¾ivatelské jméno nebo heslo"))


class DBLockException(DBException):
    """Exception thrown when trying to lock an already locked record.
    """
    def __init__(self):
        super_(DBLockException).__init__(self, None)


class DBInsertException(DBException):
    """Exception thrown when INSERT ... RETURNING can't be performed.
    """
    def __init__(self):
        super_(DBLockException).__init__(self, None)
