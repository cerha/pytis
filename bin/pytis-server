#!/usr/bin/env python
# -*- coding: iso-8859-2 -*-

# Copyright (C) 2002, 2003 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import gc
import getopt
import gettext
import sys

import Pyro.core, Pyro.errors, Pyro.naming


_EXIT_OK = 0
_EXIT_USAGE = 1

_PROFILE = 'profile'
_PROFILE_RESULTS = '%s.results' % _PROFILE

def _usage(optexception=None):
    _USAGE = _("""
u¾ití: ebas [OPTION ...]

Volby:

  --config FILE       konfiguraèní soubor aplikace
  --defdir DIR        hledej definièní soubory v adresáøi DIR

  --help              vypi¹ tuto nápovìdu a skonèi
  --debug             zapni debugovací logování
  --debug-on-error    pøi odchycení neoèekávané výjimky spus» debugger
  --debug-memory      vypisuj informace o pamìti
  --profile           spus» program v profileru a zapi¹ výsledky do `%s'

""" % (_PROFILE))
    if optexception:
        sys.stderr.write(optexception.msg)
        sys.stderr.write('\n')
    sys.stderr.write(_USAGE)
    sys.exit(_EXIT_USAGE)


def _install_gettext():
    import lib.util as util             # a¾ po konfiguraci
    import config
    try:
        gettext.install('ebas')
    except IOError, e:
        util.log(util.OPERATIONAL, 'Nelze otevøít jazykový soubor', e.args)
        import __builtin__
        __builtin__.__dict__['_'] = util.identity    


def _run_server():
    import lib.remote
    lib.remote.run_server()


def go():
    try:
        import lib.remote
    except getopt.GetoptError, e:
        _usage(e)
    import lib.data
    import config
    if config.help:
        _usage()
    if config.debug_memory:
        gc.set_debug(gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE |
                     gc.DEBUG_INSTANCES | gc.DEBUG_OBJECTS)
    _install_gettext()
    lib.data.DataFactory = lib.remote.wrap_data_factory
    if config.profile:
        import profile
        profile.run('_run_server()', _PROFILE)
        import pstats
        stats = pstats.Stats(_PROFILE)
        stats.sort_stats('cumulative')
        stdout = sys.stdout
        f = open(_PROFILE_RESULTS, 'w')
        sys.stdout = f
        try:
            stats.print_stats()
        finally:
            sys.stdout = stdout
    else:
        _run_server()
    if config.debug_memory:
        sys.stderr.write('Final pending data: %s\n' % gc.garbage)


if __name__ == '__main__':
    sys.argv[0] = 'ebas'               # kvùli zpracování voleb pøíkazové øádky
    go()
