#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2019 Tomáš Cerha <t.cerha@gmail.com>
# Copyright (C) 2001-2018 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import gc
import getopt
import imp
import os
import sys
import locale
import pytis

# Make Python respect users locale settings (https://docs.python.org/2/library/locale.html).
locale.setlocale(locale.LC_ALL, '')

if sys.version_info[0] == 2:
    # Ošklivý hack kvůli ošetření výchozího kódování protože site.py metodu
    # `setdefaultencoding()' z modulu `sys' vymaže.
    imp.reload(sys)
    sys.setdefaultencoding('utf-8')

_EXIT_OK = 0
_EXIT_USAGE = 1

_PROFILE = 'profile'
_PROFILE_RESULTS = '%s.results' % _PROFILE


def _usage(optexception=None):
    _USAGE = """
Usage: pytis [OPTION ...]

Options:

  --config FILE        application configuration file
  --dbuser USER        connect to the database as USER

  --help               display this help and exit
  --debug              turn on debugging logging
  --debug-on-error     run debugger on unhandled exception
  --debug-memory       display memory info
  --profile            run in profiler and write results to `%s'
  --dump-queries COUNT dump COUNT most time consuming SQL queries to STDOUT
  --session-id         use the given session_id

""" % (_PROFILE_RESULTS)
    if optexception:
        sys.stderr.write(optexception.msg)
        sys.stderr.write('\n')
    sys.stderr.write(_USAGE)
    sys.exit(_EXIT_USAGE)


def go():
    if not os.getenv('DISPLAY'):
        sys.stderr.write("X11 not available.\n")
        return
    try:
        pytis.config.add_command_line_options(sys.argv)
    except getopt.GetoptError as e:
        _usage(e)
    if pytis.config.help:
        _usage()
    if pytis.config.debug_memory:
        gc.set_debug(gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE |
                     gc.DEBUG_INSTANCES | gc.DEBUG_OBJECTS)
        pytis.util.log.add_hook(pytis.util.mem_info)
    queries = []
    if pytis.config.dump_queries:
        def query_callback(query, start_time, end_time):
            queries.append((end_time - start_time, query))
        pytis.data.DBDataDefault.set_query_callback(query_callback)
    try:
        if pytis.config.profile:
            import cProfile
            import pstats
            cProfile.run('run_application()', _PROFILE)
            with open(_PROFILE_RESULTS, 'w') as stream:
                stats = pstats.Stats(_PROFILE, stream=stream)
                stats.sort_stats('cumulative')
                stats.print_stats()
                sys.stderr.write("Profile statistics written to '%s'.\n" %
                                 (os.path.realpath(_PROFILE_RESULTS),))
        else:
            run_application()
    except SystemExit:
        pass
    except Exception:
        einfo = sys.exc_info()
        try:
            import cgitb
            sys.stderr.write(cgitb.text(einfo))
        except Exception as e:
            sys.stderr.write("Unable to generate detailed traceback: " + str(e) + "\n")
            import traceback
            traceback.print_exception(*einfo)
    if pytis.config.debug_memory:
        sys.stderr.write('Final pending data: %s\n' % gc.garbage)
    if pytis.config.dump_queries:
        sys.stderr.write('Dumping top %s DB queries:\n' % pytis.config.dump_queries)
        for time, query in sorted(queries, reverse=True)[:int(pytis.config.dump_queries)]:
            sys.stderr.write('   %0.3f %s\n' % (time, query))
    sys.stderr.flush()


def gg():
    def g():
        sys.stdout.write('\nThread PID: %s\n\n' % os.getpid())
        go()
    import thread
    thread.start_new_thread(g, ())


def run_application():
    gc.enable()  # just to be sure...
    import pytis.form  # must be after processing command line options
    pytis.form.Application().run()


if __name__ == '__main__':
    go()
