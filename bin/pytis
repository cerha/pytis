#!/usr/bin/env python
# -*- coding: iso-8859-2 -*-

# Copyright (C) 2001-2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import gc
import getopt
import gettext
import imp
import os
import sys

# O¹klivý hack kvùli o¹etøení výchozího kódování proto¾e site.py metodu `setdefaultencoding()' z
# modulu `sys' vyma¾e.
reload(sys)
sys.setdefaultencoding('iso-8859-2')

_EXIT_OK = 0
_EXIT_USAGE = 1

_PROFILE = 'profile'
_PROFILE_RESULTS = '%s.results' % _PROFILE

_profile = 0 # FALSE


def _usage(optexception=None):
    _USAGE = _("""
Pou¾ití: pytis [OPTION ...]

Volby:

  --config FILE       konfiguraèní soubor aplikace
  --dbuser USER       pøihla¹uj se do databáze jako USER
  --defdir DIR        hledej definièní soubory v adresáøi DIR
  --server HOST       name server, ke kterému se má program pøipojovat

  --help              vypi¹ tuto nápovìdu a skonèi
  --debug             zapni debugovací logování
  --debug-on-error    pøi odchycení neoèekávané výjimky spus» debugger
  --debug-memory      vypisuj informace o pamìti
  --profile           spus» program v profileru a zapi¹ výsledky do `%s'

""" % (_PROFILE))
    if optexception:
        sys.stderr.write(optexception.msg)
        sys.stderr.write('\n')
    sys.stderr.write(_USAGE)
    sys.exit(_EXIT_USAGE)

def _install_gettext():
    import pytis.util as util             # a¾ po konfiguraci
    import config
    try:
        gettext.install('ebas')
    except IOError, e:
        util.log(util.OPERATIONAL, 'Nelze otevøít jazykový soubor', e.args)
        import __builtin__
        __builtin__.__dict__['_'] = util.identity    

def go():
    import pytis.util as util             # a¾ po konfiguraci
    import config
    try:
        config.add_command_line_options(sys.argv)
    except getopt.GetoptError, e:
        _usage(e)
    if not util.in_x():
        sys.stderr.write(_("Nedostupné prostøedí X Window\n"))
        return
    import config
    if config.help:
        _usage()
    _install_gettext()
    if config.debug_memory:
        gc.set_debug(gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE |
                     gc.DEBUG_INSTANCES | gc.DEBUG_OBJECTS)
        util.log.add_hook(util.mem_info)
    try:
        if config.profile:
            import profile
            profile.run('run_application()', _PROFILE)
            import pstats
            stats = pstats.Stats(_PROFILE)
            stats.sort_stats('cumulative')
            stdout = sys.stdout
            f = open(_PROFILE_RESULTS, 'w')
            sys.stdout = f
            try:
                stats.print_stats()
            finally:
                sys.stdout = stdout
        else:
            run_application()
    except SystemExit:
        pass
    except:
        einfo = sys.exc_info()
        try:
            import cgitb
            sys.stderr.write(cgitb.text(einfo))
        except Exception, e:
            sys.stderr.write("Unable to generate detailed traceback: "+ str(e) +"\n")
            import traceback
            traceback.print_exception(*einfo)
    if config.debug_memory:
        sys.stderr.write('Final pending data: %s\n' % gc.garbage)


def gg():
    def g():
        sys.stdout.write('\nThread PID: %s\n\n' % os.getpid())
        go()
    import thread
    thread.start_new_thread(g, ())


def run_application():
    gc.enable() # pro jistotu
    import locale
    import pytis.form # musí být a¾ za zpracováním voleb
    # O¹etøení chyby Pythonu zpùsobující chybné parsování reálných èísel ve
    # zdrojových textech po importu wxWindows.
    # ??? Mo¾ná je to ji¾ opraveno, zdá se, ¾e se tato chyba ji¾ neprojevuje.
    import config
    try:
        locale.setlocale(locale.LC_NUMERIC, config.lc_numeric)
    except locale.Error:
        locale.setlocale(locale.LC_NUMERIC, 'C')
    pytis.form.Application().run()

if __name__ == '__main__':
    sys.argv[0] = 'pytis'               # kvùli zpracování voleb pøíkazové øádky
    go()
