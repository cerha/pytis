#!/usr/bin/env python

# Copyright (C) 2011 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import logging
import os
import rpyc
import rpyc.utils.authenticators
import rpyc.utils.server
import socket
import ssl
import sys
import tempfile
import threading
import time

import win32serviceutil
import win32service
import win32event
import servicemanager

host = '0.0.0.0'
port = 17984
key_file = '/windows.key'
certificate_file = '/windows.crt'
ca_certificate_file = '/ca.crt'
logging_level = logging.INFO

_stop = False
_user_port = port + 1
_registered_users = {}

def username():
    import win32api
    return win32api.GetUserName()

def is_admin():
    return os.path.basename(__file__) in('windows-server', 'windows-server.py',
                                         'windows-server.pyc', 'windows-server.pyo',)

class WindowsLoggingHandler(logging.Handler):
    
    def emit(self, record):
        try:
            msg = self.format(record)
            servicemanager.LogInfoMsg(msg)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
    
class Authenticator(object):
    
    def __call__(self, sock):
        host, _port = sock.getpeername()
        if host in ('127.0.0.1', '::1',):
            return sock, None
        try:
            ssl_sock = ssl.wrap_socket(sock, server_side=True,
                                       keyfile=key_file, certfile=certificate_file,
                                       ca_certs=ca_certificate_file,
                                       cert_reqs=ssl.CERT_REQUIRED, ssl_version=ssl.PROTOCOL_TLSv1)
        except Exception:
            e = sys.exc_info()[1]
            raise rpyc.utils.authenticators.AuthenticationError(str(e))
        if ssl_sock.getpeercert() is None:
            raise rpyc.utils.authenticators.AuthenticationError("Invalid client certificate")
        return ssl_sock, None

class PytisUserService(rpyc.Service):

    def exposed_echo(self, text):
        """Return 'text'.

        This is useful for checking whether the service is working.
        
        """
        return text
        
    def exposed_get_clipboard_text(self):
        """Return current clipboard text, as unicode.

        If the text can't be retrieved, return 'None'.
        
        """
        import win32clipboard
        win32clipboard.OpenClipboard()
        try:
            data = win32clipboard.GetClipboardData(win32clipboard.CF_UNICODETEXT)
        except:                   # may happen when there is no clipboard data
            data = None
        win32clipboard.CloseClipboard()
        return data
        
    def exposed_set_clipboard_text(self, text):
        """Set clipboard content to text.

        Arguments:

          text -- text to store into the clipboard; unicode
          
        """
        assert isinstance(text, unicode), text
        import win32clipboard
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, text)
        win32clipboard.CloseClipboard()

    def exposed_launch_file(self, path):
        """Start associated application on path.

        Arguments:

          path -- path to the file to be started with its associated
            application; basestring.  Note that path must be given in the
            Windows form, i.e. use backslashes to separate path elements.

        """
        assert isinstance(path, basestring), path
        os.startfile(path)

    def exposed_make_temporary_file(self, suffix=''):
        """Create a temporary file and return its instance.

        The return value is a 'tempfile.NamedTemporaryFile' instance.

        Arguments:

          suffix -- suffix to use in the temporary file name; if a dot should
            be part of the suffix then it must be explicitly included in it
        
        """
        class Wrapper(object):
            def __init__(self, handle, filename):
                self._f = os.fdopen(handle, 'w')
                self._filename = filename
            def exposed_write(self, data):
                self._f.write(data)
            def exposed_close(self):
                self._f.close()
            def exposed_name(self):
                return self._filename
        handle, filename = tempfile.mkstemp(prefix='pytis', suffix=suffix)
        return Wrapper(handle, filename)

    def exposed_upgrade(self, source):
        assert source and isinstance(source, basestring), source
        file_name = __file__
        new_file_name = file_name + '.new'
        f = open(new_file_name, 'wb')
        f.write(source)
        f.close()
        os.remove(file_name)
        os.rename(new_file_name, file_name)
        global _stop
        _stop = True

class PytisAdminService(PytisUserService):
        
    def exposed_register_user(self, user, port):
        assert isinstance(user, basestring), user
        assert isinstance(port, int), port
        _registered_users[user] = port

    def exposed_user_port(self, user):
        assert isinstance(user, basestring), user
        return _registered_users.get(user)
    
class PytisThreadedServer(rpyc.utils.server.ThreadedServer):

    def __init__(self, *args, **kwargs):
        self._pytis_start_stop_thread()
        super(PytisThreadedServer, self).__init__(*args, **kwargs)
        
    def _get_logger(self):
        logger = super(PytisThreadedServer, self)._get_logger()
        logger.setLevel(logging_level)
        handler = WindowsLoggingHandler()
        logger.addHandler(handler)
        return logger

    def _pytis_start_stop_thread(self):
        t = threading.Thread(target=self._pytis_check_stop)
        t.daemon = True
        t.start()
        
    def _pytis_check_stop(self):
        global _stop
        while True:
            if _stop:
                self.logger.info('stop requested')
                time.sleep(1) # provide some time to finnish the connection
                self.close()
                return
            time.sleep(1)

def registration_thread():
    user = username()
    while True:
        time.sleep(30)
        try:
            connection = rpyc.connect('127.0.0.1', port)
            connection.root.register_user(user, _user_port)
        except:
            pass

class WindowsService(win32serviceutil.ServiceFramework):
    if is_admin():
        _svc_name_ = "PytisService"
        _svc_display_name_ = "Pytis Service"
    else:
        _svc_name_ = "PytisUserService"
        _svc_display_name_ = "Pytis User Service"

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_, ''))
        self.run()

    def _stop_check_loop(self):
        servicemanager.LogInfoMsg("stop check loop started")
        while True:
            code = win32event.WaitForSingleObject(self.hWaitStop, 1000)
            if code == win32event.WAIT_OBJECT_0:
                servicemanager.LogInfoMsg("Stop requested")
                global _stop
                _stop = True
                break

    def _run_admin(self):
        servicemanager.LogInfoMsg("Running manager service")
        start_manager(True)
        self._stop_check_loop()

    def _run_user(self):
        servicemanager.LogInfoMsg("Running user service")
        start_user(True)
        self._stop_check_loop()
            
    def run(self):
        if is_admin():
            self._run_admin()
        else:
            self._run_user()

def start_manager(in_background):
    t = PytisThreadedServer(PytisAdminService, hostname=host, port=port,
                            authenticator=Authenticator(), auto_register=False)
    if in_background:
        thread = threading.Thread(target=t.start)
        thread.start()
    else:
        t.start()

def start_user(in_background):
    global _user_port
    server = None
    while _user_port < 65536:
        try:
            server = PytisThreadedServer(PytisUserService, hostname=host, port=_user_port,
                                         authenticator=Authenticator(), auto_register=False)
            break
        except socket.error:
            _user_port += 1
    if server is None:
        servicemanager.LogInfoMsg("No free port found, exiting")
        return
    servicemanager.LogInfoMsg("Running on port %s" % (_user_port,))
    registration = threading.Thread(target=registration_thread)
    registration.daemon = True
    registration.start()
    if in_background:
        thread = threading.Thread(target=server.start)
        thread.start()
    else:
        server.start()

def run():
    if is_admin():
        start_manager(False)
    else:
        start_user(False)

if __name__ == '__main__':
    if is_admin():
        win32serviceutil.HandleCommandLine(WindowsService)
    else:
        run()
