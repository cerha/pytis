#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2011, 2012 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# ATTENTION: This should be updated on each code change.
_VERSION = '2012-11-20 15:20'

URLPREFIX='https://ssl.asellus.cz/programs'
PROCMODULE='pytisproc'

import logging
import os
import rpyc
import rpyc.utils.authenticators
import rpyc.utils.server
import socket
import ssl
import sys
import threading
import time

import win32serviceutil
import win32service
import win32event
import servicemanager

try:
    import pytisproc
except ImportError, e:
    url = "%s/%s.py" % (URLPREFIX, PROCMODULE)
    content = None
    for i in range(10):
        try:
            import urllib
            urllib.urlcleanup()
            f = urllib.urlopen(url, proxies={})
            content = f.read()
            f.close()
            break
        except Exception, e:
            time.sleep(3)
    if not content:
        raise e
    else:
        procfile = os.path.join(os.path.split(__file__)[0], '%s.py' % PROCMODULE)
        f = open(procfile, 'w')
        f.write(content)
        f.close()
        import pytisproc

host = '0.0.0.0'
port = 17984
certificate_directory = os.path.join(os.environ["WINDIR"], "ssl")
key_file = os.path.join(certificate_directory, 'windows.key')
certificate_file = os.path.join(certificate_directory, 'windows.crt')
ca_certificate_file = os.path.join(certificate_directory, 'ca.crt')
logging_level = logging.ERROR

_stop = False
class _Registration(object):
    user_port = port + 1
    registered_users = {}
_registration = _Registration()

def username():
    import win32api
    return win32api.GetUserName()

def is_admin():
    return os.path.basename(__file__) in('windows-server', 'windows-server.py',
                                         'windows-server.pyc', 'windows-server.pyo',
                                         'windows_server', 'windows_server.py',
                                         'windows_server.pyc', 'windows_server.pyo',)

class WindowsLoggingHandler(logging.Handler):
    
    def emit(self, record):
        try:
            msg = self.format(record)
            servicemanager.LogInfoMsg(msg)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
    
class Authenticator(object):
    
    def __call__(self, sock):
        host, _port = sock.getpeername()
        if host in ('127.0.0.1', '::1',):
            return sock, None
        try:
            ssl_sock = ssl.wrap_socket(sock, server_side=True,
                                       keyfile=key_file, certfile=certificate_file,
                                       ca_certs=ca_certificate_file,
                                       cert_reqs=ssl.CERT_REQUIRED, ssl_version=ssl.PROTOCOL_TLSv1)
        except Exception:
            e = sys.exc_info()[1]
            raise rpyc.utils.authenticators.AuthenticationError(str(e))
        peer_certificate = ssl_sock.getpeercert()
        if peer_certificate is None:
            raise rpyc.utils.authenticators.AuthenticationError("Invalid client certificate")
        return ssl_sock, peer_certificate
    
class PytisThreadedServer(rpyc.utils.server.ThreadedServer):

    def __init__(self, *args, **kwargs):
        self._pytis_start_stop_thread()
        super(PytisThreadedServer, self).__init__(*args, **kwargs)
        
    def _get_logger(self):
        logger = super(PytisThreadedServer, self)._get_logger()
        logger.setLevel(logging_level)
        handler = WindowsLoggingHandler()
        logger.addHandler(handler)
        return logger
    
    def _accept_method(self, sock):
        admin = isinstance(self.service, pytisproc.PytisAdminService)
        for i in range(3):
            try:
                reload(pytisproc)
                break
            except ImportError, e:
                time.sleep(0.1)
            raise e
        service_class = pytisproc.PytisAdminService if admin else pytisproc.PytisUserService
        self.service = service_class
        service_class.registration = _registration
        return super(PytisThreadedServer, self)._accept_method(sock)

    def _pytis_start_stop_thread(self):
        t = threading.Thread(target=self._pytis_check_stop)
        t.daemon = True
        t.start()
        
    def _pytis_check_stop(self):
        global _stop
        while True:
            if _stop:
                self.logger.info('stop requested')
                time.sleep(1) # provide some time to finnish the connection
                self.close()
                return
            time.sleep(1)

def registration_thread():
    user = username()
    while True:
        time.sleep(30)
        try:
            connection = rpyc.connect('127.0.0.1', port)
            connection.root.register_user(user, _registration.user_port)
        except:
            pass

class WindowsService(win32serviceutil.ServiceFramework):
    if is_admin():
        _svc_name_ = "PytisService"
        _svc_display_name_ = "Pytis Service"
    else:
        _svc_name_ = "PytisUserService"
        _svc_display_name_ = "Pytis User Service"

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_, ''))
        self.run()

    def _stop_check_loop(self):
        servicemanager.LogInfoMsg("stop check loop started")
        while True:
            code = win32event.WaitForSingleObject(self.hWaitStop, 1000)
            if code == win32event.WAIT_OBJECT_0:
                servicemanager.LogInfoMsg("Stop requested")
                global _stop
                _stop = True
                break

    def _run_admin(self):
        servicemanager.LogInfoMsg("Running manager service")
        start_manager()
        self._stop_check_loop()
            
    def run(self):
        self._run_admin()

def start_manager():
    t = PytisThreadedServer(pytisproc.PytisAdminService, hostname=host, port=port,
                            authenticator=Authenticator(), auto_register=False)
    thread = threading.Thread(target=t.start)
    thread.start()

def start_user():
    global _user_port
    server = None
    while _registration.user_port < 65536:
        try:
            server = PytisThreadedServer(pytisproc.PytisUserService, hostname=host,
                                         port=_registration.user_port,
                                         authenticator=Authenticator(), auto_register=False)
            break
        except socket.error:
            _registration.user_port += 1
    if server is None:
        servicemanager.LogInfoMsg("No free port found, exiting")
        return
    servicemanager.LogInfoMsg("Running on port %s" % (_registration.user_port,))
    registration = threading.Thread(target=registration_thread)
    registration.daemon = True
    registration.start()
    server.start()

def run():
    start_user()

if __name__ == '__main__':
    if is_admin():
        win32serviceutil.HandleCommandLine(WindowsService)
    else:
        run()

# Local Variables:
# time-stamp-pattern: "30/^_VERSION = '%Y-%02m-%02d %02H:%02M'"
# End:
