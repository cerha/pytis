#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2011, 2012 Brailcom, o.p.s.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# ATTENTION: This should be updated on each code change.
_VERSION = '2012-09-14 17:37'

import logging
import os
import rpyc
import rpyc.utils.authenticators
import rpyc.utils.server
import socket
import ssl
import sys
import tempfile
import threading
import time

import win32serviceutil
import win32service
import win32event
import servicemanager

host = '0.0.0.0'
port = 17984
certificate_directory = os.path.join(os.environ["WINDIR"], "ssl")
key_file = os.path.join(certificate_directory, 'windows.key')
certificate_file = os.path.join(certificate_directory, 'windows.crt')
ca_certificate_file = os.path.join(certificate_directory, 'ca.crt')
logging_level = logging.ERROR

_stop = False
_user_port = port + 1
_registered_users = {}

def username():
    import win32api
    return win32api.GetUserName()

def is_admin():
    return os.path.basename(__file__) in('windows-server', 'windows-server.py',
                                         'windows-server.pyc', 'windows-server.pyo',
                                         'windows_server', 'windows_server.py',
                                         'windows_server.pyc', 'windows_server.pyo',)

class WindowsLoggingHandler(logging.Handler):
    
    def emit(self, record):
        try:
            msg = self.format(record)
            servicemanager.LogInfoMsg(msg)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
    
class Authenticator(object):
    
    def __call__(self, sock):
        host, _port = sock.getpeername()
        if host in ('127.0.0.1', '::1',):
            return sock, None
        try:
            ssl_sock = ssl.wrap_socket(sock, server_side=True,
                                       keyfile=key_file, certfile=certificate_file,
                                       ca_certs=ca_certificate_file,
                                       cert_reqs=ssl.CERT_REQUIRED, ssl_version=ssl.PROTOCOL_TLSv1)
        except Exception:
            e = sys.exc_info()[1]
            raise rpyc.utils.authenticators.AuthenticationError(str(e))
        peer_certificate = ssl_sock.getpeercert()
        if peer_certificate is None:
            raise rpyc.utils.authenticators.AuthenticationError("Invalid client certificate")
        return ssl_sock, peer_certificate

class PytisService(rpyc.Service):
    
    def exposed_echo(self, text):
        """Return 'text'.

        This is useful for checking whether the service is working.
        
        """
        return text

    def exposed_version(self):
        """Return server version."""
        return _VERSION

class PytisUserService(PytisService):

    def exposed_restart(self):
        """Restart the user service."""
        file_name = sys.argv[0]
        if file_name[:-4] == '.pyc':
            file_name = file_name[:-1]
        execfile(file_name)
        
    def exposed_get_clipboard_text(self):
        """Return current clipboard text, as unicode.

        If the text can't be retrieved, return 'None'.
        
        """
        import win32clipboard
        win32clipboard.OpenClipboard()
        try:
            data = win32clipboard.GetClipboardData(win32clipboard.CF_UNICODETEXT)
        except:                   # may happen when there is no clipboard data
            data = None
        win32clipboard.CloseClipboard()
        return data
        
    def exposed_set_clipboard_text(self, text):
        """Set clipboard content to text.

        Arguments:

          text -- text to store into the clipboard; unicode
          
        """
        assert isinstance(text, unicode), text
        import win32clipboard
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, text)
        win32clipboard.CloseClipboard()

    def exposed_launch_file(self, path):
        """Start associated application on path.

        Arguments:

          path -- path to the file to be started with its associated
            application; basestring.  Note that path must be given in the
            Windows form, i.e. use backslashes to separate path elements.

        """
        assert isinstance(path, basestring), path
        os.startfile(path)

    def exposed_open_selected_file(self, template=None):
        """Return a read-only 'file' like object of a user selected file.

        The file is selected by the user using a GUI dialog.  If the user
        cancels the dialog, 'None' is returned.

        Arguments:

          template -- a string defining the required file name pattern, or 'None'

        """
        assert template is None or isinstance(template, basestring), template
        import win32ui
        import win32con
        if template is None:
            file_filter = u"Všechny soubory (*.*)|*.*||"
            set_filename = "*.*"
        else:
            file_filter = (u"Soubory požadovaného typu (%s)|%s|Všechny soubory (*.*)|*.*||" %
                           (template, template,))
            set_filename = template
        dialog = win32ui.CreateFileDialog(1, None, "%s" % set_filename,
                                          win32con.OFN_HIDEREADONLY|win32con.OFN_OVERWRITEPROMPT,
                                          file_filter)
        result = dialog.DoModal()
        if result != 1:
            return None
        filename = dialog.GetPathName()
        if filename is None:
            return None
        class Wrapper(object):
            def __init__(self, filename):
                self._f = open(filename, 'rb')
                self._filename = filename
            def exposed_read(self):
                return self._f.read()
            def exposed_close(self):
                self._f.close()
            def exposed_name(self):
                return self._filename
        return Wrapper(filename)

    def exposed_make_selected_file(self, filename=None, template=None, encoding=None, mode='wb'):
        """Return a write-only 'file' like object of a user selected file.

        The file is selected by the user using a GUI dialog.  If the user
        cancels the dialog, 'None' is returned.

        Arguments:

          filename -- default filename or None
          template -- a string defining the required file name pattern, or 'None'
          encoding -- output encoding, string or None
          mode -- default mode for opening the file 

        """
        assert template is None or isinstance(template, basestring), template
        import win32ui
        import win32con
        if template is None:
            if filename:
                name, ext = os.path.splitext(filename)
                if ext:
                    template = "*%s" % ext
                    file_filter = (u"Soubory požadovaného typu (%s)|%s|Všechny soubory (*.*)|*.*||" %
                                   (template, template,))
                else:
                    file_filter = u"Všechny soubory (*.*)|*.*||"
            else:
                file_filter = u"Všechny soubory (*.*)|*.*||"
        else:
            file_filter = (u"Soubory požadovaného typu (%s)|%s|Všechny soubory (*.*)|*.*||" %
                           (template, template,))
        if filename:
            set_filename = filename
        else:
            set_filename = "*.*"
        dialog = win32ui.CreateFileDialog(0, None, "%s" % set_filename,
                                          win32con.OFN_HIDEREADONLY|win32con.OFN_OVERWRITEPROMPT,
                                          file_filter)
        result = dialog.DoModal()
        if result != 1:
            return None
        filename = dialog.GetPathName()
        if filename is None:
            return None
        class Wrapper(object):
            def __init__(self, filename, encoding, mode):
                self._f = open(filename, mode)
                self._filename = filename
                self._encoding = encoding
            def exposed_write(self, data):
                if isinstance(data, buffer):
                    data = data[:]
                elif self._encoding is not None:
                    data = data.encode(self._encoding)
                self._f.write(data)
            def exposed_close(self):
                self._f.close()
            def exposed_name(self):
                return self._filename
        return Wrapper(filename, encoding, mode)

    def exposed_make_temporary_file(self, suffix='', encoding=None, mode='wb'):
        """Create a temporary file and return its instance.

        The return value is a 'tempfile.NamedTemporaryFile' instance.

        Arguments:

          suffix -- suffix to use in the temporary file name; if a dot should
            be part of the suffix then it must be explicitly included in it
          encoding -- output encoding, string or None
          mode -- default mode for opening the file 
        
        """
        class Wrapper(object):
            def __init__(self, handle, filename, encoding, mode):
                self._f = os.fdopen(handle, mode)
                self._filename = filename
                self._encoding = encoding
            def exposed_write(self, data):
                if isinstance(data, buffer):
                    data = data[:]
                elif self._encoding is not None:
                    data = data.encode(self._encoding)
                self._f.write(data)
            def exposed_close(self):
                self._f.close()
            def exposed_name(self):
                return self._filename
        handle, filename = tempfile.mkstemp(prefix='pytis', suffix=suffix)
        return Wrapper(handle, filename, encoding, mode)

class PytisAdminService(PytisService):

    def _true_authentication(self):
        # Dirty: We access private attribute of self._conn.  But how to access
        # credentials otherwise?  And RPyC's SlaveService accesses the
        # attribute too.
        return self._conn._config.get('credentials')

    def exposed_restart(self, delay=1):
        """Restart the admin service after given timeout.

        Arguments:

          delay -- number of minutes to wait before the server gets restarted

        """
        import pythoncom
        import win32com.taskscheduler
        from win32com.taskscheduler import taskscheduler
        scheduler = pythoncom.CoCreateInstance(taskscheduler.CLSID_CTaskScheduler,
                                               None,
                                               pythoncom.CLSCTX_INPROC_SERVER,
                                               taskscheduler.IID_ITaskScheduler)
        def add_task(name, command, run_time):
            if '%s.job' % (name,) in scheduler.Enum():
                scheduler.Delete(name)
            task = scheduler.NewWorkItem(name)
            cmd = command.split()
            task.SetApplicationName(cmd[0])
            task.SetParameters(' '.join(cmd[1:]))
            task.SetPriority(taskscheduler.REALTIME_PRIORITY_CLASS)
            task.SetFlags(taskscheduler.TASK_FLAG_DELETE_WHEN_DONE|
                          taskscheduler.TASK_FLAG_RUN_ONLY_IF_LOGGED_ON)
            task.SetAccountInformation('', None)
            scheduler.AddWorkItem(name, task)
            __init__, task_trigger = task.CreateTrigger()
            trigger = task_trigger.GetTrigger()
            trigger.Flags = 0
            time_tupple = time.localtime(run_time)
            trigger.BeginYear = time_tupple[0]
            trigger.BeginMonth = time_tupple[1]
            trigger.BeginDay = time_tupple[2]
            trigger.StartHour = time_tupple[3]
            trigger.StartMinute = time_tupple[4]
            trigger.TriggerType = int(taskscheduler.TASK_TIME_TRIGGER_ONCE)
            task_trigger.SetTrigger(trigger)
            persist_file = task.QueryInterface(pythoncom.IID_IPersistFile)
            persist_file.Save(None, 1)
            task = scheduler.Activate(name)
        now = time.time()
        add_task('pytis_service_stop', 'sc stop PytisService', now + delay*60)
        add_task('pytis_service_start', 'sc start PytisService', now + (delay+1)*60)
        
    def exposed_register_user(self, user, port):
        assert isinstance(user, basestring), user
        assert isinstance(port, int), port
        _registered_users[user] = port

    def exposed_user_port(self, user):
        assert isinstance(user, basestring), user
        return _registered_users.get(user)

    def exposed_upgrade(self, source):
        assert source and isinstance(source, basestring), source
        if not self._true_authentication():
            raise Exception("Permission denied")
        file_name = __file__
        file_name = os.path.join(os.path.dirname(file_name), 'windows_server.py')
        self._upgrade(file_name, source)
        file_name = os.path.join(os.path.dirname(file_name), 'windows_user_server.py')
        self._upgrade(file_name, source)

    def _upgrade(self, file_name, source):
        new_file_name = file_name + '.new'
        f = open(new_file_name, 'wb')
        f.write(source)
        f.close()
        os.remove(file_name)
        os.rename(new_file_name, file_name)
    
class PytisThreadedServer(rpyc.utils.server.ThreadedServer):

    def __init__(self, *args, **kwargs):
        self._pytis_start_stop_thread()
        super(PytisThreadedServer, self).__init__(*args, **kwargs)
        
    def _get_logger(self):
        logger = super(PytisThreadedServer, self)._get_logger()
        logger.setLevel(logging_level)
        handler = WindowsLoggingHandler()
        logger.addHandler(handler)
        return logger

    def _pytis_start_stop_thread(self):
        t = threading.Thread(target=self._pytis_check_stop)
        t.daemon = True
        t.start()
        
    def _pytis_check_stop(self):
        global _stop
        while True:
            if _stop:
                self.logger.info('stop requested')
                time.sleep(1) # provide some time to finnish the connection
                self.close()
                return
            time.sleep(1)

def registration_thread():
    user = username()
    while True:
        time.sleep(30)
        try:
            connection = rpyc.connect('127.0.0.1', port)
            connection.root.register_user(user, _user_port)
        except:
            pass

class WindowsService(win32serviceutil.ServiceFramework):
    if is_admin():
        _svc_name_ = "PytisService"
        _svc_display_name_ = "Pytis Service"
    else:
        _svc_name_ = "PytisUserService"
        _svc_display_name_ = "Pytis User Service"

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_, ''))
        self.run()

    def _stop_check_loop(self):
        servicemanager.LogInfoMsg("stop check loop started")
        while True:
            code = win32event.WaitForSingleObject(self.hWaitStop, 1000)
            if code == win32event.WAIT_OBJECT_0:
                servicemanager.LogInfoMsg("Stop requested")
                global _stop
                _stop = True
                break

    def _run_admin(self):
        servicemanager.LogInfoMsg("Running manager service")
        start_manager(True)
        self._stop_check_loop()

    def _run_user(self):
        servicemanager.LogInfoMsg("Running user service")
        start_user(True)
        self._stop_check_loop()
            
    def run(self):
        if is_admin():
            self._run_admin()
        else:
            self._run_user()

def start_manager(in_background):
    t = PytisThreadedServer(PytisAdminService, hostname=host, port=port,
                            authenticator=Authenticator(), auto_register=False)
    if in_background:
        thread = threading.Thread(target=t.start)
        thread.start()
    else:
        t.start()

def start_user(in_background):
    global _user_port
    server = None
    while _user_port < 65536:
        try:
            server = PytisThreadedServer(PytisUserService, hostname=host, port=_user_port,
                                         authenticator=Authenticator(), auto_register=False)
            break
        except socket.error:
            _user_port += 1
    if server is None:
        servicemanager.LogInfoMsg("No free port found, exiting")
        return
    servicemanager.LogInfoMsg("Running on port %s" % (_user_port,))
    registration = threading.Thread(target=registration_thread)
    registration.daemon = True
    registration.start()
    if in_background:
        thread = threading.Thread(target=server.start)
        thread.start()
    else:
        server.start()

def run():
    if is_admin():
        start_manager(False)
    else:
        start_user(False)

if __name__ == '__main__':
    if is_admin():
        win32serviceutil.HandleCommandLine(WindowsService)
    else:
        run()

# Local Variables:
# time-stamp-pattern: "30/^_VERSION = '%Y-%02m-%02d %02H:%02M'"
# End:
