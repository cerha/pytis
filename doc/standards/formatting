#title Pravidla pro psaní a formátování kódu

* Obecné zásady

- Jako všude i zde platí principy srozumitelnosti, přehlednosti a
  konzistence.

- Všechny adresáře, soubory a identifikátory jsou v angličtině, s výjimkou
  těch, které obsahují účetní termíny -- ty jsou v češtině.

- Komentáře a dokumentační řetězce jsou v češtině.

- Místa, kde je potřeba něco dodělat nebo opravit, se označují komentářem
  obsahujícím řetězec =TODO:=, za kterým následuje popis toho, co je potřeba
  udělat.  Takto lze snadno rekurzivním grepem nalézt všechny nedodělky.

- Všechna nezřejmá místa ve zdrojovém kódu musí být řádně okomentována ihned
  v okamžiku svého vzniku.  Pokud se tak neděje, jsou možné jenom dvě
  varianty: a) nestane se tak již nikdy; b) dodatečně se vymýšlí, co to
  vlastně znamená a jakým vším způsobem to již bylo použito.  Navíc je
  nezřejmé věci stejně nutno vysvětlit, takže se tím nic neušetří, spíše
  naopak.  Řádné popisky jednak ušetří pozdější vysvětlování a *zejména* pak
  případná pozdější nedorozumění.

- Je nutné důsledně rozlišovat které třídy, metody a proměnné jsou
  exportované a které interní.  Exportované jsou pouze ty objekty, které
  takové být musí, bez jejich exportu nešlo něco udělat.  Zavedením každé
  exportované metody se k něčemu zavazujeme, není třeba to dělat zbytečně.


* Formátování pythonového kódu

Formátování pythonového kódu se řídí dokumentem [[http://www.python.org/doc/essays/styleguide.html][Python Style Guide]], není-li
níže specifikováno jinak.

K zásadám uvedeným v [[http://www.python.org/doc/essays/styleguide.html][Python Style Guide]] definujeme následující upřesnění a
doplňky:

- Mezi identifikátorem funkce a závorkou uvozující seznam jejích argumentů se
  nedělá mezera.

- Pro řetězce v kódu (ne dokumentační řetězce) se doporučuje přednostně
  používat apostrofy (není třeba mačkat shift).  Uvozovky je vhodné používat
  tehdy, pokud řetězec může obsahovat apostrofy (typicky řetězce obsahující
  SQL příkazy).


* Pojmenovávání metod a funkcí

- Metody, které pouze něco zjišťují, vrací informaci bez provádění vedlejších
  efektů, neobsahují ve svém názvu slovesa.  Viz například standardní metoda
  =keys= nebo naše metoda =row=.

- Důsledkem předchozího pravidla je, že metody vracející hodnoty atributů
  třídy *nezačínají* prefixem =get=.  Viz například naše metoda =columns=.

- Výjimkou jsou metody vracející pravdivostní hodnoty, ty obvykle začínají
  prefixem =is= nebo obsahují jiné sloveso v nerozkazovacím tvaru.  Viz
  například standardní funkce =isinstance=, metoda =has_key= nebo naše metoda
  =is_hidden=.

- Metody, které provádí nějakou činnost nebo vedlejší efekty obsahují ve svém
  názvu sloveso v rozkazovacím způsobu.  Viz například standardní funkce
  =reload= nebo naše metody =select= (provádí vedlejší efekt inicializace
  dotazu) a =insert=.

- Metody, které slouží jako callbacky uživatelského rozhraní, začínají
  prefixem =on_=.
  

* Velikost písmen v Pythonu

- Jména adresářů obsahují pouze malá písmena a měla by být krátká a pouze
  jednoslovná.
  Příklad: =dir=

- Soubory, které obsahují víceméně pouze definici jedné třídy, se jmenují
  stejně jako tato třída.[1]
  Příklad: =FooBar.py=

- Ostatní soubory by měly mít jednoslovný název obsahující pouze malá písmena.
  Příklad: =tools.py=
  
- Jména tříd se zapisují v "all caps" bez podtržítek.
  Příklad: =FooBar=

- Jména konstant se zapisují velkými písmeny s podtržítky.
  Příklad: =FOO_BAR=

- Jména metod, atributů tříd a proměnných se zapisují malými písmeny
  s podtržítky.  Pro lokální proměnné je vhodné používat krátké názvy, není-li
  to na úkor srozumitelnosti.
  Příklad: =foo_bar=

Příklad -- soubor =dir/FooBar.py=:

<example>
class FooBar:
    FINAL_ANSWER = 42
    magic_number = 1
    def method(self, x, y):
         z = x + y
         self.magic_number = self.magic_number + z
</example>

Komu tento zápis identifikátorů nevyhovuje a preferuje formátování dle
[[http://www.gnu.org/prep/standards_toc.html][GNU Coding Standards]], může použít =glasses-mode= v Emacsu.


* Moduly

V našem pojetí je _modulem_ množina všech zdrojových souborů v adresáři.
V souboru =__init__.py= jsou symboly jednotlivých souborů konstrukcí
=from soubor import *= zařazeny do jmenného prostoru modulu.

Pro importy _modulů_ pak platí:

- Soubor =__init__.py= v adresáři obsahujícím moduly je prázdný nebo obsahuje
  pouze odůvodněné importy.

- Konstrukci =from ... import *= lze použít v následujících případech:

  . Jde-li o import třídy ze stejnojmenného modulu.

  . Jde-li o import modulu =pytis.util=.

- Importy typu =from MODULE import SOMETHING= je dobré používat pouze
  v případě, že SOMETHING se vyskytuje v kódu často.  Jinak by mělo mít
  přednost užití =import MODULE= se zápisem =MODULE.SOMETHING=, protože pak
  je jasné, odkud =SOMETHING= pochází.

- Veškeré importu balíku a z balíku =wxPython= jsou povoleny pouze v modulu
  =pytis.form= a musí být prováděny prostřednictvím obalovacích modulů,
  například:
  
  <example>
  import grid
  import wx
  </example>

  Toto opatření je nutné, aby každý modul bylo možno naimportovat i na serveru,
  kde neběží X Window.


* Další pravidla týkající se Pythonu

- Jazykově závislé řetězce jsou v češtině a jsou obaleny voláním funkce
  =pytis.util._=.

- Využíváme příkazu =assert= a to jednak pro kontrolu typů argumentů funkcí a
  metod (kde to má význam) a jednak pro příležitostné kontroly dat.

- Tuples vs. lists: Pokud jsou přijímány jako argument, měla by obecně daná
  funkce akceptovat tuple i list.  Pokud jsou vraceny jako návratová hodnota,
  mělo by být přesně specifikováno, zda jde o tuple nebo list.  Pro hodnoty,
  jež by neměly být přímo modifikovány, by se mělo používat tuple, v opačném
  případě list.

- Pokud nějaká metoda vrací hodnotu určitého typu (např. integer) a zároveň
  za určitých okolností potřebuje signalizovat neexistenci požadované
  hodnoty, mělo by být jako návratová hodnota odpovídající neexistenci
  používáno =None= a ne nějaká speciální hodnota daného typu (např. -1).
  Jednak je to jasnější a jednak to neomezuje pozdější možné rozšíření
  rozsahu vracených hodnot.

- Používají-li se výčtové konstanty (obdoba enum z C), doporučuje se pro
  jejich hodnoty používat řetězce (ne tedy např. čísla jako v C, pokud pro to
  není nějaký zvláštní důvod), shodné s názvem příslušné konstanty.  To
  jednak odstraní nutnost ošetřovat kolize při přidávání nových konstant do
  výčtu a jednak to usnadňuje ladění.

- Pokud má nějaká funkce volitelné argumenty, musí být v jejím volání všechny
  takové využité argumenty identifikovány svým jménem, ne pouze pořadím.
  Výjimky jsou přípustné pouze v případech, kdy by uvádění jmen argumentů ve
  voláních bylo obzvláště obtěžující a přitom je nepravděpodobné, že
  v budoucnosti dojde ke změnám těchto argumentů.  V takových situacích musí
  být v příslušné funkci explicitně dokumentováno, že takový volitelný
  argument není nutno identifikovat jeho jménem.

- Pokud je na některém místě zapotřebí provést návrat o několik úrovní volání
  výše bez signalizace chyby, je k tomu určena funkce =pytis.util.throw=.
  V cílovém místě musí být odpovídající kód obalen funkcí =pytis.util.catch=.


* Dokumentační řetězce

I když řada věcí může být popsána v samostatných dokumentech, mělo by co
nejvíce podstatných informací být přímo ve zdrojových textech.  Za běžných
okolností se nikdy nedaří udržet plnou korespondenci separátní dokumentace a
zdrojového kódu a je důležité přesné informace udržovat přímo na místě, kde se
s nimi pracuje, jinak vznikne zmatek.

Obzvlášť důležité je přesně dokumentovat v dokumentačních řetězcích všechny
exportované třídy, metody a proměnné a také moduly (dokumentují se
v souborech =__init__.py=).

Doporučený překlad slova "raise" v souvislosti s výjimkami je "vyvolat".

Pro zpracování dokumentačních řetězců je možno používat nástroj =pydoc=,
který je standardní součástí distribuce Pythonu od verze 2.1.  Upravená verze
tohoto nástroje, lépe vyhovující našim potřebám, je k dispozici v adresáři
=tools=.

** Formátování dokumentačních řetězců

Formátování se obecně řídí pravidly pro
[[http://www.python.org/sigs/doc-sig/stext.html][Structured Text]], není-li
níže uvedeno jinak.  Upřesňující, modifikovaná a doplňující pravidla jsou:

- Položky seznamu argumentů funkcí je možné oddělovat prázdnými řádky, pokud
  jsou jednotlivé popisy víceřádkové.  V tom případě oddělení usnadní
  formátování (možnost využití Emacsových příkazů pro práci s odstavci).  Tam
  kde toto není důležité se doporučuje prázdné řádky vynechávat a zamezit tak
  zbytečnému roztahování už tak dlouhého dokumentačního řetězce.

- Návratová hodnota je popsána v samostatném odstavci uvozeném úderným
  výrazem =Vrací:=.  Popis návratové hodnoty za "Vrací" pokračuje na témže
  řádku.

- Seznam výjimek je uvozen odstavcem =Výjimky:= a formátuje se stejně jako
  seznam argumentů.

- Před otevírajícími trojitými uvozovkami dokumentačního řetězce a za jeho
  uzavírajícími trojitými uvozovkami se nedělají prázdné řádky.  Neplýtváme
  tak zbytečně místem.

- Pokračování řádků položky definičního seznamu se z prostorových a
  estetických důvodů doporučuje dělat s dvoumezerovým odsazením.  Například:

  <example>
    foo -- velice zajímavá položka, jejíž popis si zaslouží být
      dostatečně dlouhý
  </example>

- Vyskytují-li se uvnitř dokumentačního řetězce uvozovky, je vhodné před ně
  vkládat backslash.  Dokumentační řetězec v Emacsu nebo výstupu a2ps pak
  nebude zbytečně strakatý.

- Doporučuje se za tečkou za větou dělat dvě mezery.  To umožňuje v Emacsu
  používat příkazy pro práci s větami.
  
- Nedoporučuje se zatím používat hypertextové odkazy, jejich formát může
  záviset na použitém nástroji.

Příklad formátování dokumentačního řetězce:

<example>
def foo(x, y):
    """Sečti 'x' a 'y'.

    Bla bla bla...

    Argumenty:
    
      x -- ...
      y -- ...

    Vrací: integer, součet 'x' a 'y'.

    Výjimky:

      DBException -- ...
      Exception -- ...
    
    Bla bla bla...

    """
    ... (kód)
</example>

** Obsah dokumentačních řetězců

Důvodem existence dokumentačních řetězců je jejich informační hodnota, je
proto třeba při psaní dokumentačních řetězců na ni dbát.  Většinou není nutné
uvádět zřejmé věci (i když někdy to nutné je, aby text měl hlavu a patu,
neboť důležitá je i forma sdělení informace) a naopak je důležité uvádět
konkrétní přesné informace.

Uveďme příklad dokumentačního řetězce pro metodu =Row.keys()=.  Nejprve
příklad špatného dokumentačního řetězce:

<example>
  """Vrať seznam všech klíčů."""
</example>

Takový dokumentační řetězec neříká vůbec nic, protože popis platí na
libovolnou metodu =keys=.  Je napsán jenom proto, aby na daném místě nějaký
dokumentační řetězec byl -- pro formu, ne pro užitek.

Zkusme dokumentační řetězec vylepšit:

<example>
  """Vrať seznam názvů všech sloupců jako strings.

  Pořadí položek vráceného seznamu je nedefinováno.

  """
</example>

První věta říká, jakého typu jsou položky seznamu (důležitá informace) a co
to vlastně ty klíče jsou (důležitá informace).  Poslední je vhodné uvést
i v případě, že pojem "klíč" je definován v dokumentačním řetězci třídy,
neboť se tím čtenáři ušetří zbytečné dohledávání.  Pokud by se ale jednalo
o něco složitějšího, je lepší uvést (explicitní) referenci, protože jinak
hrozí rozjezd popisů -- pro čtenáře je lepší dohledávat než dostat zastaralou
a již neplatnou informaci.

Druhá věta je v třídě =Row= také důležitá, protože =Row= má slovníkový
i sekvenční charakter, takže někdo může nad pořadím spekulovat nebo se na ně
dokonce (chybně) spoléhat.  Navíc dictionaries obvykle vrací své klíče
setříděné abecedně, což =Row= nedělá, a to může opět mást (i když by nemělo).
Takže přestože čistě technicky je tato věta redundantní, ušetří čtenáři
zbytečné přemýšlení a udělá mu okamžitě jasno; stejně tak ušetří zbytečné
otázky implementátorovi, bude-li potřebovat implementaci změnit a bude se
bát, zda to nenaruší stávající kód.

Dále je nutno dbát na následující pravidla:

- V dokumentačních řetězcích se nepopisují privátní atributy třídy ani se tam
  neuvádí pro uživatele třídy nepodstatné implementační poznámky.  Obojí
  patří do komentářů v kódu.  Privátní objekty jako takové však své
  dokumentační řetězce mít mohou, při generování dokumentace je lze vynechat.

- Vrací-li nějaká funkce pravdivostní hodnotu, lze v dokumentačním řetězci
  uvádět, že vrací =TRUE= nebo =FALSE= pouze v případě, že jsou skutečně
  vraceny přesně tyto konstanty.  Pokud může být pravdivostní hodnota vrácena
  i v jiné podobě (například jako =0=, =1=, =None=, apod.), je nutno vracenou
  hodnotu popisovat jinak, doporučují se termíny *pravda* a *nepravda*.


* <nop>ChangeLog

<nop>ChangeLog soubory slouží k následujícím účelům:

- Obecné informace o změnách.

- Stopování, kde mohlo dojít ke změně způsobující zjištěné neočekávané
  chování.

- Informace pro commit hlášky.

Záznamy do <nop>ChangeLogs se píší s ohledem na tyto účely.  Řídí se přiměřeně
zásadami uvedenými v [[info:(standards)Change Logs]].  Píší se v češtině.

=ChangeLog= souborů zavádíme raději méně než více.


Footnotes:
[1] V tomto případě je vhodné, aby soubor =__init__.py= v adresáři modulu
    obsahoval import této třídy.  To zabrání zbytečné ukecanosti, stačí pak
    psát =...dir.FooBar= místo =...dir.FooBar.FooBar=.
