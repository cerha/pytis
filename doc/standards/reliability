#title Zajištování spolehlivosti napsaného kódu

* Motivace a účel

Tento dokument definuje postupy, jejichž cílem je zajistit, aby námi napsaný
kód neobsahoval extrémní množství chyb a abychom se příliš často nesetkávali
s nepříjemnými překvapeními.  Je třeba si uvědomit, že u tohoto softwarového
systému je nutná značná míra spolehlivosti, kterou sice nemůžeme v rámci daných
omezení plně zajistit, můžeme se jí však alespoň trochu přiblížit.

Nepříjemná překvapení nám může připravit například:

- Nedokumentovaný nebo nedostatečně dokumentovaný objekt, o němž jeho uživatelé
  něco chybně implicitně předpokládají.

- "Drobná" změna kódu, která změní chování objektu a následně způsobí havárii
  v úplně jiné části systému.

Tento dokument se týká pouze funkčnosti a spolehlivosti napsaného kódu.
Nezabývá se tvorbou specifikací, návrhem algoritmů a postupů (viz dokument
[[design]]) ani obecnými konvencemi psaní kódu a dokumentace (ty jsou definovány
v dokumentu [[formatting]]).  Taktéž se nezabývá testováním systému jako celku,
tyto postupy bude potřeba vymyslet, až to bude aktuální.

Postupy zde uvedené by měly být pokud možno nepříliš složité, ať už co se týče
jejich pochopení a osvojení nebo realizace.  Výjimku tvoří tvorba testů, která
je vždy pracná (nikoliv z hlediska použitých nástrojů, nýbrž z hlediska
vymyšlení testů, jejich množství a následné údržby).  I zde ovšem do značné
míry platí, že se jedná pouze o určité učesání toho, co by člověk *měl udělat
tak jako tak*, pouze uvedené do určité formy.  Z dlouhodobého hlediska se pak
formální práce navíc vyplatí, neboť umožňuje po každé změně kódu velmi snadno
dát orientační odpověď na otázku "funguje *vše* i po této změně?".


* Kontrola kódu

Každý nový kód, ať už zbrusu nový nebo modifikovaný stávající, musí projít
jakýmsi základním kontrolním procesem.  Tento proces je definován následujícím
kontrolním seznamem akcí, které se musí provést vždy před tím, než je možno kód
prohlásit za hotový a funkční:

1. Optická kontrola kódu.

   Je nutno celý kód projít a podívat se, není-li tam něco očividně škaredého
   nebo neladícího.  Člověk by měl mít pocit, že kód vypadá dobře a neskrývá se
   v něm nějaká záludnost.  To se týká jak výkonných částí, tak jmen
   identifikátorů a obsahu dokumentačních řetězců a komentářů.  Pokud tento
   pocit v některém místě nemá, je třeba kód opravit nebo (není-li okamžitá
   oprava možná) toto místo patřičně okomentovat a označit symbolem =TODO=.

2. Import modulu.

   Ověří se tak, že kód je alespoň syntakticky správně.

3. Kontrola dokumentačních řetězců -- existence a úplnost.

   Všechny veřejné metody, které nedědí dokumentační řetězec bez jakékoliv
   změny od svého předka, musí být vybaveny vlastním dokumentačním řetězcem.
   Tento řetězec musí plně specifikovat chování metody -- pokud by někdo pouze
   podle dokumentačních řetězců napsal nový kód bez nahlížení do kódu
   stávajícího, příslušný objekt musí stále plně fungovat.

4. Kontrola [[http://pychecker.sourceforge.net/][pycheckerem]].[1]

   To ušetří práci při následném ladění a také zajistí, že například nechybí
   dokumentační řetězce.

5. Doplnění a aktualizace testů.

   Pro všechny nové dokumentační řetězce je třeba vytvořit nové testy kompletně
   ověřující v dokumentačním řetězci popsanou funkcionalitu (je-li to možné a
   schůdné).  Pro všechny modifikované dokumentační řetězce je nutno
   zkontrolovat, zda jim odpovídající testy stále ještě platí a zda není třeba
   doplnit nové testy.

   Testy se nemusí (ale mohou) psát pro čistě naše pomocné nástroje, které
   nejsou součástí distribuce systému, jako například některé ladící nástroje.

6. Provedení testů.

   Spustí se všechny testy a zkontroluje se, že všechny uspěly.

7. Audit.

   Pokud se jedná o zcela nový kód nebo rozsáhlejší změny, měl by být
   zkontrolován jiným vývojářem, než který jej psal.  Tato kontrola by měla
   spočívat v přiměřené aplikaci bodů 1., 3. a 6.
   

* Psaní testů

Pro testování kódu používáme nástroj [[http://pyunit.sourceforge.net/][PyUnit]].  Tento nástroj je dostupný
v Debianu a pro úvod do jeho používání odkazujeme na jeho dokumentaci, která je
poměrně krátká a snadno pochopitelná.

** Pravidla pro psaní testů

PyUnit je celkově obecný prostředek, způsob jeho použití v našem systému
definují následující pravidla:

- Každý koncový adresář hierarchie modulů obsahuje v jednom souboru testy pro
  všechny moduly tohoto adresáře.  Tento soubor je ve stejném adresáři a
  jmenuje se =_test.py=.

- Každý nekoncový adresář (tj. adresář obsahující další modulové podadresáře)
  má též soubor =_test.py=, který kromě případných testů pro soubory v tomto
  adresáři obsahuje též volání testování pro všechny podadresáře.  To znamená,
  že prověřit celý adresářový strom lze vždy spuštěním testování v kořeni
  daného stromu.

- Každý soubor =_test.py= musí definovat funkci =get_tests()=, která vrací
  kompletní test suite daného souboru (kromě testů, které z nějakého důvodu
  nemají být prováděny).

- Soubor =_test.py= je spustitelný a při svém spuštění musí provést všechny své
  testy.

- Nalezne-li se v kódu chyba (neodhalená žádným testem), měl by se pro ni
  vytvořit nový test.  (Při psaní kódu a tvorbě testů se dost často zapomíná na
  různé okrajové podmínky.)

- Testy nemusí mít žádné dokumentační řetězce (nepředstavují API).

Modul =pytis.util.test= obsahuje drobné pomůcky usnadňující definování testů.
Měl by být využíván.

Šablona souboru =_test.py=:

<example>
#!/usr/bin/env python

import unittest

import pytis.util.test
import types_

tests = pytis.util.test.TestSuite()

...

class TheTest(unittest.TestCase):
    def check_something(self):
        assert ...
    def check_something_else(self):
        assert ...
tests.add(TheTest)

class AnotherTest(unittest.TestCase):
    def check_something(self):
        assert ...
tests.add(AnotherTest)

...

def get_tests():
    return tests

if __name__ == '__main__':
    unittest.main(defaultTest='get_tests')
</example>

Konkrétní příklady testů lze nalézt ve stávajících souborech =_test.py=.

Pokud pro nějakou funkcionalitu nelze rozumně test vytvořit (bylo by to příliš
pracné nebo nelze jednoduše naemulovat odpovídající situaci), je potřeba
vytvořit prázdný test a označit jej komentářem obsahujícím řetězec =EMPTY=.
Budeme tak mít zdokumentováno co není (o)testováno.

** Interaktivní testy a testování GUI

Bohužel se neobejdeme bez interaktivních testů, tj. testů vyžadujících během
svého běhu ruční obsluhu.  Interaktivní testy jsou velmi nepříjemné, protože
zdržují, přidávají práci, jejich výsledky jsou závislé na spolehlivosti
obsluhy a lidé je neradi spouštějí, takže odhalování chyb se zpožďuje.
Neinteraktivní testy GUI však vzhledem k chybějícímu know-how nejsme schopni
vytvářet.

Pro tvorbu interaktivních testů platí následující zásady:

- Interaktivním testům je nutno se co nejvíce vyhýbat a omezit je skutečně
  jenom na to, co opravdu nelze otestovat automaticky.  Pokud například
  testujeme, že funguje konstrukce uživatelského rozhraní na základě naší
  specifikace, není potřeba to dělat interaktivně, informace o struktuře
  zkonstruovaného uživatelského rozhraní (tlačítka, nápisy na nich, atd.) by
  mělo být možno zjistit prostředky wxWindows.  Co se stane po stisku
  tlačítka lze také zjistit programově, zavoláním odpovídající callbackové
  funkce.  Vizuálně je pak nutno kontrolovat spíše jenom celkový vzhled
  (jestli někde není něco rozsypaného, apod.) a případně, že callbacky jsou
  navěšeny na správné prvky.

- Obecná pravidla pro testy platí beze změny i pro interaktivní testy.
  To zejména znamená, že interaktivní testy využívají modul `unittest'
  (PyUnit) se vším, co s tím souvisí.

- Abychom umožnili spouštění testování jak včetně interaktivních testů tak
  i bez nich (dle konfigurační volby), metody interaktivních testů budou
  začínají prefixem =check_interactive_=.

- Třídy pro interaktivní testy dědí třídu
  =pytis.util.test.InteractiveTestCase=.  Pro interakci s obsluhou slouží
  metoda =ask_user= této třídy.

- Instrukce pro obsluhu musí být naprosto přesné a na otázku musí být
  schopen odpovědět každý, i když spouští test poprvé.

Primitivní příklad interaktivního testu:

<example>
  class PrintTest(pytis.util.test.InteractiveTestCase):
       def check_interactive_print(self):
           print '\nAhoj'
           self.ask_user('''Na prvním předchozím neprázdném řádku by
  mělo být vypsáno "Ahoj" (bez uvozovek) a nic jiného.  Nápis "Ahoj" je
  na samostatném řádku.  Nápis musí souhlasit včetně velikosti písmen.''',
                         'Vypsalo se "Ahoj" dle popisu')
</example>

Další příklady lze nalézt v souboru =src/lib/form/_test.py=.

** Korespondence testů a dokumentačních řetězců

*Tady by mělo být uvedeno, jak v dokumentačních řetězcích nebo poblíž nich
vyznačit, pro které všechny jejich části (ne)existují testy.  Tato informace by
měla být dostupná kvůli snadné aktualizaci testů po změně dokumentačních
řetězců a také jako upozornění na netestovaná místa.*

** Záludnosti PyUnit

Při použití PyUnit je možno narazit na následující problémy:

- Obsahuje-li testovací třída více testovacích metod, je při běhu testování pro
  každou z nich provedena kompletní inicializace třídy, včetně vytvoření její
  instance.  Jedinou rozumnou možností, jak předávat data mezi těmito metodami,
  tudíž je používat sdílené atributy třídy.


* Nakládání s chybami

Chyby v softwaru, s jehož pomocí naše aplikace poběží (Python, PostgreSQL,
wxWindows, ..., ne však třeba Emacs), se evidují v souboru [[bugs]].  Cílem této
evidence je mít neustálý přehled o existujících chybách a vyhnout se tak
opakovaným překvapením způsobovaným týmiž problémy nebo dokonce
znovuobjevením se těchto problémů až za běhu aplikace u zákazníka.

Pokud někdo narazí na nějakou chybu v těchto softwarech podstatnou pro běh
naší aplikace, nechť její popis do [[bugs]] zařadí.  Popis by měl obsahovat:

- V jakém softwaru a verzi se chyba objevila.

- Jaké důsledky má nebo může mít na naši aplikaci.

- Jakým způsobem se s chybou vypořádáme.

- Zda byla chyba oznámena vývojářům daného softwaru a jak na ni reagovali.

Tak budeme mít všechny problémy tohoto druhu evidované a můžeme je v patřičný
okamžik zrevidovat.


Footnotes: 
[1]  pychecker je bohužel nemodulární a tím pádem nevhodný pro přidávání
     vlastních testů.  O rozumnějším nástroji však nevím, takže se (prozatím?)
     musíme spokojit s tím, co je.
