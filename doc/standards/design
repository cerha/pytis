#title Obecné principy návrhu systému a tvorby kódu

* Obecné zásady

Při tvorbě čehokoliv bychom měli mít na paměti následující principy:

Srozumitelnost :: U všeho by mělo být jasné, jak to funguje a k čemu to
slouží.  Tím se nemyslí, že vše musí být triviální, nýbrž se tím míní to, že
vše musí být pokud možno samoobjasňující a pokud to není možné, tak to musí
být řádně popsáno a vysvětleno.

Přehlednost :: V tom, co vytvoříme, se musí snadno orientovat autor,
spoluautoři i diváci.

Konzistence :: Jednotlivé části systému si nesmí navzájem odporovat nebo
realizovat jednu a tutéž věc na různých místech různými prostředky.

Na "provizorní" řešení musí být nahlíženo s maximální opatrností.  Taková
řešení bývají velmi vitální a mohou se snadno přeměnit v nepříjemné
kostlivce.

** Zásada dokumentovanosti

Je užitečné, když je v dokumentačních řetězcích, příp. komentářích, pojednáno
o tom, proč jsou které věci definovány, tak jak jsou definovány, a jaký
způsob jejich použití se v aplikaci předpokládá (ne jak se to kóduje, nýbrž
kolik instancí té které třídy se bude vytvářet, čemu budou odpovídat, co od
dané třídy očekáváme, atd.).

Pomůže to:

- Autorovi utřídit si myšlenky.

- Čtenáři snáze pochopit záměr autora a ušetřit si práci se znovuvynalézáním
  již objeveného.

- Zjednodušit si následnou práci na dokumentačních řetězcích i kódu.

- Všem zpětně zjistit, proč jsou některé věci udělány, tak jak jsou.

Zejména je hodně důležité dbát na sdělení věcného záměru, protože to umožňuje
velmi rychle pochopit hned ze začátku základní principy.  Pokud je člověk
naopak nucen základní principy indukovat z jejich aplikací, dochází ke
zbytečnému zdržování a zejména vzniká zvýšené riziko vymyšlení jiných
základních principů a následných zmatků.


* Tvorba kódu

** Modularita

Kód by měl být rozčleněn do dostatečně malých celků s jasně definovanou
funkcionalitou a přesně definovaným API.  To nám umožní jednak se v každé
části zaměřit pouze na jediný konkrétní problém a jednak udržet celý systém
na uzdě.

** Datová a funkční abstrakce

Veškerá data, která se nelokálně předávají mezi různými částmi programu, by
měla mít jasně definovanou podobu a měla by být reprezentována instancemi
našich speciálních tříd k tomu určených.  To zajistí, že je všude jasné, co
je co a jak to vypadá.

Pro každý nástroj, který používáme (databázové rozhraní, uživatelské
rozhraní, logování, ...), bychom měli mít vlastní jednoduché a jasně
definované API.  To nás odstíní od problémů a komplexnosti použitého nástroje
a umožní nám snadno využívat to a jen to, co potřebujeme.
