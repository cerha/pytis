#title Tutoriál: Databázové rozhraní

* Cíle a základní principy

Cílem databázového rozhraní je poskytnout prostředky pro několik málo
základních operací, které budeme provádět nad databázovými daty.  Tento
dokument poskytuje základní ideové informace o rozhraní a jednoduchý návod, jak
s rozhraním začít pracovat.  Podrobný popis rozhraní naleznete v dokumentaci
modulu =pytis.data=.

V první řadě je nutno si uvědomit důvody[1], které pro zavedení tohoto rozhraní
máme:

- Co nejvíce omezit nutnost definice jednoho a téhož na více místech.  Pokud
  bychom pracovali s daty přímo prostřednictvím SQL příkazů, museli bychom
  popsat podobu příslušných tabulek několikrát (pro SELECT, INSERT, atd.).
  Rozhraní by mělo umožnit definovat napojení na databázi na jediném místě.

- Unifikace přístupu k datům.  Díky jednoduchému jednotnému rozhraní nebude
  k databázi přistupováno na různých místech programu různě, dle aktuální
  nálady konkrétního vývojáře.

- Odstínění aplikačního programu od přímé komunikace s databázovým strojem.  To
  umožní ošetřit případné budoucí i současné problémy komunikace bez nutnosti
  zasahovat do aplikačního kódu.

- V rámci možností daných předchozími body co nejvíce zjednodušit práci
  s daty.[2]

S ohledem na uvedené důvody potřebnosti rozhraní, je toto založeno na
následujících principech:

- Datová abstrakce všech objektů, se kterými pracujeme.  Všechny tyto objekty
  jsou reprezentovány třídami rozhraní, což jednak zavádí určitou typovou
  kontrolu a jednak umožňuje v případě potřeby na různá místa zavést všelijaké
  šolichy bez účasti aplikačního programátora.

- Cílem rozhraní není nahrazovat funkcionalitu databázového serveru.  Rozhraní
  se nesnaží řešit komplikovaná provázání tabulek, toto se ponechává na
  schopnostech serveru.[3]  Předpokládá se, že se bude do značné míry pracovat
  s *virtuálními tabulkami*, které budou víceméně odpovídat požadovaným datům a
  pomocí rules definují složitější vazby na databázovém serveru.[4]

- Cílem rozhraní není univerzálnost.  Nejde o to vytvořit rozhraní nezávislé na
  backendu, databázovém stroji, atd. ani o snahu vytvořit rozhraní použitelné
  ve více aplikacích.  Nemusíme proto do rozhraní zavádět zbytečné komplikace
  pro zajištění obecnosti a stačí se omezit jen na zcela konkrétní věci, které
  doopravdy potřebujeme.

- Předchozí bod ovšem nic nemění na nutnosti aplikace vrstevnatého a
  modulárního přístupu, čistě z důvodů přehlednosti a údržby.  Proto je
  rozhraní rozsekáno do malých částí, z nichž každá implementuje svoji jedinou
  konkrétní funkcionalitu a mnoho z těchto částí lze v případě potřeby vyměnit.
  

* Použití

Rozhraní je implementováno v modulu =pytis.data=.  Zde uvádíme základní příklady
použití modulu, pro podrobnější popis viz dokumentace modulu a doplňující
vysvětlivky níže.

Začneme jednoduchým příkladem.  Představme si, že v databázi máme dvě tabulky
vytvořené těmito SQL příkazy:

<verbatim>
CREATE TABLE cis (x int PRIMARY KEY, y text) WITH OIDS;
CREATE TABLE tab (a int PRIMARY KEY, b varchar(30), c int REFERENCES cis) WITH OIDS;

INSERT INTO cis VALUES (1, 'jedna');
INSERT INTO cis VALUES (4, 'ctyri');
INSERT INTO cis VALUES (9, 'devet');
INSERT INTO tab VALUES (1, 'text', 1);
</verbatim>

Někde v aplikaci budeme chtít pracovat s tabulkou =tab=.  To nám umožní
instance =tab_data= třídy =pytis.data.Data=, kterou vytvoříme následujícím
způsobem:

<example>
  import pytis.data as d

  connection = d.DBConnection(database='test', user='trpaslik')

  C = d.DBColumnBinding
  D = d.DBDataDefault
  F = d.DataFactory

  cis_key = C('id', 'cis', 'x')
  cis_columns = (cis_key,
		 C('popis', 'cis', 'y'))
  cis_factory = F(D, cis_columns, cis_key)
  cis_data = cis_factory.create(dbconnection_spec=connection)

  tab_key = C('klic', 'tab', 'a')
  tab_columns = (tab_key,
		 C('popis', 'tab', 'b'),
		 C('id', 'tab', 'c', enumerator=cis_factory))
  tab_factory = F(D, tab_columns, tab_key)
  tab_data = tab_factory.create(dbconnection_spec=connection)
</example>

S =tab_data= pak můžeme provádět základní datové operace:

<example>
  print 'řádky tabulky:'
  tab_data.select()
  while True:
      row = tab_data.fetchone()
      if not row:
	  break
      print row
  tab_data.close()

  old_key = tab_data.columns()[0].type().validate('1')[0]
  new_key = tab_data.columns()[0].type().validate('9')[0]
  new_row_data = []
  for c, v in zip(tab_data.columns(), ('9', u'pěkný řádek', '9')):
      new_row_data.append ((c.id(), c.type().validate(v)[0]))
  new_row = d.Row(new_row_data)
  
  if tab_data.insert(new_row):
      print 'nový řádek vložen'
  if tab_data.delete(new_key):
      print 'nový řádek vymazán'
  if tab_data.update(old_key, new_row):
      print 'starý řádek změněn na nový'
  if tab_data.row(new_key):
      print 'nový řádek nalezen'
</example>

Rozebereme si nyní jednotlivé části příkladu.

**Terminologická poznámka:** Hovoříme-li o _datové tabulce_, máme tím na mysli
instanci třídy =pytis.data.Data=.  Hovoříme-li o _databázové tabulce_, máme
tím na mysli tabulku v databázi.

** Import modulu

Pro kompletní práci s daty slouží modul =pytis.data=.  Ten automaticky importuje
své submoduly.

** Specifikace spojení do databáze

Parametry připojení do databáze definujeme pomocí instance třídy
=pytis.data.DBConnection=.  V konstruktoru stačí specifikovat pouze
neimplicitní hodnoty parametrů.

Objekt definující spojení je pouze specifikační a je považován za immutable.
Proto a protože obě tabulky, se kterými budeme pracovat, se nacházejí ve stejné
databázi, jej můžeme využít v jedné instanci pro obě tabulky.

** Definice sloupců

Definice sloupců je nejkomplikovanější část celé záležitosti.  Každý sloupec je
specifikován instancí třídy =pytis.data.DBColumnBinding=, která definuje
mapování sloupce _datové_ tabulky do _databázových_ tabulek.  V nejjednodušším
případě je sloupec definován třemi parametry: svým identifikátorem (libovolný
neprázdný řetězec, přes který se na něj budeme odkazovat) a tabulkou a sloupcem
v databázi, kterým odpovídá.  Databázové rozhraní na základě této specifikace
samo přiřadí sloupci datový typ, odpovídající danému sloupci dané tabulky
v databázi.  Předpokládá se, že tímto způsobem bude specifikována naprostá
většina sloupců.

Například specifikace

<verbatim>
  d.dbdata.DBColumnBinding('klic', 'tab', 'a')
</verbatim>

definuje sloupec _datové_ tabulky, jenž budeme nazývat =klic= a který odpovídá
sloupci =a= _databázové tabulky_ =tab=.

Seznam těchto "sloupcových" definic přesně definuje sloupce _datové_ tabulky,
co se týče jejich počtu, pořadí a napojení do databáze.

V příkladu vidíme ještě jedno speciální napojení sloupce, a sice na číselník.
Pomocí argumentu konstruktoru =related_to= specifikujeme, že odpovídající
databázový sloupec je v relaci s jiným sloupcem databáze.  Relaci můžeme zavést
pro libovolné dva sloupce dvou tabulek, její reálné využití se však předpokládá
pouze u vazeb na číselníky.  Pomocí argumentu =enumerator= říkáme, že typ
daného sloupce není zjišťován z databáze, nýbrž že jím má být instance třídy
=pytis.data.DataEnumerator= obsahující zadanou _datovou_ tabulku.

Klíčové sloupce umisťujeme do pomocných proměnných, protože je využijeme jak
v seznamu sloupců, tak ve specifikaci klíčů.

** Vytvoření datového objektu

Pokud již máme definovány klíče, vytvořen seznam specifikací sloupců a
definováno připojení do databáze, dostaneme kýžený datový objekt jednoduše
vytvořením instance třídy =pytis.data.DBDataDefault=.  Pro přístup do
databáze používáme vždy právě tuto třídu, která je potomkem abstraktní třídy
=pytis.data.DBData= a nestaráme se blíže o její původ.

V příkladu nevytváříme instance třídy =pytis.data.DBData= přímo.  Místo
toho napřed definujeme továrnu se stejnými iniciálními argumenty, z níž pak
vytváříme skutečné datové objekty metodou =create=.  Tento postup je zde nutný
proto, že argument =related_to= požaduje jako svoji hodnotu právě instanci
třídy =pytis.data.DataFactory=.

** Vytvoření klíčů a nového řádku

**TODO**

Pro tyto operace dosud není hotovo nějaké jednoduché rozhraní, takže je
zde demonstrován značně nemotorný low level postup.

** Operace nad daty

Třída =pytis.data.Data= definuje několik základních operací, vesměs
odpovídajících základním SQL operacím:

- Metody pro výběr dat: =row=, =select=, =fetchone=, =close=.

- Metody pro modifikaci dat: =insert=, =update=, =delete=.

Odkazujeme-li se na nějaký řádek dat (v metodách =row=, =update= a =delete=),
používáme klíč tabulky reprezentovaný instancí třídy =pytis.data.Value=.
S řádky dat se pracuje vždy prostřednictvím instancí třídy
=pytis.data.Row=.

Řetězcové hodnoty musí být typu Unicode.


Footnotes: 

[1] Podobné důvody existují pro zavedení rozhraní k uživatelskému rozhraní.

[2] Lze namítat, že zejména zavedení tříd =Value= a =Row= spíše práci
komplikuje.  Třída =Row= se ovšem snaží emulovat lists a dictionaries, čímž se
tyto komplikace do značné míry eliminují, přičemž datová abstrakce zůstává.
U =Value= k určitému zesložitění skutečně dochází, ale to není natolik závažné,
aby to byl dostatečný argument proti výhodám zavedení této třídy.

[3] Pokud ovšem server potřebnými schopnostmi disponuje.  PostgreSQL teoreticky
ano, po praktické stránce to ovšem může být horší, ne vše (správně) funguje.
Je zapotřebí obezřetnosti a nebude-li možno jinak, bude nutno obohatit
funkcionalitu databázového rozhraní, což by bylo nepříjemné zejména z hlediska
definice specifikací.

[4] Tentýž mechanismus by měl umožnit řešení problému přístupových práv.
