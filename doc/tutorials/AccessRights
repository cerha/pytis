#title Přístupová práva do databáze

* Cíle a popis mechanismu přístupových práv

Přístupová práva do databáze zajišťují, že k datovým objektům mohou
přistupovat a manipulovat s nimi pouze osoby k tomu oprávněné.  Cílem je
jednak zamezit neoprávněnému přístupu k datům, ať už pro čtení nebo zápis,
a jednak zajistit dostatečně podrobnou strukturu práv umožňující operátorům
provádět právě ty manipulace s daty, ke kterým jsou oprávněni.

Implementovaný mechanismus je navržen tak, aby především splňoval výše
uvedený cíl a v druhé řadě pak aby v sobě skrýval co nejméně rizik,
tj. zejména aby byl kryt systémovými prostředky.

** Mechanismus přístupových práv

Chce-li uživatel přistoupit do databáze, musí se do ní nejprve přihlásit.
Aplikace počítá s tím, že se tak děje prostřednictvím uživatelského jména a
hesla ověřovaného mechanismy databázového stroje (PostgreSQL).  Autentizace
uživatele je tedy prováděna automaticky spojením do databáze.  Všechny
databázové operace se pak provádí pod přihlášeným uživatelem.

V nejjednodušším případě by bylo možno přístupová práva kompletně spravovat
prostřednictvím PostgreSQL.  Protože však přístupová práva PostgreSQL nejsou
dostatečně strukturovaná[1], jsou práva spravována na aplikační úrovni.  To
nevylučuje využití přístupových práv PostgreSQL jako částečné doplňující nebo
spíše duplicitní ochrany dat před neoprávněným čtením a manipulací.

Po přihlášení se uživatele do databáze jsou zjištěny skupiny PostgreSQL, do
kterých uživatel patří.  Při posuzování oprávnění přístupu k jednotlivým
datovým objektům je brána v potaz pouze příslušnost ke skupinám, uživatelské
jméno jako takové již nadále nikde nevystupuje.

Přístup k datovým objektům je dán definicemi ve specifikačních souborech,
předávaných konstruktorům odpovídajících data factories.  Pro každý sloupec
datového objektu je možno definovat konkrétní práva pro konkrétní skupiny
uživatelů.  Pro zjednodušení lze definovat i práva obecná, pro všechny
sloupce datového objektu, všechny datové operace a všechny skupiny uživatelů.

Na základě těchto specifikací datové objekty ve svých veřejných metodách
zpřístupňujících nebo modifikujících data přístupová práva prověřují.  Při
přístupu k databázi přes server se toto prověřování děje na serveru.  Při
pokusu o neoprávněný přístup je vyvolána výjimka.  Jsou ověřována práva přímá
i nepřímá, například není dovoleno sloupec nepřístupný pro čtení zmiňovat
v podmínce metody =pytis.data.Data.select= za účelem výběru jinak přístupných
datových sloupců.


* Specifikace přístupových práv

Specifikace přístupu do databáze se skládá ze dvou částí:

- Specifikace uživatelů určující, kdo má přístup k databázi a do kterých
  skupin uživatelů je zařazen.  Tato specifikace se v průběhu provozování
  aplikace poměrně často mění, jsou zřizováni a rušeni uživatelé a jsou
  přiřazováni nebo vyřazováni z definovaných skupin uživatelů.

- Specifikace práv přístupu k jednotlivým datovým objektům určující, které
  skupiny uživatelů mohou s kterými objekty manipulovat a jakým způsobem.
  Tato specifikace se během provozování aplikace příliš nemění.

** Specifikace uživatelů

Specifikace uživatelů se provádí na úrovni PostgreSQL.  Uživatelé aplikace a
PostgreSQL si navzájem odpovídají.  Aplikace předpokládá autentizaci
uživatelem jeho heslem do PostgreSQL, jiné způsoby autentizace (kromě
autentizace pouhým uživatelským jménem bez hesla) nejsou podporovány.

Stejně tak skupiny uživatelů jsou spravovány standardními mechanismy
PostgreSQL.  Používají se skupiny PostgreSQL a z PostgreSQL se zjišťuje, do
kterých skupin je daný uživatel zařazen.

V současné době je nutno správu uživatelů v PostgreSQL provádět ručně, na
úrovni správce databáze.  S ohledem na poněkud svéráznou podobu definičních
tabulek uživatelů a skupin v PostgreSQL nelze v blízké době očekávat správu
uživatelů přímo z aplikace.

Má-li tedy být novému uživateli umožněn přístup do databáze, musí mu být
založen účet v PostgreSQL a musí tam být přidán do patřičných skupin,
například s pomocí SQL příkazů =CREATE USER= a =ALTER GROUP=.

** Specifikace práv přístupu k datovým objektům

Veškerá práva přístupu k datovým objektům jsou specifikována přes skupiny
uživatelů.  Konkrétní uživatelské jméno je v tomto směru nepodstatné a slouží
pouze k autentizaci uživatele a ke zjištění skupin, do kterých je zařazen.

Na rozdíl od specifikace uživatelů jsou práva přístupu k datovým objektům
zajišťována na aplikační úrovni.  Doporučuje se však, v maximální možné
míře[2], práva přístupu k tabulkám a jiným databázovým objektům duplicitně
regulovat i prostřednictvím standardních mechanismů přístupových práv
PostgreSQL.

Pro specifikaci přístupových práv slouží parametr =access_rights=
konstruktoru třídy =pytis.data.RestrictedData=, typicky předávaný
prostřednictvím stejnojmenného volitelného argumentu konstruktoru třídy
=pytis.data.DataFactory=.  Hodnotou tohoto argumentu je instance třídy
=pytis.data.AccessRights=.  Není-li argument uveden, je dovoleno všem všechno.
V opačném případě jsou práva redukována pouze na ta v argumentu explicitně
uvedená, co není dovoleno, je zakázáno.

Pro přístup k databázi rozlišujeme práva přístupu pro čtení, vkládání nových
záznamů, modifikaci existujících záznamů a mazání záznamů.  Modifikační
operace obvykle nelze provádět bez práva čtení.

Popis třídy =pytis.data.AccessRights= je k nalezení v její dokumentaci.  Zde
uvedeme pouze několik příkladů.

Implicitní přístupová práva dovolující všechno všem mají následující podobu:

<example>
AccessRights((None, (None, Permission.ALL)))
</example>

Taková specifikace říká, že pro všechny sloupce (první =None=) platí, že pro
všechny skupiny (druhé =None=) je povoleno všechno (=Permission.ALL=).  Pokud
bychom přístup k datovému objektu chtěli povolit pouze skupině =banka=,
použili bychom následující specifikaci:

<example>
AccessRights((None, (['banka'], Permission.ALL)))
</example>

Pokud bychom chtěli všem povolit čtení a skupině =banka= všechny operace,
zapsali bychom to takto:

<example>
AccessRights((None, (['banka'], Permission.ALL), (None, Permission.VIEW)))
</example>

Na pořadí položek ve specifikaci nezáleží.

Pokud bychom v nějakém datovém objektu chtěli skupině =banka= povolit vše a
skupinám =foogroup= a =bargroup= povolit kompletní přístup ke sloupci
=foocolumn= s výjimkou vkládání nových záznamů, udělali bychom to takto:

<example>
groups = ['foogroup', 'bargroup']
AccessRights((None, (['banka'], Permission.ALL)),
             (None, (groups, Permission.DELETE)),
             (['foocolumn'], (groups, Permission.VIEW, Permission.UPDATE)))
</example>

Všimněme si, že právo mazání je nutno definovat globálně pro všechny sloupce
(=None=).  To proto, že mazání jednotlivého sloupce není možné, lze mazat
pouze celé řádky.

** Doplňující poznámky

Podobně jako pro datové objekty může být umožněno definovat přístupová práva
i pro jiné entity, například uživatelské příkazy.  Tato práva jsou však pouze
informací pro uživatelské rozhraní, skutečné prověřování přístupu se provádí
pouze v datových objektech na základě specifikací přístupových práv pro daný
objekt.

Dojde-li ke změně zařazení uživatele do skupin, je nutno restartovat všechna
probíhající spojení aktuálního uživatele do databáze, aby se tato změna
projevila.  Pokud dojde k rozsáhlejším změnám v zařazení uživatelů do skupin,
je obvykle nejlepší a nejjednodušší po této změně restartovat databázový stroj.


Footnotes:

[1] Chybí možnost specifikovat přístupová práva pro jednotlivé sloupce
    tabulek.  To by sice možná bylo možno řešit prostřednictvím views a
    rules, ale takové řešení by bylo velmi komplikované.

[2] Aplikační přístupová práva poskytují širší možnosti než práva PostgreSQL,
    právy PostgreSQL je tedy lze částečně doplnit či duplikovat, nikoliv však
    alternativně plně nahradit.
