#title Pytis API

Aplikační programové rozhraní (API) pytisových aplikací slouží pro přístup k
interním funkcím a objektům Pytisu z aplikačního programového kódu.  Nejde tedy
o rozhraní mezi pytisovými objekty navzájem, ale o rozhraní mezi specifikacemi
aplikace a Pytisem.  Protože se přístup k tomuto API může vyskytovat v kódu
aplikací, je nutné toto API rozšiřovat a měnit velice konzervativně a i proto
je toto API zatím poměrně minimalistické a pokrývá pouze skutečné potřeby.

* Přístupové body

K API je aktuálně možné přistupovat skrze dva hlavní přístupové body:

1. 'pytis.api.app' je globální instance 'pytis.api.Application' poskytující
   přístup běžící pytisové aplikaci.  Tato instance je k dispozici již v době
   importu modulu, takže ji lze importovat např. způsobem 'from pytis.api
   import app' (pro jednotnost doporučováno vždy takto).

   Ve skriptech (které běží bez spuštěné aplikace) lze instanci 'pytis.api.app'
   používat s tím, že zde je použití omezeno na přístup ke sdíleným parametrům
   pomocí atributu 'app.param'.

2. Ve všech specifikačních funkcích pracujících s aktuálním řádkem formuláře
   (specifikace 'computer', 'editable', 'row_style' atd, atd), lze použít
   atribut 'row.form'.  Ten reprezentuje aktuální formulář (instance
   'pytis.api.Form'), ze kterého pochází řádek 'row'.

3. Obdobně jako argument 'row' i argument 'rows' (iterátor vybraných řádků v
   handlerech akcí s contextem SELECTION) nabízí atribut 'rows.form'.


* Přehled tříd

Následuje zjednodušený přehled tříd Pytis API a jejich metod a atributů.  Pro
detailněnší informace je nutné konzultovat přímo dokumentační řetězce
příslušných tříd.

** pytis.api.Application

API reprezentace běžící aplikace

- param :: přístup ke sdíleným parametrům formou 'app.param.<name>.<param>',
           kde <name> odpovídá názvu v definici 'SharedParams' ve specifikaci
           aplikace a <param> odpovídá názvu sloupečku v příslušné DB tabulce.
- form :: aktuální formulář (instance 'pytis.api.Form').
- echo(message, kind='info') :: zobraz neinteraktivní zprávu ve stavovém řádku
     (kind může být 'info', 'warning', 'error').
- message(message) :: zobraz zprávu v dialogu (vyžaduje potvrzení uživatelem).
- warning(message) :: zobraz varování v dialogu.
- error(message) :: zobraz chybovou zprávu v dialogu.
- question(message, default=True) :: zobraz otázku v dialogu a vrať True pokud uživatel
     odpoví kladně.  Argument default nastavuje výchozí vybranou odpověď.

** pytis.api.Form

API reprezentace obecného formuláře

- name :: název specifikace (řetězec)
- field :: přístup k políčkům formuláře jako 'form.field.field_id' (instance
      'pytis.api.Field')
- condition :: aktuální filtrační podmínka (instance 'pytis.data.Operator')
- arguments :: aktuální argumenty selectu (slovník instancí 'pytis.data.Value')
- sorting :: aktuální řazení (ve formátu jako pro 'pytis.data.Data.select()')
- query_fields :: lišta políček dotazu (instance 'pytis.api.QueryFields')
- clear_selection() :: zruš výběr řádků, pokud nějaký existuje.

** pytis.api.Field

API reprezentace vstupního políčka

- refresh() :: obnov zobrazení políčka (přenačti číselníky)
- write(text) :: zapiš daný text na aktuální pozici kurzoru.
- on_list_change(callback) :: registruj callback při změně seznamu v políčku
     typu LIST.

** pytis.api.QueryFields

API reprezentace lišty políček dotazu
- row :: aktuální hodnoty políček dotazu (instance
         'pytis.presentation.PresentedRow')


* Příklady použití

** Přístup ke sdíleným parametrům

Sdílené parametry slouží pro sdílení hodnot mezi aplikačním kódem a databází.

V application.py nejprve definujeme které specifikace obsahují sdílené
parametry:

#+begin_src python
class Application(pytis.presentation.Application):

    def params(self):
        return (
            pytis.presentation.SharedParams('main', 'Nastaveni.BvCfg'),
        )
#+end_src

Ve spefifikacích náhledů potom přistupujeme k hodnotám sloupců z příslušné DB
tabulky:

#+begin_src python
from pytis.api import app

...

    # Parametry v 'default' vždy přes lambda, aby se parametr načetl až
    # ve chvíli vytvoření nového záznamu, ne při načtení specifikace.
    Field('zeme', _("Stát"), default=lambda: app.param.main.zeme,
          codebook='Cb.CZeme', ...)

...

    # Vrácena je vnitřní hodnota, takže instanci Value je v případě
    # potřeby nutno vytvořit.
    condition = pd.EQ('jurisdikce', pd.sval(app.param.main.jurisdikce))

#+end_src


** Přístup k hodnotám lišty dotazu

Zohlednění hodnot v liště pro obarvení řádků tabulky:
 
#+begin_src python
    def row_style(self, row):
        if row['cena'].value() > row.form.query_fields.row['limit'].value():
            return pp.Style(background='#fdd')
        else:
            return None
#+end_src

Určení podmínky vedlejšího formuláře podle políček lišty hlavního formuláře:

#+begin_src python
    Binding('pohyby', _("Pohyby"), "UctoDenik.UcetniDenikSaldo",
            condition=lambda row: pd.EQ('obdobi', row.form.query_fields.row['obdobi']))
#+end_src


** Přenačtení výběru výčtového políčka ve formuláři

Políčka umožňující výběr položek, jako např. SelectionType.CHOICE nebo
SelectionType.LIST mohou po nějaké změně dat (typicky např. po akci na tlačítko
ve formuláři) obsahovat neaktuální hodnoty výběru.  V takových situacích se
může hodit je explicitně obnovit voláním metody 'refresh()'.

#+begin_src python
    def _akce_tlačítka(self, row):
        ...
        row.form.field.kontakty.refresh()
#+end_src
