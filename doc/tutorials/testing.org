#title Testování

Pro testování nyní používáme pytest a všechny nové testy píšeme v pytest stylu,
tj. přímo jednoduché asserty.  Mnoho stávajících testů je napsáno ještě ve
stylu unittest, tj. self.assertEqual & spol.  Je dobré testy příležitostně
přepsat na přehlednějšíí pytest zápis, ale daleko užitečnější je napsat nové
testy zvyšující pokrytí.


* Zprovoznění testovacího prostředí

pip install pytest
pip install pytest-benchmark

PYTHONPATH=lib ./tools/gsql.py pytis.dbdefs.db_pytis_crypto > /tmp/pytis-crypto.sql

sudo -u postgres createdb test
sudo -u postgres psql test -f /tmp/pytis-crypto.sql
sudo -u postgres psql test -c 'create extension tsearch;'
sudo -u postgres psql test -c 'create extension pgcrypto;'

Může být potřeba také:
sudo -u postgres psql test -c "alter database test set default_text_search_config to 'simple'"
sudo -u postgres psql test -c "grant create on database test to $USER;"

make test


** Pytis Demo unit test

Některé testy jsou také součástí aplikace Pytis Demo.  Vyžadují funkční
konfigurační soubor pytis-demo-config-local.py nebo pytis-demo-config.py
(použije se první nalezený).  Potom lze spustit v příslušném virtuálním
prostředí zhruba takto:

PYTHONPATH=../lcg/lib:lib:../wiking/lib venv ~/.venv/pytis-demo-wx4-py3 pytest lib/pytis/demo/


* Pokrytí

Pokrytí kódu testy lze sledovat pomocí coverage.  Vegenerování (aktualizaci) coverage
statistik lze jednoduše spustit pomocí:

make coverage

nebo ručně dle příkladu z Makefile


V Emacsu je pro lepší přehled o pokrytí kódu testy možné použít
pycoverage-mode:

Stáhnout https://github.com/mattharrison/pycoverage.el

V adresáři cov2emacs spustit:

pip install .

Elisp potom stačí nainstalovat přes MELPA:

package-install pycoverage
pycoverage-mode


* Github Action Workflow

Soubor .github/workflows/test.yml definuje prostředí pro automatické spouštění
testů v Pythonu 2.7 a 3.11 na githubu.  Tyto testy však lze v docker
kontejnerech spouštět také lokálně pomocí act.  Výhoda je, že definice
kompletně popisuje systém a jeho nastavení a prostředí pro spouštění testů je
tak kompletně reprodukovatelné.

Instalace na Linuxu:

sudo apt update
sudo apt install docker.io
sudo systemctl enable docker
sudo systemctl start docker
curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash

Instalace na macOS:

Nainstalovat Docker Desktop z https://www.docker.com/products/docker-desktop a spustit.
brew install act

Potom mohu v adresáři pytis, kde je .github/workflows/test.yml, spustit zde
definované kontejnery pomocí:

act --container-architecture linux/amd64

Případně je možno přidat argument --reuse, aby se využil a restartoval
stávající kontejner, čímž se vynechají některé kroky jeho inicializace (asi
hlavně instalace balíků).

Do běžícího kontejneru se potom lze přihlásit.  Nejprve si vypíšu seznam
běžících kontejnerů pomocí 'docker ps' a potom zavolám

docker exec -it CONTANER_ID bash

V jeho promptu potom mohu instalovat balíky nebo zkoumat a nastavovat systém,
nebo také spouštět testy.  Takto spuštěný shell však nemá nastavené prostředí
podle definice env v test.yaml, takže je nutné si ho nastavit ručně:

export PGHOST=postgres
export PGUSER=pytis
export PGPASSWORD=pytis
export PYTIS_TEST_SKIP_PLPYTHON=1
export PYTHONPATH=lib:lcg/lib:wiking/lib
make test

nebo spouštět testy jednotlivě:

pytest lib/pytis/presentation/spec.py
