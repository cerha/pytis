#title Přerušení zpracování událostí

* Cíle a základní principy

Některé akce vyvolané uživatelem mohou trvat poměrně dlouho.  Například čtení
dat z databáze nebo formátování výstupu může způsobit nepříjemné čekání.
Můžeme rozlišit dva druhy dlouhotrvajících akcí:

1. Akce, které zásadně trvají dlouho a u kterých se nepředpokládá, že po dobu
   jejich provádění budou zablokovány všechny akce uživatele.

2. Akce, které neblokují aplikaci dlouhodobě, avšak mohou potenciálně trvat
   natolik dlouho, že je uživatel bude chtít ještě před jejich ukončením
   přerušit.

Jak lze s dlouhotrvajícími akcemi ve wxPythonu nakládat docela pěkně shrnuje
dokument [[http://wiki.wxpython.org/index.cgi/LongRunningTasks][Long Running Tasks]].  Jak z onoho dokumentu vyplývá, obecně
uspokojivé, tj. svým charakterem preemptivní, řešení problému
dlouhotrvajících úloh ve wxPythonu patrně neexistuje.  Vždy je nutná aktivní
podpora v kódu, kde ke zdržení dochází nebo může dojít.  Je tedy nutno najít
nějaký mechanismus, který nakládání s dlouhotrvajícími akcemi alespoň co
nejvíce usnadňuje.

** Předlouhé akce, neblokující

Akce prvního druhu musí být zásadně spouštěny jako samostatné vlákno nebo
proces a umožnit pokračování uživatelské interakce během svého provádění.
K tomu není celkem co dodat, snad jen stojí za připomenutí, že:

- I asynchronní akci musí být možno nějakým způsobem přerušit, aby
  nedocházelo ke zbytečnému hromadění procesů a plýtvání strojového času,
  dále zpomalující už tak pomalé uživatelské rozhraní.

- Je zapotřebí zajistit, aby akce byla buď korektně reentrantní, nebo aby
  její paralelní spuštění během jejího provádění bylo znemožněno.

** Kratší akce, blokující

U akcí druhého druhu je situace složitější, neboť jimi vyvolávané akce
povětšinou nejsou navrženy pro spouštění v samostatném vlákně nebo procesu,
často ani vytváření samostatného vlákna do celkového zpracování nezapadá a
především je žádoucí, aby akce byly skutečně blokující.  Je jenom žádána
možnost jejich přerušení.  Tento požadavek je netriviální, protože wxWindows
neumožňuje snadné přijetí nové události během zpracování jiné události, je
nutná aktivní podpora v prováděném kódu.


* Řešení

Ze tří řešení nabízených ve zmíněném dokumentu [[http://wiki.wxpython.org/index.cgi/LongRunningTasks][Long Running Tasks]] připadá
v úvahu pouze využití funkce =wxYield=.  Zpracování ve vlákně není
v interakci s uživatelským rozhraním příliš žádoucí a rozdělení zpracování do
idle událostí je pro daný účel zcela nevhodné.

U =wxYield= je nutno uvážit, že toto volání nesmí být prováděno ani příliš
často (je, zahrneme-li i příslušné zpracování, dost drahé) ani příliš zřídka
(špatná odezva na přerušující akci uživatele).  Také nesmí být vázáno na
explicitní podporu kódu, například kód databázového rozhraní, ve kterém se
může zpracování události chvíli zdržet, nemůže volat =wxYield= sám o sobě.
Pokud by explicitní podpora kódu byla vyžadována, musely by opět být kdejaké
jinak triviální akce spouštěny ve vláknech (stejně nepřerušitelných!).

Proto použijeme následující, z hlediska výkonného kódu dobře transparentní,
řešení:

- =wxYield= bude opakovaně voláno v samostatném vlákně, běžícím po celou dobu
  práce uživatelského rozhraní aplikace.  Dojde-li k vyvolání události během
  zpracování jiné události, vlákno se podívá, zda se jedná o přerušovací
  příkaz.  Je-li tomu tak, nastaví indikátor přerušení, v opačném případě
  událost zahodí [1].

- Veškeré callbacky budou obaleny kódem, který ošetří nastavení příznaku
  zpracovávané události a další věci.  Obalení bude zajištěno nahrazením wx
  funkcí pro přiřazení callbacků naším univerzálním obalovačem.

- Do funkce =log= bude vložen callback pro kontrolu indikátoru přerušení.
  Tento callback v případě nastaveného flagu přerušení vyvolá speciální, pro
  tento účel zavedenou výjimku =UserBreakException=.

- Přerušovací výjimka bude odchytávána na nejvyšší úrovni aplikace,
  tj. nebude-li ošetřena jinde, akce se jednoduše přeruší bez dalších efektů
  (čištění, apod.).


* Použití

Na kód uživatelského rozhraní jsou kladeny následující požadavky:

- Místo funkcí =wx.EVT_*= pro přiřazení callbacků uživatelským akcím (stisk
  klávesy, klik myši, ne však nutně již změna velikosti, apod.) musí být
  callbacky přiřazovány zásadně prostřednictvím funkce
  =pytis.form.wx_callback=.

- Veškerý kód musí dostatečně často logovat.  Pojem "dostatečně často" je
  míněn z hlediska časového.  Pokud toto *jednoduše* zajistit nelze, jako
  například u systémových potenciálně blokujících volání, nedá se nic dělat.

- Pokud je potřeba v případě přerušení provést nějaké čistící akce, je nutno
  odchytávat výjimku =UserBreakException= a odpovídajícím způsobem na ni
  reagovat.


[1] To může mít velmi pozitivní efekt na zpomalení autorepeatu :-).
