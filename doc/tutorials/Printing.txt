#title Tutoriál: Tvorba výstupních sestav

* Cíle

Obecný cíl je jednoduchý: Mít možnost z EBAS tisknout.  Typickými tisky,
které by mělo EBAS zvládnout, jsou:

- Tisk účetního deníku.

- Tisk faktury.

Na tisk nejsou kladeny velké prezentační nároky, výsledná podoba však musí
být rozumně použitelná (viz faktura).  Každý tisk musí být možno zobrazit
v náhledu na obrazovce, aby bylo možno zkontrolovat tištěné údaje.  Formát
výstupu pro tiskárnu může být jakýkoliv použitelný, například čistý text,
PostScript nebo PDF.

Tisky by mělo být možno definovat podobným způsobem jako například
obrazovkové formuláře.  Definice tisků by z hlediska potřeby lidské práce
měla být co nejjednodušší a nejběžnější typy tisků by měly být sestavovány
automaticky.


* Popis mechanismu

Tiskový mechanismus sestává z následujících částí:

- Specifikační soubor výstupní sestavy.

- Definice formátovacích značek.

- Procesor formátovacích značek a dat, formátování pro náhled a tisk.

- Vyvolání tiskového formuláře.

- Odeslání zformátované sestavy na tiskárnu.

Nyní si je představíme malinko podrobněji, jak z hlediska praktického
použití, tak i z hlediska vnitřního fungování celého systému.  Rozdělíme výše
uvedené části na dvě skupiny: vyvolání tisku a specifikace výstupní sestavy.

** Vyvolání tisku

Tisk je koncipován tak, že každému formuláři přísluší nejvýše jedna tisková
sestava.  Základním aplikovaným principem je, že tisknout lze zhruba to, co
uživatel vidí na obrazovce v aktuálním formuláři, ať už jednoduchém nebo
složeném (například duálním).

Pro uživatele je definován příkaz =Form.COMMAND_PRINT=, dostupný ze všech
formulářů.  Každý formulář může a nemusí na tento příkaz reagovat.
Reaguje-li, zobrazí se tiskový náhled.  Z něj pak lze stejným příkazem
spustit tisk na tiskárnu.

Pro zobrazení tiskového náhledu slouží formulář =pytis.form.PrintForm=, který
je podobně jako ostatní formuláře potomkem =pytis.form.Form= a ukládá se na
frame stack.  Tento formulář umí vyvolat formátování výstupu dle zadané
specifikace, formátování samotné pak má na starosti modul =pytis.output=,
konkrétně třída =pytis.output.Formatter=.

V současné době na příkaz tisku reagují řádkové formuláře typu =BrowseForm=.
Po vyvolání tiskového příkazu spustí formátování výstupu dle specifikace,
kterou hledají prostřednictvím resolverů v souboru =defs/output/FORMNAME.py=,
kde =FORMNAME= je jméno onoho řádkového formuláře.  Pokud tento specifikační
soubor neexistuje, je prostřednictvím druhého resolveru, podstrčeného do
=PrintForm=, proveden tisk formuláře jako obyčejné tabulky.

Tiskový náhled je generován stejně jako finální tisk jako PostScript.  Je tedy
totožný s výsledným tiskem, až na případné rozdíly způsobené použitými
interprety PostScriptu.

Odeslání dat na tiskárnu je jednoduché, využívá se příkazu =lpr=.  Pomocí
přenastavení konfigurační volby =printing_command= lze tento příkaz změnit,
například na obyčejný =cat= do souboru pro účely ladění.

** Specifikační soubory

Podobně jako ostatní prvky v EBAS (například formuláře), jsou i výstupní
sestavy specifikovány pythonovými soubory.  Tyto soubory umožňují definovat
základní části tištěného dokumentu (hlavičky, patičky, tělo) prostřednictvím
specifikačních funkcí.  Nejdůležitějšími z těchto funkcí jsou =body= (tělo
dokumentu), =page_header= a =page_footer= (hlavička a patička stránky) a
=coding= (kódování fontu použitého ve výstupu).  Není nutné je uvádět
všechny, jediná povinná z nich je =body=.

Všechny tyto funkce mají jediný argument, kterým je resolver.  S pomocí něj lze
získávat obecné specifikace (například datové a prezentační specifikace tabulky
pro určení jejího formátování) a předané parametry (například předaný klíč
aktuálního řádku od formuláře).  Resolveru předané parametry nejsou
specifikovány obecně, jsou závislé na objektu, který je předává.  Resolver je
instancí třídy =pytis.output.OutputResolver= a parametry lze získat jeho metodou
=p=.

Každá z funkcí odpovídajících nějaké části dokumentu vrací specifikaci této
části v podobě značek definovaných v modulu =pytis.output=.  K dispozici jsou
jednak jednoduché formátovací značky (jako =Paragraph= nebo =Bold=) a jednak
funkce vyšší úrovně vracející značkování pro určitý prvek (jako například
funkce pro zpřístupnění dat: =data_table= nebo =data_item=).  Formátovací
značky jsou třídy, jejichž dohromady poskládané instance vytváří příslušnou
specifikaci.  Kromě těchto tříd existují ještě dvě speciální značky: obyčejný
string (představuje přímo daný, již zformátovaný, text) a sekvence (spojení
několika značek, prvků této sekvence, dohromady).

Specifikace výstupu tedy může využívat tří vrstev prostředků:

- Přímo formátovací značky.

- Knihovní formátovací funkce, umožňující jednoduše zapsat typické shluky
  formátovacích značek.

- Libovolný vlastní programový kód generující formátovací značky, případně
  i s využitím knihovních formátovacích funkcí, pro komplikovanější
  specifikace.


* Použití

Předvedeme si vytvoření definice výstupní sestavy pro velmi zjednodušenou
fakturu.

V první řadě je nutné tisk faktury spojit s některým formulářem.  Vhodným
formulářem je spodní část duálního formuláře knihy vydaných (případně
přijatých) faktur, zobrazující položky faktury.  V tomto formuláři patrně
nemá smysl tisknout něco jiného než odpovídající fakturu.  V adresáři
=defs/output/=, obsahujícím definiční soubory všech tiskových sestav, tedy
vytvoříme pythonový soubor s názvem odpovídajícím zvolenému formuláři
(například =VydFakturyPolozky.py=).

Prakticky ve všech výstupních sestavách je vhodné naimportovat modul
=pytis.output=, definující leccos týkající se výstupních sestav, nejlépe
hvězdičkově, obsahující všechny formátovací značky a obecné formátovací funkce.
Úvod naší specifikace tedy bude vypadat takto:

<example>
from pytis.output import *
</example>

Bude-li jazykem faktury čeština, je nutno tiskovému procesoru říct, že má
používat fonty v kódování Latin 2 (ISO 8859-2).  Toho dosáhneme definicí
standardní specifikační funkce =coding=:

<example>
def coding(resolver):
    return pytis.output.Coding.LATIN2
</example>

Všechny specifikační funkce mají jeden argument, kterým je resolver jmenných
odkazů.  Ten v tiskových sestavách obvykle své využití nenalezne, je to ale
konzistentní s ostatními druhy specifikací, například formulářovými.

Specifikace výstupních sestav obsahuje definice hlaviček a patiček stránek a
celého dokumentu.  Jim odpovídající funkce nemusíme definovat, pokud nám
vyhovuje implicitní nastavení, tj. dokument nemá žádné záhlaví ani zvláštní
ukončení, stránky nemají žádnou hlavičku a ve svých patičkách mají číslo
stránky.  Ve fakturách se obvykle stránky nečíslují, takže předefinujeme
funkci patičky stránky =page_footer=:

<example>
def page_footer(resolver):
    return Null()
</example>

Všimněte si, že se zde používá značka prázdného obsahu =Null=, nikoliv
prázdný řetězec.  Je tak deklarováno, že příslušný objekt je skutečně
prázdný, nikoliv neprázdný obsahující text nulové délky.  Většinou na tom
nezáleží a =Null= i prázdný řetězec mají shodný efekt, je však lépe držet se
logického významu pro předcházení případným budoucím formátovacím problémům.

Konečně definujeme to nejdůležitější -- samotný obsah tištěného dokumentu,
daný funkcí =body=.  Jde jen o ilustrativní příklad, takže dokument bude pro
jednoduchost obsahovat pouze číslo faktury (tučně), adresu dodavatele a
seznam položek faktury v podobě jednoduché tabulky:

<example>
def body(resolver):
    invoice_number = data_item(resolver, 'VydFaktury', 'number')
    seller = data_item(resolver, 'VydFaktury', 'adresa')
    return (Paragraph(Bold('Faktura č. ', invoice_number)),
            Paragraph('Dodavatel:\n', seller),
            data_table(resolver, 'VydFakturyPolozky'))
</example>

Zde již používáme jednoduché programové konstrukce (přiřazení do pomocných
proměnných).  Jako ve všech specifikacích v EBAS, můžeme i zde využívat
kompletních možností Pythonu, což nám umožňuje řadu věcí zjednodušit nebo
zpřehlednit.  To je poměrně velká vymoženost oproti použití některých jiných
nástrojů, jako třeba XML.

Ve funkci =body= se odkazujeme na data ze dvou různých tabulek.  V tom nám
obecně nic nebrání, neboť tabulky lze vždy nalézt dle jejich zadaného jména.
Trochu složitější je to však s údaji o čísle faktury a dodavateli, kde není
řečeno který řádek z tabulky =VydFaktury= má být použit, neboť ve specifikaci
neznáme klíč odpovídajícího řádku.  Správné záznamy dostaneme díky tomu, že
tisk je vyvoláván z duálního formuláře, který poskytne informace o aktuálním
řádku hlavního podformuláře v parametrech resolveru, takže funkce =data_item= a
=data_table= dostanou prostřednictvím resolveru potřebné podklady.  Protože obě
tabulky =VydFakturyPolozky= i =VydFaktury= jsou duálnímu formuláři známy a ten
tudíž může do tisku předat informace o jejich aktuálním zobrazení, bude to
fungovat.

Na závěr si coby shrnutí uvedeme kompletní vytvořenou specifikaci tisku naší
prafaktury:

<example>
from pytis.output import *

def coding(resolver):
    return pytis.output.Coding.LATIN2

def page_footer(resolver):
    return Null()

def body(resolver):
    invoice_number = data_item(resolver, 'VydFaktury', 'number')
    seller = data_item(resolver, 'VydFaktury', 'adresa')
    return (Paragraph(Bold('Faktura č. ', invoice_number)),
            Paragraph('Dodavatel:\n', seller),
            data_table(resolver, 'VydFakturyPolozky'))
</example>


* Tipy pro práci s tiskovými sestavami ReportLabu

** Umístění dlouhých tabulek

Neumisťujte dlouhé tabulky (LongTable) do horizontálních skupin.  Horizontální
skupiny totiž nelze zalamovat na hranicích stránek a přítomnost příliš dlouhé
tabulky v nich pak vede k chybovým stavům.  Případné nezbytné horizontální
prvky tedy umístěte přímo do tabulky.
