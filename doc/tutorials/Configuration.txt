#title Tutoriál: Konfigurační mechanismus

* Cíle

Smyslem konfiguračního mechanismu je umožnit tvorbu a správu konfigurace,
s ohledem na následující požadavky:

- Dostatečná dokumentace všech konfiguračních parametrů a jasná definice
  jejich významu.

- Obvyklý mechanismus zpracování konfigurace, včetně voleb příkazové řádky a
  proměnných prostředí.

- Jednoduchá definice nových konfiguračních parametrů.

- Možnost vytváření konfiguračních parametrů specifických pro konkrétní
  aplikace, stejným způsobem jako v případě standardních konfiguračních
  parametrů.
  
- Flexibilita umožňující udržování implicitní definice konfigurace v CVS,
  její správu na instalovaném stroji a taktéž lokální definici používanou při
  vývoji a ladění aplikací bez nutnosti zasahovat do souborů pod kontrolou
  CVS.

- V rámci možností usnadnění ladění.


* Popis mechanismu

Konfigurace je definována třídou =pytis.util.Configuration=.  Tato třída
obsahuje definice standardních konfiguračních parametrů společných pro
všechny aplikace vystavěném nad toolkitem EBASu.  Množinu konfiguračních
parametrů lze rozšířit pro konkrétní aplikaci vytvořením instance
odpovídajícího potomka této třídy v definičních souborech aplikace a jeho
ztotožněním s modulem =config= (viz níže).

Každý konfigurační parametr je instancí třídy
=pytis.util.Configuration.Option=.  Tato třída definuje všechny specifikace
konfiguračního parametru, zejména jeho název a popis, jemu odpovídající volbu
příkazové řádky a proměnnou prostředí (jsou-li jaké) a implicitní hodnotu.

Pro definici nového konfiguračního parametru není nutno vytvářet instanci
třídy =pytis.util.Configuration.Option= přímo, stačí definovat jejího potomka
ve třídě =pytis.util.Configuration=.  Tento potomek musí mít jméno ve tvaru
=_Option_PARAMETER=, kde =PARAMETER= je název konfiguračního parametru, tak
jak se na něj bude odkazovat kód.  Dokumentační řetězec nově definované třídy
se automaticky stane dokumentací parametru ve vygenerovaném vzorovém
konfiguračním souboru.  S ohledem na tuto skutečnost mají dokumentační
řetězce těchto tříd nestandardní podobu, viz definované parametry ve třídě
=pytis.form.Configuration=.

Třída =pytis.util.Configuration.Option= definuje implicitní hodnoty pro všechny
specifikace parametrů, obvykle ve významu "nedefinováno".  V ideálním případě
tak není nutno v definici nové třídy uvádět nic kromě patřičného
dokumentačního řetězce.  Pokud však má být například parametr přístupný přes
volbu příkazové řádky nebo mít jinou viditelnost v generovaném vzorovém
konfiguračním souboru, je nutno předefinovat odpovídající metody.

Obvykle stačí v předefinovaných metodách pouze definovat správné návratové
hodnoty a není nutno psát výkonný kód.  Třída =pytis.util.Configuration=
zajišťuje na základě daných specifikací vše potřebné.  Výjimkou je uvedení
popisu volby příkazové řádky ve výpisu použití, ve skriptu =ebas=.

Konfigurace je implicitně načítána z konfiguračního souboru
=config/config.py=.  Kromě toho je načítán též soubor =config/_config.py=,
pokud existuje.  Nastavení z =_config.py= mají vyšší prioritu než nastavení
z =config.py=.  Soubor =_config.py= je určen pro lokální konfiguraci při
vývoji a ladění aplikace, ne pro používání za ostrého běhu aplikace.

Je-li aplikace spuštěna bez optimalizace Pythonu (tj. =__debug__= je
nastaveno na pravdu), jsou konfigurační parametry při změně některého
z konfiguračních souborů automaticky přenačítány.  Je pak již jen záležitostí
modulů, které tyto parametry používají, zda a jak na tuto změnu budou
reagovat.  Změnu konfigurace lze zjistit dotazem na sériové číslo konfigurace
metodou =Configuration.serial_number=.

Při zjišťování hodnoty konfiguračního parametru má nejvyšší prioritu volba
příkazové řádky, poté hodnoty proměnných prostředí v jejich uvedeném pořadí
ve specifikaci, poté hodnota v konfiguračním souboru a nakonec hodnota daná
metodou =pytis.util.Configuration.Option.default=.

Hodnoty konfiguračních parametrů mohou záviset na hodnotách jiných
konfiguračních parametrů.  Instanci třídy =Option= je předávána instance
konfigurace, odkud je možno jiné konfigurační parametry získat.
V závislostech parametrů však nesmí vzniknout cyklus.


* Použití

** Příklad definice konfiguračního parametru

Ve třídě =pytis.util.Configuration= je definována následující vnitřní třída:

<example>
    class _Option_dbuser(Option):
        """Uživatelské jméno (login) pro databázové spojení."""
        def long_option(self):
            return 'dbuser='
        def default(self):
            import getpass
            return getpass.getuser()
        def default_string(self):
            return 'getpass.getuser()'
</example>

Definuje konfigurační parametr =dbuser=, určující login uživatele do
databáze.  Parametr bude v programu přístupný pod jménem =config.dbuser=.
Jeho hodnotu lze změnit, jak je řečeno metodou =long_option=. volbou
příkazové řádky =--dbuser=, vyžadující hodnotu.  Protože nebyla změněna
viditelnost parametru ve vzorovém konfiguračním souboru, objeví se v tomto
souboru následující řádky:

<example>
  # Uživatelské jméno (login) pro databázové spojení.
  #dbuser = getpass.getuser()
</example>

Všimněte si, že se ve specifikaci liší implicitní hodnota jako taková (metoda
=default=) a řetězec určený pro vzorový konfigurační soubor (metoda
=default_string=).  Pokud by nebyla předefinována metoda =default_string=, ve
vygenerovaném vzorovém konfiguračním souboru by se objevilo jméno uživatele,
který tento soubor generoval.

** Jak přistupovat k hodnotě konfiguračního parametru

Inicializační soubor modulu =pytis.util= vytváří instanci třídy
=pytis.util.Configuration= a instaluje ji jako fiktivní globální modul
=config=.  Přístupy k modulu =config= jsou tak efektivně přístupy k této
instanci.

Třída =pytis.util.Configuration= definuje virtuální atributy odpovídající
jednotlivým konfiguračním parametrům.  Parametry tedy lze číst tečkovou
notací, jako kdyby se jednalo o atributy modulu =config=, například parametr
=debug= je zpřístupněn jako =config.debug=.  Do konfiguračních parametrů lze
i přiřazovat nové hodnoty, toho by však nemělo být využíváno pro jiné účely
než ladění.
